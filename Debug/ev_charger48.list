
ev_charger48.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009768  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08009824  08009824  0000a824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099b0  080099b0  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000000  080099b0  080099b0  0000b06c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099b0  080099b0  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b0  080099b0  0000a9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b4  080099b4  0000a9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080099b8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  2000006c  08009a24  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08009a24  0000b568  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017161  00000000  00000000  0000b094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002960  00000000  00000000  000221f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00024b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa9  00000000  00000000  00025f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7fc  00000000  00000000  00026ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017027  00000000  00000000  000456ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbd8d  00000000  00000000  0005c714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001284a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e84  00000000  00000000  001284e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0012d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800980c 	.word	0x0800980c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	0800980c 	.word	0x0800980c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 fae9 	bl	80019d8 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fa2d 	bl	8001870 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 fadb 	bl	80019d8 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fad1 	bl	80019d8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa57 	bl	80018f8 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa4d 	bl	80018f8 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f002 fa29 	bl	80028d8 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 fdf6 	bl	8002080 <__aeabi_dsub>
 8000494:	f002 fa20 	bl	80028d8 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	@ 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4646      	mov	r6, r8
 80004ac:	464f      	mov	r7, r9
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	0fc3      	lsrs	r3, r0, #31
 80004b6:	0047      	lsls	r7, r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	1c0e      	adds	r6, r1, #0
 80004bc:	0a6d      	lsrs	r5, r5, #9
 80004be:	0e3f      	lsrs	r7, r7, #24
 80004c0:	d05b      	beq.n	800057a <__aeabi_fdiv+0xd2>
 80004c2:	2fff      	cmp	r7, #255	@ 0xff
 80004c4:	d021      	beq.n	800050a <__aeabi_fdiv+0x62>
 80004c6:	2380      	movs	r3, #128	@ 0x80
 80004c8:	00ed      	lsls	r5, r5, #3
 80004ca:	04db      	lsls	r3, r3, #19
 80004cc:	431d      	orrs	r5, r3
 80004ce:	2300      	movs	r3, #0
 80004d0:	4699      	mov	r9, r3
 80004d2:	469a      	mov	sl, r3
 80004d4:	3f7f      	subs	r7, #127	@ 0x7f
 80004d6:	0274      	lsls	r4, r6, #9
 80004d8:	0073      	lsls	r3, r6, #1
 80004da:	0a64      	lsrs	r4, r4, #9
 80004dc:	0e1b      	lsrs	r3, r3, #24
 80004de:	0ff6      	lsrs	r6, r6, #31
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d020      	beq.n	8000526 <__aeabi_fdiv+0x7e>
 80004e4:	2bff      	cmp	r3, #255	@ 0xff
 80004e6:	d043      	beq.n	8000570 <__aeabi_fdiv+0xc8>
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	2000      	movs	r0, #0
 80004ec:	00e4      	lsls	r4, r4, #3
 80004ee:	04d2      	lsls	r2, r2, #19
 80004f0:	4314      	orrs	r4, r2
 80004f2:	3b7f      	subs	r3, #127	@ 0x7f
 80004f4:	4642      	mov	r2, r8
 80004f6:	1aff      	subs	r7, r7, r3
 80004f8:	464b      	mov	r3, r9
 80004fa:	4072      	eors	r2, r6
 80004fc:	2b0f      	cmp	r3, #15
 80004fe:	d900      	bls.n	8000502 <__aeabi_fdiv+0x5a>
 8000500:	e09d      	b.n	800063e <__aeabi_fdiv+0x196>
 8000502:	4971      	ldr	r1, [pc, #452]	@ (80006c8 <__aeabi_fdiv+0x220>)
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	58cb      	ldr	r3, [r1, r3]
 8000508:	469f      	mov	pc, r3
 800050a:	2d00      	cmp	r5, #0
 800050c:	d15a      	bne.n	80005c4 <__aeabi_fdiv+0x11c>
 800050e:	2308      	movs	r3, #8
 8000510:	4699      	mov	r9, r3
 8000512:	3b06      	subs	r3, #6
 8000514:	0274      	lsls	r4, r6, #9
 8000516:	469a      	mov	sl, r3
 8000518:	0073      	lsls	r3, r6, #1
 800051a:	27ff      	movs	r7, #255	@ 0xff
 800051c:	0a64      	lsrs	r4, r4, #9
 800051e:	0e1b      	lsrs	r3, r3, #24
 8000520:	0ff6      	lsrs	r6, r6, #31
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1de      	bne.n	80004e4 <__aeabi_fdiv+0x3c>
 8000526:	2c00      	cmp	r4, #0
 8000528:	d13b      	bne.n	80005a2 <__aeabi_fdiv+0xfa>
 800052a:	2301      	movs	r3, #1
 800052c:	4642      	mov	r2, r8
 800052e:	4649      	mov	r1, r9
 8000530:	4072      	eors	r2, r6
 8000532:	4319      	orrs	r1, r3
 8000534:	290e      	cmp	r1, #14
 8000536:	d818      	bhi.n	800056a <__aeabi_fdiv+0xc2>
 8000538:	4864      	ldr	r0, [pc, #400]	@ (80006cc <__aeabi_fdiv+0x224>)
 800053a:	0089      	lsls	r1, r1, #2
 800053c:	5841      	ldr	r1, [r0, r1]
 800053e:	468f      	mov	pc, r1
 8000540:	4653      	mov	r3, sl
 8000542:	2b02      	cmp	r3, #2
 8000544:	d100      	bne.n	8000548 <__aeabi_fdiv+0xa0>
 8000546:	e0b8      	b.n	80006ba <__aeabi_fdiv+0x212>
 8000548:	2b03      	cmp	r3, #3
 800054a:	d06e      	beq.n	800062a <__aeabi_fdiv+0x182>
 800054c:	4642      	mov	r2, r8
 800054e:	002c      	movs	r4, r5
 8000550:	2b01      	cmp	r3, #1
 8000552:	d140      	bne.n	80005d6 <__aeabi_fdiv+0x12e>
 8000554:	2000      	movs	r0, #0
 8000556:	2400      	movs	r4, #0
 8000558:	05c0      	lsls	r0, r0, #23
 800055a:	4320      	orrs	r0, r4
 800055c:	07d2      	lsls	r2, r2, #31
 800055e:	4310      	orrs	r0, r2
 8000560:	bce0      	pop	{r5, r6, r7}
 8000562:	46ba      	mov	sl, r7
 8000564:	46b1      	mov	r9, r6
 8000566:	46a8      	mov	r8, r5
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	20ff      	movs	r0, #255	@ 0xff
 800056c:	2400      	movs	r4, #0
 800056e:	e7f3      	b.n	8000558 <__aeabi_fdiv+0xb0>
 8000570:	2c00      	cmp	r4, #0
 8000572:	d120      	bne.n	80005b6 <__aeabi_fdiv+0x10e>
 8000574:	2302      	movs	r3, #2
 8000576:	3fff      	subs	r7, #255	@ 0xff
 8000578:	e7d8      	b.n	800052c <__aeabi_fdiv+0x84>
 800057a:	2d00      	cmp	r5, #0
 800057c:	d105      	bne.n	800058a <__aeabi_fdiv+0xe2>
 800057e:	2304      	movs	r3, #4
 8000580:	4699      	mov	r9, r3
 8000582:	3b03      	subs	r3, #3
 8000584:	2700      	movs	r7, #0
 8000586:	469a      	mov	sl, r3
 8000588:	e7a5      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 800058a:	0028      	movs	r0, r5
 800058c:	f002 fafc 	bl	8002b88 <__clzsi2>
 8000590:	2776      	movs	r7, #118	@ 0x76
 8000592:	1f43      	subs	r3, r0, #5
 8000594:	409d      	lsls	r5, r3
 8000596:	2300      	movs	r3, #0
 8000598:	427f      	negs	r7, r7
 800059a:	4699      	mov	r9, r3
 800059c:	469a      	mov	sl, r3
 800059e:	1a3f      	subs	r7, r7, r0
 80005a0:	e799      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 80005a2:	0020      	movs	r0, r4
 80005a4:	f002 faf0 	bl	8002b88 <__clzsi2>
 80005a8:	1f43      	subs	r3, r0, #5
 80005aa:	409c      	lsls	r4, r3
 80005ac:	2376      	movs	r3, #118	@ 0x76
 80005ae:	425b      	negs	r3, r3
 80005b0:	1a1b      	subs	r3, r3, r0
 80005b2:	2000      	movs	r0, #0
 80005b4:	e79e      	b.n	80004f4 <__aeabi_fdiv+0x4c>
 80005b6:	2303      	movs	r3, #3
 80005b8:	464a      	mov	r2, r9
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4691      	mov	r9, r2
 80005be:	2003      	movs	r0, #3
 80005c0:	33fc      	adds	r3, #252	@ 0xfc
 80005c2:	e797      	b.n	80004f4 <__aeabi_fdiv+0x4c>
 80005c4:	230c      	movs	r3, #12
 80005c6:	4699      	mov	r9, r3
 80005c8:	3b09      	subs	r3, #9
 80005ca:	27ff      	movs	r7, #255	@ 0xff
 80005cc:	469a      	mov	sl, r3
 80005ce:	e782      	b.n	80004d6 <__aeabi_fdiv+0x2e>
 80005d0:	2803      	cmp	r0, #3
 80005d2:	d02c      	beq.n	800062e <__aeabi_fdiv+0x186>
 80005d4:	0032      	movs	r2, r6
 80005d6:	0038      	movs	r0, r7
 80005d8:	307f      	adds	r0, #127	@ 0x7f
 80005da:	2800      	cmp	r0, #0
 80005dc:	dd47      	ble.n	800066e <__aeabi_fdiv+0x1c6>
 80005de:	0763      	lsls	r3, r4, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fdiv+0x144>
 80005e2:	230f      	movs	r3, #15
 80005e4:	4023      	ands	r3, r4
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fdiv+0x144>
 80005ea:	3404      	adds	r4, #4
 80005ec:	0123      	lsls	r3, r4, #4
 80005ee:	d503      	bpl.n	80005f8 <__aeabi_fdiv+0x150>
 80005f0:	0038      	movs	r0, r7
 80005f2:	4b37      	ldr	r3, [pc, #220]	@ (80006d0 <__aeabi_fdiv+0x228>)
 80005f4:	3080      	adds	r0, #128	@ 0x80
 80005f6:	401c      	ands	r4, r3
 80005f8:	28fe      	cmp	r0, #254	@ 0xfe
 80005fa:	dcb6      	bgt.n	800056a <__aeabi_fdiv+0xc2>
 80005fc:	01a4      	lsls	r4, r4, #6
 80005fe:	0a64      	lsrs	r4, r4, #9
 8000600:	b2c0      	uxtb	r0, r0
 8000602:	e7a9      	b.n	8000558 <__aeabi_fdiv+0xb0>
 8000604:	2480      	movs	r4, #128	@ 0x80
 8000606:	2200      	movs	r2, #0
 8000608:	20ff      	movs	r0, #255	@ 0xff
 800060a:	03e4      	lsls	r4, r4, #15
 800060c:	e7a4      	b.n	8000558 <__aeabi_fdiv+0xb0>
 800060e:	2380      	movs	r3, #128	@ 0x80
 8000610:	03db      	lsls	r3, r3, #15
 8000612:	421d      	tst	r5, r3
 8000614:	d001      	beq.n	800061a <__aeabi_fdiv+0x172>
 8000616:	421c      	tst	r4, r3
 8000618:	d00b      	beq.n	8000632 <__aeabi_fdiv+0x18a>
 800061a:	2480      	movs	r4, #128	@ 0x80
 800061c:	03e4      	lsls	r4, r4, #15
 800061e:	432c      	orrs	r4, r5
 8000620:	0264      	lsls	r4, r4, #9
 8000622:	4642      	mov	r2, r8
 8000624:	20ff      	movs	r0, #255	@ 0xff
 8000626:	0a64      	lsrs	r4, r4, #9
 8000628:	e796      	b.n	8000558 <__aeabi_fdiv+0xb0>
 800062a:	4646      	mov	r6, r8
 800062c:	002c      	movs	r4, r5
 800062e:	2380      	movs	r3, #128	@ 0x80
 8000630:	03db      	lsls	r3, r3, #15
 8000632:	431c      	orrs	r4, r3
 8000634:	0264      	lsls	r4, r4, #9
 8000636:	0032      	movs	r2, r6
 8000638:	20ff      	movs	r0, #255	@ 0xff
 800063a:	0a64      	lsrs	r4, r4, #9
 800063c:	e78c      	b.n	8000558 <__aeabi_fdiv+0xb0>
 800063e:	016d      	lsls	r5, r5, #5
 8000640:	0160      	lsls	r0, r4, #5
 8000642:	4285      	cmp	r5, r0
 8000644:	d22d      	bcs.n	80006a2 <__aeabi_fdiv+0x1fa>
 8000646:	231b      	movs	r3, #27
 8000648:	2400      	movs	r4, #0
 800064a:	3f01      	subs	r7, #1
 800064c:	2601      	movs	r6, #1
 800064e:	0029      	movs	r1, r5
 8000650:	0064      	lsls	r4, r4, #1
 8000652:	006d      	lsls	r5, r5, #1
 8000654:	2900      	cmp	r1, #0
 8000656:	db01      	blt.n	800065c <__aeabi_fdiv+0x1b4>
 8000658:	4285      	cmp	r5, r0
 800065a:	d301      	bcc.n	8000660 <__aeabi_fdiv+0x1b8>
 800065c:	1a2d      	subs	r5, r5, r0
 800065e:	4334      	orrs	r4, r6
 8000660:	3b01      	subs	r3, #1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f3      	bne.n	800064e <__aeabi_fdiv+0x1a6>
 8000666:	1e6b      	subs	r3, r5, #1
 8000668:	419d      	sbcs	r5, r3
 800066a:	432c      	orrs	r4, r5
 800066c:	e7b3      	b.n	80005d6 <__aeabi_fdiv+0x12e>
 800066e:	2301      	movs	r3, #1
 8000670:	1a1b      	subs	r3, r3, r0
 8000672:	2b1b      	cmp	r3, #27
 8000674:	dd00      	ble.n	8000678 <__aeabi_fdiv+0x1d0>
 8000676:	e76d      	b.n	8000554 <__aeabi_fdiv+0xac>
 8000678:	0021      	movs	r1, r4
 800067a:	379e      	adds	r7, #158	@ 0x9e
 800067c:	40d9      	lsrs	r1, r3
 800067e:	40bc      	lsls	r4, r7
 8000680:	000b      	movs	r3, r1
 8000682:	1e61      	subs	r1, r4, #1
 8000684:	418c      	sbcs	r4, r1
 8000686:	4323      	orrs	r3, r4
 8000688:	0759      	lsls	r1, r3, #29
 800068a:	d004      	beq.n	8000696 <__aeabi_fdiv+0x1ee>
 800068c:	210f      	movs	r1, #15
 800068e:	4019      	ands	r1, r3
 8000690:	2904      	cmp	r1, #4
 8000692:	d000      	beq.n	8000696 <__aeabi_fdiv+0x1ee>
 8000694:	3304      	adds	r3, #4
 8000696:	0159      	lsls	r1, r3, #5
 8000698:	d413      	bmi.n	80006c2 <__aeabi_fdiv+0x21a>
 800069a:	019b      	lsls	r3, r3, #6
 800069c:	2000      	movs	r0, #0
 800069e:	0a5c      	lsrs	r4, r3, #9
 80006a0:	e75a      	b.n	8000558 <__aeabi_fdiv+0xb0>
 80006a2:	231a      	movs	r3, #26
 80006a4:	2401      	movs	r4, #1
 80006a6:	1a2d      	subs	r5, r5, r0
 80006a8:	e7d0      	b.n	800064c <__aeabi_fdiv+0x1a4>
 80006aa:	1e98      	subs	r0, r3, #2
 80006ac:	4243      	negs	r3, r0
 80006ae:	4158      	adcs	r0, r3
 80006b0:	4240      	negs	r0, r0
 80006b2:	0032      	movs	r2, r6
 80006b4:	2400      	movs	r4, #0
 80006b6:	b2c0      	uxtb	r0, r0
 80006b8:	e74e      	b.n	8000558 <__aeabi_fdiv+0xb0>
 80006ba:	4642      	mov	r2, r8
 80006bc:	20ff      	movs	r0, #255	@ 0xff
 80006be:	2400      	movs	r4, #0
 80006c0:	e74a      	b.n	8000558 <__aeabi_fdiv+0xb0>
 80006c2:	2001      	movs	r0, #1
 80006c4:	2400      	movs	r4, #0
 80006c6:	e747      	b.n	8000558 <__aeabi_fdiv+0xb0>
 80006c8:	08009824 	.word	0x08009824
 80006cc:	08009864 	.word	0x08009864
 80006d0:	f7ffffff 	.word	0xf7ffffff

080006d4 <__aeabi_fmul>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	464f      	mov	r7, r9
 80006d8:	4646      	mov	r6, r8
 80006da:	46d6      	mov	lr, sl
 80006dc:	0044      	lsls	r4, r0, #1
 80006de:	b5c0      	push	{r6, r7, lr}
 80006e0:	0246      	lsls	r6, r0, #9
 80006e2:	1c0f      	adds	r7, r1, #0
 80006e4:	0a76      	lsrs	r6, r6, #9
 80006e6:	0e24      	lsrs	r4, r4, #24
 80006e8:	0fc5      	lsrs	r5, r0, #31
 80006ea:	2c00      	cmp	r4, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_fmul+0x1c>
 80006ee:	e0da      	b.n	80008a6 <__aeabi_fmul+0x1d2>
 80006f0:	2cff      	cmp	r4, #255	@ 0xff
 80006f2:	d074      	beq.n	80007de <__aeabi_fmul+0x10a>
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	00f6      	lsls	r6, r6, #3
 80006f8:	04db      	lsls	r3, r3, #19
 80006fa:	431e      	orrs	r6, r3
 80006fc:	2300      	movs	r3, #0
 80006fe:	4699      	mov	r9, r3
 8000700:	469a      	mov	sl, r3
 8000702:	3c7f      	subs	r4, #127	@ 0x7f
 8000704:	027b      	lsls	r3, r7, #9
 8000706:	0a5b      	lsrs	r3, r3, #9
 8000708:	4698      	mov	r8, r3
 800070a:	007b      	lsls	r3, r7, #1
 800070c:	0e1b      	lsrs	r3, r3, #24
 800070e:	0fff      	lsrs	r7, r7, #31
 8000710:	2b00      	cmp	r3, #0
 8000712:	d074      	beq.n	80007fe <__aeabi_fmul+0x12a>
 8000714:	2bff      	cmp	r3, #255	@ 0xff
 8000716:	d100      	bne.n	800071a <__aeabi_fmul+0x46>
 8000718:	e08e      	b.n	8000838 <__aeabi_fmul+0x164>
 800071a:	4642      	mov	r2, r8
 800071c:	2180      	movs	r1, #128	@ 0x80
 800071e:	00d2      	lsls	r2, r2, #3
 8000720:	04c9      	lsls	r1, r1, #19
 8000722:	4311      	orrs	r1, r2
 8000724:	3b7f      	subs	r3, #127	@ 0x7f
 8000726:	002a      	movs	r2, r5
 8000728:	18e4      	adds	r4, r4, r3
 800072a:	464b      	mov	r3, r9
 800072c:	407a      	eors	r2, r7
 800072e:	4688      	mov	r8, r1
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	2b0a      	cmp	r3, #10
 8000734:	dc75      	bgt.n	8000822 <__aeabi_fmul+0x14e>
 8000736:	464b      	mov	r3, r9
 8000738:	2000      	movs	r0, #0
 800073a:	2b02      	cmp	r3, #2
 800073c:	dd0f      	ble.n	800075e <__aeabi_fmul+0x8a>
 800073e:	4649      	mov	r1, r9
 8000740:	2301      	movs	r3, #1
 8000742:	408b      	lsls	r3, r1
 8000744:	21a6      	movs	r1, #166	@ 0xa6
 8000746:	00c9      	lsls	r1, r1, #3
 8000748:	420b      	tst	r3, r1
 800074a:	d169      	bne.n	8000820 <__aeabi_fmul+0x14c>
 800074c:	2190      	movs	r1, #144	@ 0x90
 800074e:	0089      	lsls	r1, r1, #2
 8000750:	420b      	tst	r3, r1
 8000752:	d000      	beq.n	8000756 <__aeabi_fmul+0x82>
 8000754:	e100      	b.n	8000958 <__aeabi_fmul+0x284>
 8000756:	2188      	movs	r1, #136	@ 0x88
 8000758:	4219      	tst	r1, r3
 800075a:	d000      	beq.n	800075e <__aeabi_fmul+0x8a>
 800075c:	e0f5      	b.n	800094a <__aeabi_fmul+0x276>
 800075e:	4641      	mov	r1, r8
 8000760:	0409      	lsls	r1, r1, #16
 8000762:	0c09      	lsrs	r1, r1, #16
 8000764:	4643      	mov	r3, r8
 8000766:	0008      	movs	r0, r1
 8000768:	0c35      	lsrs	r5, r6, #16
 800076a:	0436      	lsls	r6, r6, #16
 800076c:	0c1b      	lsrs	r3, r3, #16
 800076e:	0c36      	lsrs	r6, r6, #16
 8000770:	4370      	muls	r0, r6
 8000772:	4369      	muls	r1, r5
 8000774:	435e      	muls	r6, r3
 8000776:	435d      	muls	r5, r3
 8000778:	1876      	adds	r6, r6, r1
 800077a:	0c03      	lsrs	r3, r0, #16
 800077c:	199b      	adds	r3, r3, r6
 800077e:	4299      	cmp	r1, r3
 8000780:	d903      	bls.n	800078a <__aeabi_fmul+0xb6>
 8000782:	2180      	movs	r1, #128	@ 0x80
 8000784:	0249      	lsls	r1, r1, #9
 8000786:	468c      	mov	ip, r1
 8000788:	4465      	add	r5, ip
 800078a:	0400      	lsls	r0, r0, #16
 800078c:	0419      	lsls	r1, r3, #16
 800078e:	0c00      	lsrs	r0, r0, #16
 8000790:	1809      	adds	r1, r1, r0
 8000792:	018e      	lsls	r6, r1, #6
 8000794:	1e70      	subs	r0, r6, #1
 8000796:	4186      	sbcs	r6, r0
 8000798:	0c1b      	lsrs	r3, r3, #16
 800079a:	0e89      	lsrs	r1, r1, #26
 800079c:	195b      	adds	r3, r3, r5
 800079e:	430e      	orrs	r6, r1
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	431e      	orrs	r6, r3
 80007a4:	011b      	lsls	r3, r3, #4
 80007a6:	d46c      	bmi.n	8000882 <__aeabi_fmul+0x1ae>
 80007a8:	0023      	movs	r3, r4
 80007aa:	337f      	adds	r3, #127	@ 0x7f
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_fmul+0xde>
 80007b0:	e0b1      	b.n	8000916 <__aeabi_fmul+0x242>
 80007b2:	0015      	movs	r5, r2
 80007b4:	0771      	lsls	r1, r6, #29
 80007b6:	d00b      	beq.n	80007d0 <__aeabi_fmul+0xfc>
 80007b8:	200f      	movs	r0, #15
 80007ba:	0021      	movs	r1, r4
 80007bc:	4030      	ands	r0, r6
 80007be:	2804      	cmp	r0, #4
 80007c0:	d006      	beq.n	80007d0 <__aeabi_fmul+0xfc>
 80007c2:	3604      	adds	r6, #4
 80007c4:	0132      	lsls	r2, r6, #4
 80007c6:	d503      	bpl.n	80007d0 <__aeabi_fmul+0xfc>
 80007c8:	4b6e      	ldr	r3, [pc, #440]	@ (8000984 <__aeabi_fmul+0x2b0>)
 80007ca:	401e      	ands	r6, r3
 80007cc:	000b      	movs	r3, r1
 80007ce:	3380      	adds	r3, #128	@ 0x80
 80007d0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007d2:	dd00      	ble.n	80007d6 <__aeabi_fmul+0x102>
 80007d4:	e0bd      	b.n	8000952 <__aeabi_fmul+0x27e>
 80007d6:	01b2      	lsls	r2, r6, #6
 80007d8:	0a52      	lsrs	r2, r2, #9
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	e048      	b.n	8000870 <__aeabi_fmul+0x19c>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fmul+0x110>
 80007e2:	e092      	b.n	800090a <__aeabi_fmul+0x236>
 80007e4:	2308      	movs	r3, #8
 80007e6:	4699      	mov	r9, r3
 80007e8:	3b06      	subs	r3, #6
 80007ea:	469a      	mov	sl, r3
 80007ec:	027b      	lsls	r3, r7, #9
 80007ee:	0a5b      	lsrs	r3, r3, #9
 80007f0:	4698      	mov	r8, r3
 80007f2:	007b      	lsls	r3, r7, #1
 80007f4:	24ff      	movs	r4, #255	@ 0xff
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fff      	lsrs	r7, r7, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d18a      	bne.n	8000714 <__aeabi_fmul+0x40>
 80007fe:	4642      	mov	r2, r8
 8000800:	2a00      	cmp	r2, #0
 8000802:	d164      	bne.n	80008ce <__aeabi_fmul+0x1fa>
 8000804:	4649      	mov	r1, r9
 8000806:	3201      	adds	r2, #1
 8000808:	4311      	orrs	r1, r2
 800080a:	4689      	mov	r9, r1
 800080c:	290a      	cmp	r1, #10
 800080e:	dc08      	bgt.n	8000822 <__aeabi_fmul+0x14e>
 8000810:	407d      	eors	r5, r7
 8000812:	2001      	movs	r0, #1
 8000814:	b2ea      	uxtb	r2, r5
 8000816:	2902      	cmp	r1, #2
 8000818:	dc91      	bgt.n	800073e <__aeabi_fmul+0x6a>
 800081a:	0015      	movs	r5, r2
 800081c:	2200      	movs	r2, #0
 800081e:	e027      	b.n	8000870 <__aeabi_fmul+0x19c>
 8000820:	0015      	movs	r5, r2
 8000822:	4653      	mov	r3, sl
 8000824:	2b02      	cmp	r3, #2
 8000826:	d100      	bne.n	800082a <__aeabi_fmul+0x156>
 8000828:	e093      	b.n	8000952 <__aeabi_fmul+0x27e>
 800082a:	2b03      	cmp	r3, #3
 800082c:	d01a      	beq.n	8000864 <__aeabi_fmul+0x190>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d12c      	bne.n	800088c <__aeabi_fmul+0x1b8>
 8000832:	2300      	movs	r3, #0
 8000834:	2200      	movs	r2, #0
 8000836:	e01b      	b.n	8000870 <__aeabi_fmul+0x19c>
 8000838:	4643      	mov	r3, r8
 800083a:	34ff      	adds	r4, #255	@ 0xff
 800083c:	2b00      	cmp	r3, #0
 800083e:	d055      	beq.n	80008ec <__aeabi_fmul+0x218>
 8000840:	2103      	movs	r1, #3
 8000842:	464b      	mov	r3, r9
 8000844:	430b      	orrs	r3, r1
 8000846:	0019      	movs	r1, r3
 8000848:	2b0a      	cmp	r3, #10
 800084a:	dc00      	bgt.n	800084e <__aeabi_fmul+0x17a>
 800084c:	e092      	b.n	8000974 <__aeabi_fmul+0x2a0>
 800084e:	2b0f      	cmp	r3, #15
 8000850:	d000      	beq.n	8000854 <__aeabi_fmul+0x180>
 8000852:	e08c      	b.n	800096e <__aeabi_fmul+0x29a>
 8000854:	2280      	movs	r2, #128	@ 0x80
 8000856:	03d2      	lsls	r2, r2, #15
 8000858:	4216      	tst	r6, r2
 800085a:	d003      	beq.n	8000864 <__aeabi_fmul+0x190>
 800085c:	4643      	mov	r3, r8
 800085e:	4213      	tst	r3, r2
 8000860:	d100      	bne.n	8000864 <__aeabi_fmul+0x190>
 8000862:	e07d      	b.n	8000960 <__aeabi_fmul+0x28c>
 8000864:	2280      	movs	r2, #128	@ 0x80
 8000866:	03d2      	lsls	r2, r2, #15
 8000868:	4332      	orrs	r2, r6
 800086a:	0252      	lsls	r2, r2, #9
 800086c:	0a52      	lsrs	r2, r2, #9
 800086e:	23ff      	movs	r3, #255	@ 0xff
 8000870:	05d8      	lsls	r0, r3, #23
 8000872:	07ed      	lsls	r5, r5, #31
 8000874:	4310      	orrs	r0, r2
 8000876:	4328      	orrs	r0, r5
 8000878:	bce0      	pop	{r5, r6, r7}
 800087a:	46ba      	mov	sl, r7
 800087c:	46b1      	mov	r9, r6
 800087e:	46a8      	mov	r8, r5
 8000880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000882:	2301      	movs	r3, #1
 8000884:	0015      	movs	r5, r2
 8000886:	0871      	lsrs	r1, r6, #1
 8000888:	401e      	ands	r6, r3
 800088a:	430e      	orrs	r6, r1
 800088c:	0023      	movs	r3, r4
 800088e:	3380      	adds	r3, #128	@ 0x80
 8000890:	1c61      	adds	r1, r4, #1
 8000892:	2b00      	cmp	r3, #0
 8000894:	dd41      	ble.n	800091a <__aeabi_fmul+0x246>
 8000896:	0772      	lsls	r2, r6, #29
 8000898:	d094      	beq.n	80007c4 <__aeabi_fmul+0xf0>
 800089a:	220f      	movs	r2, #15
 800089c:	4032      	ands	r2, r6
 800089e:	2a04      	cmp	r2, #4
 80008a0:	d000      	beq.n	80008a4 <__aeabi_fmul+0x1d0>
 80008a2:	e78e      	b.n	80007c2 <__aeabi_fmul+0xee>
 80008a4:	e78e      	b.n	80007c4 <__aeabi_fmul+0xf0>
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d105      	bne.n	80008b6 <__aeabi_fmul+0x1e2>
 80008aa:	2304      	movs	r3, #4
 80008ac:	4699      	mov	r9, r3
 80008ae:	3b03      	subs	r3, #3
 80008b0:	2400      	movs	r4, #0
 80008b2:	469a      	mov	sl, r3
 80008b4:	e726      	b.n	8000704 <__aeabi_fmul+0x30>
 80008b6:	0030      	movs	r0, r6
 80008b8:	f002 f966 	bl	8002b88 <__clzsi2>
 80008bc:	2476      	movs	r4, #118	@ 0x76
 80008be:	1f43      	subs	r3, r0, #5
 80008c0:	409e      	lsls	r6, r3
 80008c2:	2300      	movs	r3, #0
 80008c4:	4264      	negs	r4, r4
 80008c6:	4699      	mov	r9, r3
 80008c8:	469a      	mov	sl, r3
 80008ca:	1a24      	subs	r4, r4, r0
 80008cc:	e71a      	b.n	8000704 <__aeabi_fmul+0x30>
 80008ce:	4640      	mov	r0, r8
 80008d0:	f002 f95a 	bl	8002b88 <__clzsi2>
 80008d4:	464b      	mov	r3, r9
 80008d6:	1a24      	subs	r4, r4, r0
 80008d8:	3c76      	subs	r4, #118	@ 0x76
 80008da:	2b0a      	cmp	r3, #10
 80008dc:	dca1      	bgt.n	8000822 <__aeabi_fmul+0x14e>
 80008de:	4643      	mov	r3, r8
 80008e0:	3805      	subs	r0, #5
 80008e2:	4083      	lsls	r3, r0
 80008e4:	407d      	eors	r5, r7
 80008e6:	4698      	mov	r8, r3
 80008e8:	b2ea      	uxtb	r2, r5
 80008ea:	e724      	b.n	8000736 <__aeabi_fmul+0x62>
 80008ec:	464a      	mov	r2, r9
 80008ee:	3302      	adds	r3, #2
 80008f0:	4313      	orrs	r3, r2
 80008f2:	002a      	movs	r2, r5
 80008f4:	407a      	eors	r2, r7
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	2b0a      	cmp	r3, #10
 80008fa:	dc92      	bgt.n	8000822 <__aeabi_fmul+0x14e>
 80008fc:	4649      	mov	r1, r9
 80008fe:	0015      	movs	r5, r2
 8000900:	2900      	cmp	r1, #0
 8000902:	d026      	beq.n	8000952 <__aeabi_fmul+0x27e>
 8000904:	4699      	mov	r9, r3
 8000906:	2002      	movs	r0, #2
 8000908:	e719      	b.n	800073e <__aeabi_fmul+0x6a>
 800090a:	230c      	movs	r3, #12
 800090c:	4699      	mov	r9, r3
 800090e:	3b09      	subs	r3, #9
 8000910:	24ff      	movs	r4, #255	@ 0xff
 8000912:	469a      	mov	sl, r3
 8000914:	e6f6      	b.n	8000704 <__aeabi_fmul+0x30>
 8000916:	0015      	movs	r5, r2
 8000918:	0021      	movs	r1, r4
 800091a:	2201      	movs	r2, #1
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	2b1b      	cmp	r3, #27
 8000920:	dd00      	ble.n	8000924 <__aeabi_fmul+0x250>
 8000922:	e786      	b.n	8000832 <__aeabi_fmul+0x15e>
 8000924:	319e      	adds	r1, #158	@ 0x9e
 8000926:	0032      	movs	r2, r6
 8000928:	408e      	lsls	r6, r1
 800092a:	40da      	lsrs	r2, r3
 800092c:	1e73      	subs	r3, r6, #1
 800092e:	419e      	sbcs	r6, r3
 8000930:	4332      	orrs	r2, r6
 8000932:	0753      	lsls	r3, r2, #29
 8000934:	d004      	beq.n	8000940 <__aeabi_fmul+0x26c>
 8000936:	230f      	movs	r3, #15
 8000938:	4013      	ands	r3, r2
 800093a:	2b04      	cmp	r3, #4
 800093c:	d000      	beq.n	8000940 <__aeabi_fmul+0x26c>
 800093e:	3204      	adds	r2, #4
 8000940:	0153      	lsls	r3, r2, #5
 8000942:	d510      	bpl.n	8000966 <__aeabi_fmul+0x292>
 8000944:	2301      	movs	r3, #1
 8000946:	2200      	movs	r2, #0
 8000948:	e792      	b.n	8000870 <__aeabi_fmul+0x19c>
 800094a:	003d      	movs	r5, r7
 800094c:	4646      	mov	r6, r8
 800094e:	4682      	mov	sl, r0
 8000950:	e767      	b.n	8000822 <__aeabi_fmul+0x14e>
 8000952:	23ff      	movs	r3, #255	@ 0xff
 8000954:	2200      	movs	r2, #0
 8000956:	e78b      	b.n	8000870 <__aeabi_fmul+0x19c>
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	2500      	movs	r5, #0
 800095c:	03d2      	lsls	r2, r2, #15
 800095e:	e786      	b.n	800086e <__aeabi_fmul+0x19a>
 8000960:	003d      	movs	r5, r7
 8000962:	431a      	orrs	r2, r3
 8000964:	e783      	b.n	800086e <__aeabi_fmul+0x19a>
 8000966:	0192      	lsls	r2, r2, #6
 8000968:	2300      	movs	r3, #0
 800096a:	0a52      	lsrs	r2, r2, #9
 800096c:	e780      	b.n	8000870 <__aeabi_fmul+0x19c>
 800096e:	003d      	movs	r5, r7
 8000970:	4646      	mov	r6, r8
 8000972:	e777      	b.n	8000864 <__aeabi_fmul+0x190>
 8000974:	002a      	movs	r2, r5
 8000976:	2301      	movs	r3, #1
 8000978:	407a      	eors	r2, r7
 800097a:	408b      	lsls	r3, r1
 800097c:	2003      	movs	r0, #3
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	e6e9      	b.n	8000756 <__aeabi_fmul+0x82>
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	f7ffffff 	.word	0xf7ffffff

08000988 <__aeabi_i2f>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	2800      	cmp	r0, #0
 800098c:	d012      	beq.n	80009b4 <__aeabi_i2f+0x2c>
 800098e:	17c3      	asrs	r3, r0, #31
 8000990:	18c5      	adds	r5, r0, r3
 8000992:	405d      	eors	r5, r3
 8000994:	0fc4      	lsrs	r4, r0, #31
 8000996:	0028      	movs	r0, r5
 8000998:	f002 f8f6 	bl	8002b88 <__clzsi2>
 800099c:	239e      	movs	r3, #158	@ 0x9e
 800099e:	1a1b      	subs	r3, r3, r0
 80009a0:	2b96      	cmp	r3, #150	@ 0x96
 80009a2:	dc0f      	bgt.n	80009c4 <__aeabi_i2f+0x3c>
 80009a4:	2808      	cmp	r0, #8
 80009a6:	d038      	beq.n	8000a1a <__aeabi_i2f+0x92>
 80009a8:	3808      	subs	r0, #8
 80009aa:	4085      	lsls	r5, r0
 80009ac:	026d      	lsls	r5, r5, #9
 80009ae:	0a6d      	lsrs	r5, r5, #9
 80009b0:	b2d8      	uxtb	r0, r3
 80009b2:	e002      	b.n	80009ba <__aeabi_i2f+0x32>
 80009b4:	2400      	movs	r4, #0
 80009b6:	2000      	movs	r0, #0
 80009b8:	2500      	movs	r5, #0
 80009ba:	05c0      	lsls	r0, r0, #23
 80009bc:	4328      	orrs	r0, r5
 80009be:	07e4      	lsls	r4, r4, #31
 80009c0:	4320      	orrs	r0, r4
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	2b99      	cmp	r3, #153	@ 0x99
 80009c6:	dc14      	bgt.n	80009f2 <__aeabi_i2f+0x6a>
 80009c8:	1f42      	subs	r2, r0, #5
 80009ca:	4095      	lsls	r5, r2
 80009cc:	002a      	movs	r2, r5
 80009ce:	4915      	ldr	r1, [pc, #84]	@ (8000a24 <__aeabi_i2f+0x9c>)
 80009d0:	4011      	ands	r1, r2
 80009d2:	0755      	lsls	r5, r2, #29
 80009d4:	d01c      	beq.n	8000a10 <__aeabi_i2f+0x88>
 80009d6:	250f      	movs	r5, #15
 80009d8:	402a      	ands	r2, r5
 80009da:	2a04      	cmp	r2, #4
 80009dc:	d018      	beq.n	8000a10 <__aeabi_i2f+0x88>
 80009de:	3104      	adds	r1, #4
 80009e0:	08ca      	lsrs	r2, r1, #3
 80009e2:	0149      	lsls	r1, r1, #5
 80009e4:	d515      	bpl.n	8000a12 <__aeabi_i2f+0x8a>
 80009e6:	239f      	movs	r3, #159	@ 0x9f
 80009e8:	0252      	lsls	r2, r2, #9
 80009ea:	1a18      	subs	r0, r3, r0
 80009ec:	0a55      	lsrs	r5, r2, #9
 80009ee:	b2c0      	uxtb	r0, r0
 80009f0:	e7e3      	b.n	80009ba <__aeabi_i2f+0x32>
 80009f2:	2205      	movs	r2, #5
 80009f4:	0029      	movs	r1, r5
 80009f6:	1a12      	subs	r2, r2, r0
 80009f8:	40d1      	lsrs	r1, r2
 80009fa:	0002      	movs	r2, r0
 80009fc:	321b      	adds	r2, #27
 80009fe:	4095      	lsls	r5, r2
 8000a00:	002a      	movs	r2, r5
 8000a02:	1e55      	subs	r5, r2, #1
 8000a04:	41aa      	sbcs	r2, r5
 8000a06:	430a      	orrs	r2, r1
 8000a08:	4906      	ldr	r1, [pc, #24]	@ (8000a24 <__aeabi_i2f+0x9c>)
 8000a0a:	4011      	ands	r1, r2
 8000a0c:	0755      	lsls	r5, r2, #29
 8000a0e:	d1e2      	bne.n	80009d6 <__aeabi_i2f+0x4e>
 8000a10:	08ca      	lsrs	r2, r1, #3
 8000a12:	0252      	lsls	r2, r2, #9
 8000a14:	0a55      	lsrs	r5, r2, #9
 8000a16:	b2d8      	uxtb	r0, r3
 8000a18:	e7cf      	b.n	80009ba <__aeabi_i2f+0x32>
 8000a1a:	026d      	lsls	r5, r5, #9
 8000a1c:	0a6d      	lsrs	r5, r5, #9
 8000a1e:	308e      	adds	r0, #142	@ 0x8e
 8000a20:	e7cb      	b.n	80009ba <__aeabi_i2f+0x32>
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	fbffffff 	.word	0xfbffffff

08000a28 <__aeabi_ui2f>:
 8000a28:	b510      	push	{r4, lr}
 8000a2a:	1e04      	subs	r4, r0, #0
 8000a2c:	d00d      	beq.n	8000a4a <__aeabi_ui2f+0x22>
 8000a2e:	f002 f8ab 	bl	8002b88 <__clzsi2>
 8000a32:	239e      	movs	r3, #158	@ 0x9e
 8000a34:	1a1b      	subs	r3, r3, r0
 8000a36:	2b96      	cmp	r3, #150	@ 0x96
 8000a38:	dc0c      	bgt.n	8000a54 <__aeabi_ui2f+0x2c>
 8000a3a:	2808      	cmp	r0, #8
 8000a3c:	d034      	beq.n	8000aa8 <__aeabi_ui2f+0x80>
 8000a3e:	3808      	subs	r0, #8
 8000a40:	4084      	lsls	r4, r0
 8000a42:	0264      	lsls	r4, r4, #9
 8000a44:	0a64      	lsrs	r4, r4, #9
 8000a46:	b2d8      	uxtb	r0, r3
 8000a48:	e001      	b.n	8000a4e <__aeabi_ui2f+0x26>
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	2400      	movs	r4, #0
 8000a4e:	05c0      	lsls	r0, r0, #23
 8000a50:	4320      	orrs	r0, r4
 8000a52:	bd10      	pop	{r4, pc}
 8000a54:	2b99      	cmp	r3, #153	@ 0x99
 8000a56:	dc13      	bgt.n	8000a80 <__aeabi_ui2f+0x58>
 8000a58:	1f42      	subs	r2, r0, #5
 8000a5a:	4094      	lsls	r4, r2
 8000a5c:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <__aeabi_ui2f+0x88>)
 8000a5e:	4022      	ands	r2, r4
 8000a60:	0761      	lsls	r1, r4, #29
 8000a62:	d01c      	beq.n	8000a9e <__aeabi_ui2f+0x76>
 8000a64:	210f      	movs	r1, #15
 8000a66:	4021      	ands	r1, r4
 8000a68:	2904      	cmp	r1, #4
 8000a6a:	d018      	beq.n	8000a9e <__aeabi_ui2f+0x76>
 8000a6c:	3204      	adds	r2, #4
 8000a6e:	08d4      	lsrs	r4, r2, #3
 8000a70:	0152      	lsls	r2, r2, #5
 8000a72:	d515      	bpl.n	8000aa0 <__aeabi_ui2f+0x78>
 8000a74:	239f      	movs	r3, #159	@ 0x9f
 8000a76:	0264      	lsls	r4, r4, #9
 8000a78:	1a18      	subs	r0, r3, r0
 8000a7a:	0a64      	lsrs	r4, r4, #9
 8000a7c:	b2c0      	uxtb	r0, r0
 8000a7e:	e7e6      	b.n	8000a4e <__aeabi_ui2f+0x26>
 8000a80:	0002      	movs	r2, r0
 8000a82:	0021      	movs	r1, r4
 8000a84:	321b      	adds	r2, #27
 8000a86:	4091      	lsls	r1, r2
 8000a88:	000a      	movs	r2, r1
 8000a8a:	1e51      	subs	r1, r2, #1
 8000a8c:	418a      	sbcs	r2, r1
 8000a8e:	2105      	movs	r1, #5
 8000a90:	1a09      	subs	r1, r1, r0
 8000a92:	40cc      	lsrs	r4, r1
 8000a94:	4314      	orrs	r4, r2
 8000a96:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <__aeabi_ui2f+0x88>)
 8000a98:	4022      	ands	r2, r4
 8000a9a:	0761      	lsls	r1, r4, #29
 8000a9c:	d1e2      	bne.n	8000a64 <__aeabi_ui2f+0x3c>
 8000a9e:	08d4      	lsrs	r4, r2, #3
 8000aa0:	0264      	lsls	r4, r4, #9
 8000aa2:	0a64      	lsrs	r4, r4, #9
 8000aa4:	b2d8      	uxtb	r0, r3
 8000aa6:	e7d2      	b.n	8000a4e <__aeabi_ui2f+0x26>
 8000aa8:	0264      	lsls	r4, r4, #9
 8000aaa:	0a64      	lsrs	r4, r4, #9
 8000aac:	308e      	adds	r0, #142	@ 0x8e
 8000aae:	e7ce      	b.n	8000a4e <__aeabi_ui2f+0x26>
 8000ab0:	fbffffff 	.word	0xfbffffff

08000ab4 <__aeabi_dadd>:
 8000ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab6:	464f      	mov	r7, r9
 8000ab8:	4646      	mov	r6, r8
 8000aba:	46d6      	mov	lr, sl
 8000abc:	b5c0      	push	{r6, r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	9000      	str	r0, [sp, #0]
 8000ac2:	9101      	str	r1, [sp, #4]
 8000ac4:	030e      	lsls	r6, r1, #12
 8000ac6:	004c      	lsls	r4, r1, #1
 8000ac8:	0fcd      	lsrs	r5, r1, #31
 8000aca:	0a71      	lsrs	r1, r6, #9
 8000acc:	9e00      	ldr	r6, [sp, #0]
 8000ace:	005f      	lsls	r7, r3, #1
 8000ad0:	0f76      	lsrs	r6, r6, #29
 8000ad2:	430e      	orrs	r6, r1
 8000ad4:	9900      	ldr	r1, [sp, #0]
 8000ad6:	9200      	str	r2, [sp, #0]
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	00c9      	lsls	r1, r1, #3
 8000adc:	4689      	mov	r9, r1
 8000ade:	0319      	lsls	r1, r3, #12
 8000ae0:	0d7b      	lsrs	r3, r7, #21
 8000ae2:	4698      	mov	r8, r3
 8000ae4:	9b01      	ldr	r3, [sp, #4]
 8000ae6:	0a49      	lsrs	r1, r1, #9
 8000ae8:	0fdb      	lsrs	r3, r3, #31
 8000aea:	469c      	mov	ip, r3
 8000aec:	9b00      	ldr	r3, [sp, #0]
 8000aee:	9a00      	ldr	r2, [sp, #0]
 8000af0:	0f5b      	lsrs	r3, r3, #29
 8000af2:	430b      	orrs	r3, r1
 8000af4:	4641      	mov	r1, r8
 8000af6:	0d64      	lsrs	r4, r4, #21
 8000af8:	00d2      	lsls	r2, r2, #3
 8000afa:	1a61      	subs	r1, r4, r1
 8000afc:	4565      	cmp	r5, ip
 8000afe:	d100      	bne.n	8000b02 <__aeabi_dadd+0x4e>
 8000b00:	e0a6      	b.n	8000c50 <__aeabi_dadd+0x19c>
 8000b02:	2900      	cmp	r1, #0
 8000b04:	dd72      	ble.n	8000bec <__aeabi_dadd+0x138>
 8000b06:	4647      	mov	r7, r8
 8000b08:	2f00      	cmp	r7, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x5a>
 8000b0c:	e0dd      	b.n	8000cca <__aeabi_dadd+0x216>
 8000b0e:	4fcc      	ldr	r7, [pc, #816]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000b10:	42bc      	cmp	r4, r7
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x62>
 8000b14:	e19a      	b.n	8000e4c <__aeabi_dadd+0x398>
 8000b16:	2701      	movs	r7, #1
 8000b18:	2938      	cmp	r1, #56	@ 0x38
 8000b1a:	dc17      	bgt.n	8000b4c <__aeabi_dadd+0x98>
 8000b1c:	2780      	movs	r7, #128	@ 0x80
 8000b1e:	043f      	lsls	r7, r7, #16
 8000b20:	433b      	orrs	r3, r7
 8000b22:	291f      	cmp	r1, #31
 8000b24:	dd00      	ble.n	8000b28 <__aeabi_dadd+0x74>
 8000b26:	e1dd      	b.n	8000ee4 <__aeabi_dadd+0x430>
 8000b28:	2720      	movs	r7, #32
 8000b2a:	1a78      	subs	r0, r7, r1
 8000b2c:	001f      	movs	r7, r3
 8000b2e:	4087      	lsls	r7, r0
 8000b30:	46ba      	mov	sl, r7
 8000b32:	0017      	movs	r7, r2
 8000b34:	40cf      	lsrs	r7, r1
 8000b36:	4684      	mov	ip, r0
 8000b38:	0038      	movs	r0, r7
 8000b3a:	4657      	mov	r7, sl
 8000b3c:	4307      	orrs	r7, r0
 8000b3e:	4660      	mov	r0, ip
 8000b40:	4082      	lsls	r2, r0
 8000b42:	40cb      	lsrs	r3, r1
 8000b44:	1e50      	subs	r0, r2, #1
 8000b46:	4182      	sbcs	r2, r0
 8000b48:	1af6      	subs	r6, r6, r3
 8000b4a:	4317      	orrs	r7, r2
 8000b4c:	464b      	mov	r3, r9
 8000b4e:	1bdf      	subs	r7, r3, r7
 8000b50:	45b9      	cmp	r9, r7
 8000b52:	4180      	sbcs	r0, r0
 8000b54:	4240      	negs	r0, r0
 8000b56:	1a36      	subs	r6, r6, r0
 8000b58:	0233      	lsls	r3, r6, #8
 8000b5a:	d400      	bmi.n	8000b5e <__aeabi_dadd+0xaa>
 8000b5c:	e0ff      	b.n	8000d5e <__aeabi_dadd+0x2aa>
 8000b5e:	0276      	lsls	r6, r6, #9
 8000b60:	0a76      	lsrs	r6, r6, #9
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dadd+0xb4>
 8000b66:	e13c      	b.n	8000de2 <__aeabi_dadd+0x32e>
 8000b68:	0030      	movs	r0, r6
 8000b6a:	f002 f80d 	bl	8002b88 <__clzsi2>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	3b08      	subs	r3, #8
 8000b72:	2120      	movs	r1, #32
 8000b74:	0038      	movs	r0, r7
 8000b76:	1aca      	subs	r2, r1, r3
 8000b78:	40d0      	lsrs	r0, r2
 8000b7a:	409e      	lsls	r6, r3
 8000b7c:	0002      	movs	r2, r0
 8000b7e:	409f      	lsls	r7, r3
 8000b80:	4332      	orrs	r2, r6
 8000b82:	429c      	cmp	r4, r3
 8000b84:	dd00      	ble.n	8000b88 <__aeabi_dadd+0xd4>
 8000b86:	e1a6      	b.n	8000ed6 <__aeabi_dadd+0x422>
 8000b88:	1b18      	subs	r0, r3, r4
 8000b8a:	3001      	adds	r0, #1
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	003e      	movs	r6, r7
 8000b90:	408f      	lsls	r7, r1
 8000b92:	40c6      	lsrs	r6, r0
 8000b94:	1e7b      	subs	r3, r7, #1
 8000b96:	419f      	sbcs	r7, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	408b      	lsls	r3, r1
 8000b9c:	4337      	orrs	r7, r6
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	40c2      	lsrs	r2, r0
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	0016      	movs	r6, r2
 8000ba6:	2400      	movs	r4, #0
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0xfa>
 8000bac:	e1df      	b.n	8000f6e <__aeabi_dadd+0x4ba>
 8000bae:	077b      	lsls	r3, r7, #29
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x100>
 8000bb2:	e332      	b.n	800121a <__aeabi_dadd+0x766>
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	003a      	movs	r2, r7
 8000bb8:	403b      	ands	r3, r7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d004      	beq.n	8000bc8 <__aeabi_dadd+0x114>
 8000bbe:	1d3a      	adds	r2, r7, #4
 8000bc0:	42ba      	cmp	r2, r7
 8000bc2:	41bf      	sbcs	r7, r7
 8000bc4:	427f      	negs	r7, r7
 8000bc6:	19f6      	adds	r6, r6, r7
 8000bc8:	0233      	lsls	r3, r6, #8
 8000bca:	d400      	bmi.n	8000bce <__aeabi_dadd+0x11a>
 8000bcc:	e323      	b.n	8001216 <__aeabi_dadd+0x762>
 8000bce:	4b9c      	ldr	r3, [pc, #624]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000bd0:	3401      	adds	r4, #1
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_dadd+0x124>
 8000bd6:	e0b4      	b.n	8000d42 <__aeabi_dadd+0x28e>
 8000bd8:	4b9a      	ldr	r3, [pc, #616]	@ (8000e44 <__aeabi_dadd+0x390>)
 8000bda:	0564      	lsls	r4, r4, #21
 8000bdc:	401e      	ands	r6, r3
 8000bde:	0d64      	lsrs	r4, r4, #21
 8000be0:	0777      	lsls	r7, r6, #29
 8000be2:	08d2      	lsrs	r2, r2, #3
 8000be4:	0276      	lsls	r6, r6, #9
 8000be6:	4317      	orrs	r7, r2
 8000be8:	0b36      	lsrs	r6, r6, #12
 8000bea:	e0ac      	b.n	8000d46 <__aeabi_dadd+0x292>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x13e>
 8000bf0:	e07e      	b.n	8000cf0 <__aeabi_dadd+0x23c>
 8000bf2:	4641      	mov	r1, r8
 8000bf4:	1b09      	subs	r1, r1, r4
 8000bf6:	2c00      	cmp	r4, #0
 8000bf8:	d000      	beq.n	8000bfc <__aeabi_dadd+0x148>
 8000bfa:	e160      	b.n	8000ebe <__aeabi_dadd+0x40a>
 8000bfc:	0034      	movs	r4, r6
 8000bfe:	4648      	mov	r0, r9
 8000c00:	4304      	orrs	r4, r0
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x152>
 8000c04:	e1c9      	b.n	8000f9a <__aeabi_dadd+0x4e6>
 8000c06:	1e4c      	subs	r4, r1, #1
 8000c08:	2901      	cmp	r1, #1
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dadd+0x15a>
 8000c0c:	e22e      	b.n	800106c <__aeabi_dadd+0x5b8>
 8000c0e:	4d8c      	ldr	r5, [pc, #560]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000c10:	42a9      	cmp	r1, r5
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dadd+0x162>
 8000c14:	e224      	b.n	8001060 <__aeabi_dadd+0x5ac>
 8000c16:	2701      	movs	r7, #1
 8000c18:	2c38      	cmp	r4, #56	@ 0x38
 8000c1a:	dc11      	bgt.n	8000c40 <__aeabi_dadd+0x18c>
 8000c1c:	0021      	movs	r1, r4
 8000c1e:	291f      	cmp	r1, #31
 8000c20:	dd00      	ble.n	8000c24 <__aeabi_dadd+0x170>
 8000c22:	e20b      	b.n	800103c <__aeabi_dadd+0x588>
 8000c24:	2420      	movs	r4, #32
 8000c26:	0037      	movs	r7, r6
 8000c28:	4648      	mov	r0, r9
 8000c2a:	1a64      	subs	r4, r4, r1
 8000c2c:	40a7      	lsls	r7, r4
 8000c2e:	40c8      	lsrs	r0, r1
 8000c30:	4307      	orrs	r7, r0
 8000c32:	4648      	mov	r0, r9
 8000c34:	40a0      	lsls	r0, r4
 8000c36:	40ce      	lsrs	r6, r1
 8000c38:	1e44      	subs	r4, r0, #1
 8000c3a:	41a0      	sbcs	r0, r4
 8000c3c:	1b9b      	subs	r3, r3, r6
 8000c3e:	4307      	orrs	r7, r0
 8000c40:	1bd7      	subs	r7, r2, r7
 8000c42:	42ba      	cmp	r2, r7
 8000c44:	4192      	sbcs	r2, r2
 8000c46:	4252      	negs	r2, r2
 8000c48:	4665      	mov	r5, ip
 8000c4a:	4644      	mov	r4, r8
 8000c4c:	1a9e      	subs	r6, r3, r2
 8000c4e:	e783      	b.n	8000b58 <__aeabi_dadd+0xa4>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	dc00      	bgt.n	8000c56 <__aeabi_dadd+0x1a2>
 8000c54:	e09c      	b.n	8000d90 <__aeabi_dadd+0x2dc>
 8000c56:	4647      	mov	r7, r8
 8000c58:	2f00      	cmp	r7, #0
 8000c5a:	d167      	bne.n	8000d2c <__aeabi_dadd+0x278>
 8000c5c:	001f      	movs	r7, r3
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	d100      	bne.n	8000c64 <__aeabi_dadd+0x1b0>
 8000c62:	e0e4      	b.n	8000e2e <__aeabi_dadd+0x37a>
 8000c64:	1e48      	subs	r0, r1, #1
 8000c66:	2901      	cmp	r1, #1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x1b8>
 8000c6a:	e19b      	b.n	8000fa4 <__aeabi_dadd+0x4f0>
 8000c6c:	4f74      	ldr	r7, [pc, #464]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000c6e:	42b9      	cmp	r1, r7
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dadd+0x1c0>
 8000c72:	e0eb      	b.n	8000e4c <__aeabi_dadd+0x398>
 8000c74:	2701      	movs	r7, #1
 8000c76:	0001      	movs	r1, r0
 8000c78:	2838      	cmp	r0, #56	@ 0x38
 8000c7a:	dc11      	bgt.n	8000ca0 <__aeabi_dadd+0x1ec>
 8000c7c:	291f      	cmp	r1, #31
 8000c7e:	dd00      	ble.n	8000c82 <__aeabi_dadd+0x1ce>
 8000c80:	e1c7      	b.n	8001012 <__aeabi_dadd+0x55e>
 8000c82:	2720      	movs	r7, #32
 8000c84:	1a78      	subs	r0, r7, r1
 8000c86:	001f      	movs	r7, r3
 8000c88:	4684      	mov	ip, r0
 8000c8a:	4087      	lsls	r7, r0
 8000c8c:	0010      	movs	r0, r2
 8000c8e:	40c8      	lsrs	r0, r1
 8000c90:	4307      	orrs	r7, r0
 8000c92:	4660      	mov	r0, ip
 8000c94:	4082      	lsls	r2, r0
 8000c96:	40cb      	lsrs	r3, r1
 8000c98:	1e50      	subs	r0, r2, #1
 8000c9a:	4182      	sbcs	r2, r0
 8000c9c:	18f6      	adds	r6, r6, r3
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	444f      	add	r7, r9
 8000ca2:	454f      	cmp	r7, r9
 8000ca4:	4180      	sbcs	r0, r0
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	1836      	adds	r6, r6, r0
 8000caa:	0233      	lsls	r3, r6, #8
 8000cac:	d557      	bpl.n	8000d5e <__aeabi_dadd+0x2aa>
 8000cae:	4b64      	ldr	r3, [pc, #400]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000cb0:	3401      	adds	r4, #1
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	d045      	beq.n	8000d42 <__aeabi_dadd+0x28e>
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4b62      	ldr	r3, [pc, #392]	@ (8000e44 <__aeabi_dadd+0x390>)
 8000cba:	087a      	lsrs	r2, r7, #1
 8000cbc:	401e      	ands	r6, r3
 8000cbe:	4039      	ands	r1, r7
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	07f7      	lsls	r7, r6, #31
 8000cc4:	4317      	orrs	r7, r2
 8000cc6:	0876      	lsrs	r6, r6, #1
 8000cc8:	e771      	b.n	8000bae <__aeabi_dadd+0xfa>
 8000cca:	001f      	movs	r7, r3
 8000ccc:	4317      	orrs	r7, r2
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dadd+0x21e>
 8000cd0:	e0ad      	b.n	8000e2e <__aeabi_dadd+0x37a>
 8000cd2:	1e4f      	subs	r7, r1, #1
 8000cd4:	46bc      	mov	ip, r7
 8000cd6:	2901      	cmp	r1, #1
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dadd+0x228>
 8000cda:	e182      	b.n	8000fe2 <__aeabi_dadd+0x52e>
 8000cdc:	4f58      	ldr	r7, [pc, #352]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000cde:	42b9      	cmp	r1, r7
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x230>
 8000ce2:	e190      	b.n	8001006 <__aeabi_dadd+0x552>
 8000ce4:	4661      	mov	r1, ip
 8000ce6:	2701      	movs	r7, #1
 8000ce8:	2938      	cmp	r1, #56	@ 0x38
 8000cea:	dd00      	ble.n	8000cee <__aeabi_dadd+0x23a>
 8000cec:	e72e      	b.n	8000b4c <__aeabi_dadd+0x98>
 8000cee:	e718      	b.n	8000b22 <__aeabi_dadd+0x6e>
 8000cf0:	4f55      	ldr	r7, [pc, #340]	@ (8000e48 <__aeabi_dadd+0x394>)
 8000cf2:	1c61      	adds	r1, r4, #1
 8000cf4:	4239      	tst	r1, r7
 8000cf6:	d000      	beq.n	8000cfa <__aeabi_dadd+0x246>
 8000cf8:	e0d0      	b.n	8000e9c <__aeabi_dadd+0x3e8>
 8000cfa:	0031      	movs	r1, r6
 8000cfc:	4648      	mov	r0, r9
 8000cfe:	001f      	movs	r7, r3
 8000d00:	4301      	orrs	r1, r0
 8000d02:	4317      	orrs	r7, r2
 8000d04:	2c00      	cmp	r4, #0
 8000d06:	d000      	beq.n	8000d0a <__aeabi_dadd+0x256>
 8000d08:	e13d      	b.n	8000f86 <__aeabi_dadd+0x4d2>
 8000d0a:	2900      	cmp	r1, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_dadd+0x25c>
 8000d0e:	e1bc      	b.n	800108a <__aeabi_dadd+0x5d6>
 8000d10:	2f00      	cmp	r7, #0
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x262>
 8000d14:	e1bf      	b.n	8001096 <__aeabi_dadd+0x5e2>
 8000d16:	464b      	mov	r3, r9
 8000d18:	2100      	movs	r1, #0
 8000d1a:	08d8      	lsrs	r0, r3, #3
 8000d1c:	0777      	lsls	r7, r6, #29
 8000d1e:	4307      	orrs	r7, r0
 8000d20:	08f0      	lsrs	r0, r6, #3
 8000d22:	0306      	lsls	r6, r0, #12
 8000d24:	054c      	lsls	r4, r1, #21
 8000d26:	0b36      	lsrs	r6, r6, #12
 8000d28:	0d64      	lsrs	r4, r4, #21
 8000d2a:	e00c      	b.n	8000d46 <__aeabi_dadd+0x292>
 8000d2c:	4f44      	ldr	r7, [pc, #272]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000d2e:	42bc      	cmp	r4, r7
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x280>
 8000d32:	e08b      	b.n	8000e4c <__aeabi_dadd+0x398>
 8000d34:	2701      	movs	r7, #1
 8000d36:	2938      	cmp	r1, #56	@ 0x38
 8000d38:	dcb2      	bgt.n	8000ca0 <__aeabi_dadd+0x1ec>
 8000d3a:	2780      	movs	r7, #128	@ 0x80
 8000d3c:	043f      	lsls	r7, r7, #16
 8000d3e:	433b      	orrs	r3, r7
 8000d40:	e79c      	b.n	8000c7c <__aeabi_dadd+0x1c8>
 8000d42:	2600      	movs	r6, #0
 8000d44:	2700      	movs	r7, #0
 8000d46:	0524      	lsls	r4, r4, #20
 8000d48:	4334      	orrs	r4, r6
 8000d4a:	07ed      	lsls	r5, r5, #31
 8000d4c:	432c      	orrs	r4, r5
 8000d4e:	0038      	movs	r0, r7
 8000d50:	0021      	movs	r1, r4
 8000d52:	b002      	add	sp, #8
 8000d54:	bce0      	pop	{r5, r6, r7}
 8000d56:	46ba      	mov	sl, r7
 8000d58:	46b1      	mov	r9, r6
 8000d5a:	46a8      	mov	r8, r5
 8000d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5e:	077b      	lsls	r3, r7, #29
 8000d60:	d004      	beq.n	8000d6c <__aeabi_dadd+0x2b8>
 8000d62:	230f      	movs	r3, #15
 8000d64:	403b      	ands	r3, r7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dadd+0x2b8>
 8000d6a:	e728      	b.n	8000bbe <__aeabi_dadd+0x10a>
 8000d6c:	08f8      	lsrs	r0, r7, #3
 8000d6e:	4b34      	ldr	r3, [pc, #208]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000d70:	0777      	lsls	r7, r6, #29
 8000d72:	4307      	orrs	r7, r0
 8000d74:	08f0      	lsrs	r0, r6, #3
 8000d76:	429c      	cmp	r4, r3
 8000d78:	d000      	beq.n	8000d7c <__aeabi_dadd+0x2c8>
 8000d7a:	e24a      	b.n	8001212 <__aeabi_dadd+0x75e>
 8000d7c:	003b      	movs	r3, r7
 8000d7e:	4303      	orrs	r3, r0
 8000d80:	d059      	beq.n	8000e36 <__aeabi_dadd+0x382>
 8000d82:	2680      	movs	r6, #128	@ 0x80
 8000d84:	0336      	lsls	r6, r6, #12
 8000d86:	4306      	orrs	r6, r0
 8000d88:	0336      	lsls	r6, r6, #12
 8000d8a:	4c2d      	ldr	r4, [pc, #180]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000d8c:	0b36      	lsrs	r6, r6, #12
 8000d8e:	e7da      	b.n	8000d46 <__aeabi_dadd+0x292>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	d061      	beq.n	8000e58 <__aeabi_dadd+0x3a4>
 8000d94:	4641      	mov	r1, r8
 8000d96:	1b09      	subs	r1, r1, r4
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_dadd+0x2ea>
 8000d9c:	e0b9      	b.n	8000f12 <__aeabi_dadd+0x45e>
 8000d9e:	4c28      	ldr	r4, [pc, #160]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x2f2>
 8000da4:	e1a5      	b.n	80010f2 <__aeabi_dadd+0x63e>
 8000da6:	2701      	movs	r7, #1
 8000da8:	2938      	cmp	r1, #56	@ 0x38
 8000daa:	dc13      	bgt.n	8000dd4 <__aeabi_dadd+0x320>
 8000dac:	2480      	movs	r4, #128	@ 0x80
 8000dae:	0424      	lsls	r4, r4, #16
 8000db0:	4326      	orrs	r6, r4
 8000db2:	291f      	cmp	r1, #31
 8000db4:	dd00      	ble.n	8000db8 <__aeabi_dadd+0x304>
 8000db6:	e1c8      	b.n	800114a <__aeabi_dadd+0x696>
 8000db8:	2420      	movs	r4, #32
 8000dba:	0037      	movs	r7, r6
 8000dbc:	4648      	mov	r0, r9
 8000dbe:	1a64      	subs	r4, r4, r1
 8000dc0:	40a7      	lsls	r7, r4
 8000dc2:	40c8      	lsrs	r0, r1
 8000dc4:	4307      	orrs	r7, r0
 8000dc6:	4648      	mov	r0, r9
 8000dc8:	40a0      	lsls	r0, r4
 8000dca:	40ce      	lsrs	r6, r1
 8000dcc:	1e44      	subs	r4, r0, #1
 8000dce:	41a0      	sbcs	r0, r4
 8000dd0:	199b      	adds	r3, r3, r6
 8000dd2:	4307      	orrs	r7, r0
 8000dd4:	18bf      	adds	r7, r7, r2
 8000dd6:	4297      	cmp	r7, r2
 8000dd8:	4192      	sbcs	r2, r2
 8000dda:	4252      	negs	r2, r2
 8000ddc:	4644      	mov	r4, r8
 8000dde:	18d6      	adds	r6, r2, r3
 8000de0:	e763      	b.n	8000caa <__aeabi_dadd+0x1f6>
 8000de2:	0038      	movs	r0, r7
 8000de4:	f001 fed0 	bl	8002b88 <__clzsi2>
 8000de8:	0003      	movs	r3, r0
 8000dea:	3318      	adds	r3, #24
 8000dec:	2b1f      	cmp	r3, #31
 8000dee:	dc00      	bgt.n	8000df2 <__aeabi_dadd+0x33e>
 8000df0:	e6bf      	b.n	8000b72 <__aeabi_dadd+0xbe>
 8000df2:	003a      	movs	r2, r7
 8000df4:	3808      	subs	r0, #8
 8000df6:	4082      	lsls	r2, r0
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	dd00      	ble.n	8000dfe <__aeabi_dadd+0x34a>
 8000dfc:	e083      	b.n	8000f06 <__aeabi_dadd+0x452>
 8000dfe:	1b1b      	subs	r3, r3, r4
 8000e00:	1c58      	adds	r0, r3, #1
 8000e02:	281f      	cmp	r0, #31
 8000e04:	dc00      	bgt.n	8000e08 <__aeabi_dadd+0x354>
 8000e06:	e1b4      	b.n	8001172 <__aeabi_dadd+0x6be>
 8000e08:	0017      	movs	r7, r2
 8000e0a:	3b1f      	subs	r3, #31
 8000e0c:	40df      	lsrs	r7, r3
 8000e0e:	2820      	cmp	r0, #32
 8000e10:	d005      	beq.n	8000e1e <__aeabi_dadd+0x36a>
 8000e12:	2340      	movs	r3, #64	@ 0x40
 8000e14:	1a1b      	subs	r3, r3, r0
 8000e16:	409a      	lsls	r2, r3
 8000e18:	1e53      	subs	r3, r2, #1
 8000e1a:	419a      	sbcs	r2, r3
 8000e1c:	4317      	orrs	r7, r2
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2f00      	cmp	r7, #0
 8000e22:	d00a      	beq.n	8000e3a <__aeabi_dadd+0x386>
 8000e24:	077b      	lsls	r3, r7, #29
 8000e26:	d000      	beq.n	8000e2a <__aeabi_dadd+0x376>
 8000e28:	e6c4      	b.n	8000bb4 <__aeabi_dadd+0x100>
 8000e2a:	0026      	movs	r6, r4
 8000e2c:	e79e      	b.n	8000d6c <__aeabi_dadd+0x2b8>
 8000e2e:	464b      	mov	r3, r9
 8000e30:	000c      	movs	r4, r1
 8000e32:	08d8      	lsrs	r0, r3, #3
 8000e34:	e79b      	b.n	8000d6e <__aeabi_dadd+0x2ba>
 8000e36:	2700      	movs	r7, #0
 8000e38:	4c01      	ldr	r4, [pc, #4]	@ (8000e40 <__aeabi_dadd+0x38c>)
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	e783      	b.n	8000d46 <__aeabi_dadd+0x292>
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	000007ff 	.word	0x000007ff
 8000e44:	ff7fffff 	.word	0xff7fffff
 8000e48:	000007fe 	.word	0x000007fe
 8000e4c:	464b      	mov	r3, r9
 8000e4e:	0777      	lsls	r7, r6, #29
 8000e50:	08d8      	lsrs	r0, r3, #3
 8000e52:	4307      	orrs	r7, r0
 8000e54:	08f0      	lsrs	r0, r6, #3
 8000e56:	e791      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 8000e58:	4fcd      	ldr	r7, [pc, #820]	@ (8001190 <__aeabi_dadd+0x6dc>)
 8000e5a:	1c61      	adds	r1, r4, #1
 8000e5c:	4239      	tst	r1, r7
 8000e5e:	d16b      	bne.n	8000f38 <__aeabi_dadd+0x484>
 8000e60:	0031      	movs	r1, r6
 8000e62:	4648      	mov	r0, r9
 8000e64:	4301      	orrs	r1, r0
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d000      	beq.n	8000e6c <__aeabi_dadd+0x3b8>
 8000e6a:	e14b      	b.n	8001104 <__aeabi_dadd+0x650>
 8000e6c:	001f      	movs	r7, r3
 8000e6e:	4317      	orrs	r7, r2
 8000e70:	2900      	cmp	r1, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_dadd+0x3c2>
 8000e74:	e181      	b.n	800117a <__aeabi_dadd+0x6c6>
 8000e76:	2f00      	cmp	r7, #0
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dadd+0x3c8>
 8000e7a:	e74c      	b.n	8000d16 <__aeabi_dadd+0x262>
 8000e7c:	444a      	add	r2, r9
 8000e7e:	454a      	cmp	r2, r9
 8000e80:	4180      	sbcs	r0, r0
 8000e82:	18f6      	adds	r6, r6, r3
 8000e84:	4240      	negs	r0, r0
 8000e86:	1836      	adds	r6, r6, r0
 8000e88:	0233      	lsls	r3, r6, #8
 8000e8a:	d500      	bpl.n	8000e8e <__aeabi_dadd+0x3da>
 8000e8c:	e1b0      	b.n	80011f0 <__aeabi_dadd+0x73c>
 8000e8e:	0017      	movs	r7, r2
 8000e90:	4691      	mov	r9, r2
 8000e92:	4337      	orrs	r7, r6
 8000e94:	d000      	beq.n	8000e98 <__aeabi_dadd+0x3e4>
 8000e96:	e73e      	b.n	8000d16 <__aeabi_dadd+0x262>
 8000e98:	2600      	movs	r6, #0
 8000e9a:	e754      	b.n	8000d46 <__aeabi_dadd+0x292>
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	1a89      	subs	r1, r1, r2
 8000ea0:	4688      	mov	r8, r1
 8000ea2:	45c1      	cmp	r9, r8
 8000ea4:	41bf      	sbcs	r7, r7
 8000ea6:	1af1      	subs	r1, r6, r3
 8000ea8:	427f      	negs	r7, r7
 8000eaa:	1bc9      	subs	r1, r1, r7
 8000eac:	020f      	lsls	r7, r1, #8
 8000eae:	d461      	bmi.n	8000f74 <__aeabi_dadd+0x4c0>
 8000eb0:	4647      	mov	r7, r8
 8000eb2:	430f      	orrs	r7, r1
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dadd+0x404>
 8000eb6:	e0bd      	b.n	8001034 <__aeabi_dadd+0x580>
 8000eb8:	000e      	movs	r6, r1
 8000eba:	4647      	mov	r7, r8
 8000ebc:	e651      	b.n	8000b62 <__aeabi_dadd+0xae>
 8000ebe:	4cb5      	ldr	r4, [pc, #724]	@ (8001194 <__aeabi_dadd+0x6e0>)
 8000ec0:	45a0      	cmp	r8, r4
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_dadd+0x412>
 8000ec4:	e100      	b.n	80010c8 <__aeabi_dadd+0x614>
 8000ec6:	2701      	movs	r7, #1
 8000ec8:	2938      	cmp	r1, #56	@ 0x38
 8000eca:	dd00      	ble.n	8000ece <__aeabi_dadd+0x41a>
 8000ecc:	e6b8      	b.n	8000c40 <__aeabi_dadd+0x18c>
 8000ece:	2480      	movs	r4, #128	@ 0x80
 8000ed0:	0424      	lsls	r4, r4, #16
 8000ed2:	4326      	orrs	r6, r4
 8000ed4:	e6a3      	b.n	8000c1e <__aeabi_dadd+0x16a>
 8000ed6:	4eb0      	ldr	r6, [pc, #704]	@ (8001198 <__aeabi_dadd+0x6e4>)
 8000ed8:	1ae4      	subs	r4, r4, r3
 8000eda:	4016      	ands	r6, r2
 8000edc:	077b      	lsls	r3, r7, #29
 8000ede:	d000      	beq.n	8000ee2 <__aeabi_dadd+0x42e>
 8000ee0:	e73f      	b.n	8000d62 <__aeabi_dadd+0x2ae>
 8000ee2:	e743      	b.n	8000d6c <__aeabi_dadd+0x2b8>
 8000ee4:	000f      	movs	r7, r1
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	3f20      	subs	r7, #32
 8000eea:	40f8      	lsrs	r0, r7
 8000eec:	4684      	mov	ip, r0
 8000eee:	2920      	cmp	r1, #32
 8000ef0:	d003      	beq.n	8000efa <__aeabi_dadd+0x446>
 8000ef2:	2740      	movs	r7, #64	@ 0x40
 8000ef4:	1a79      	subs	r1, r7, r1
 8000ef6:	408b      	lsls	r3, r1
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	1e53      	subs	r3, r2, #1
 8000efc:	419a      	sbcs	r2, r3
 8000efe:	4663      	mov	r3, ip
 8000f00:	0017      	movs	r7, r2
 8000f02:	431f      	orrs	r7, r3
 8000f04:	e622      	b.n	8000b4c <__aeabi_dadd+0x98>
 8000f06:	48a4      	ldr	r0, [pc, #656]	@ (8001198 <__aeabi_dadd+0x6e4>)
 8000f08:	1ae1      	subs	r1, r4, r3
 8000f0a:	4010      	ands	r0, r2
 8000f0c:	0747      	lsls	r7, r0, #29
 8000f0e:	08c0      	lsrs	r0, r0, #3
 8000f10:	e707      	b.n	8000d22 <__aeabi_dadd+0x26e>
 8000f12:	0034      	movs	r4, r6
 8000f14:	4648      	mov	r0, r9
 8000f16:	4304      	orrs	r4, r0
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dadd+0x468>
 8000f1a:	e0fa      	b.n	8001112 <__aeabi_dadd+0x65e>
 8000f1c:	1e4c      	subs	r4, r1, #1
 8000f1e:	2901      	cmp	r1, #1
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dadd+0x470>
 8000f22:	e0d7      	b.n	80010d4 <__aeabi_dadd+0x620>
 8000f24:	4f9b      	ldr	r7, [pc, #620]	@ (8001194 <__aeabi_dadd+0x6e0>)
 8000f26:	42b9      	cmp	r1, r7
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dadd+0x478>
 8000f2a:	e0e2      	b.n	80010f2 <__aeabi_dadd+0x63e>
 8000f2c:	2701      	movs	r7, #1
 8000f2e:	2c38      	cmp	r4, #56	@ 0x38
 8000f30:	dd00      	ble.n	8000f34 <__aeabi_dadd+0x480>
 8000f32:	e74f      	b.n	8000dd4 <__aeabi_dadd+0x320>
 8000f34:	0021      	movs	r1, r4
 8000f36:	e73c      	b.n	8000db2 <__aeabi_dadd+0x2fe>
 8000f38:	4c96      	ldr	r4, [pc, #600]	@ (8001194 <__aeabi_dadd+0x6e0>)
 8000f3a:	42a1      	cmp	r1, r4
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dadd+0x48c>
 8000f3e:	e0dd      	b.n	80010fc <__aeabi_dadd+0x648>
 8000f40:	444a      	add	r2, r9
 8000f42:	454a      	cmp	r2, r9
 8000f44:	4180      	sbcs	r0, r0
 8000f46:	18f3      	adds	r3, r6, r3
 8000f48:	4240      	negs	r0, r0
 8000f4a:	1818      	adds	r0, r3, r0
 8000f4c:	07c7      	lsls	r7, r0, #31
 8000f4e:	0852      	lsrs	r2, r2, #1
 8000f50:	4317      	orrs	r7, r2
 8000f52:	0846      	lsrs	r6, r0, #1
 8000f54:	0752      	lsls	r2, r2, #29
 8000f56:	d005      	beq.n	8000f64 <__aeabi_dadd+0x4b0>
 8000f58:	220f      	movs	r2, #15
 8000f5a:	000c      	movs	r4, r1
 8000f5c:	403a      	ands	r2, r7
 8000f5e:	2a04      	cmp	r2, #4
 8000f60:	d000      	beq.n	8000f64 <__aeabi_dadd+0x4b0>
 8000f62:	e62c      	b.n	8000bbe <__aeabi_dadd+0x10a>
 8000f64:	0776      	lsls	r6, r6, #29
 8000f66:	08ff      	lsrs	r7, r7, #3
 8000f68:	4337      	orrs	r7, r6
 8000f6a:	0900      	lsrs	r0, r0, #4
 8000f6c:	e6d9      	b.n	8000d22 <__aeabi_dadd+0x26e>
 8000f6e:	2700      	movs	r7, #0
 8000f70:	2600      	movs	r6, #0
 8000f72:	e6e8      	b.n	8000d46 <__aeabi_dadd+0x292>
 8000f74:	4649      	mov	r1, r9
 8000f76:	1a57      	subs	r7, r2, r1
 8000f78:	42ba      	cmp	r2, r7
 8000f7a:	4192      	sbcs	r2, r2
 8000f7c:	1b9e      	subs	r6, r3, r6
 8000f7e:	4252      	negs	r2, r2
 8000f80:	4665      	mov	r5, ip
 8000f82:	1ab6      	subs	r6, r6, r2
 8000f84:	e5ed      	b.n	8000b62 <__aeabi_dadd+0xae>
 8000f86:	2900      	cmp	r1, #0
 8000f88:	d000      	beq.n	8000f8c <__aeabi_dadd+0x4d8>
 8000f8a:	e0c6      	b.n	800111a <__aeabi_dadd+0x666>
 8000f8c:	2f00      	cmp	r7, #0
 8000f8e:	d167      	bne.n	8001060 <__aeabi_dadd+0x5ac>
 8000f90:	2680      	movs	r6, #128	@ 0x80
 8000f92:	2500      	movs	r5, #0
 8000f94:	4c7f      	ldr	r4, [pc, #508]	@ (8001194 <__aeabi_dadd+0x6e0>)
 8000f96:	0336      	lsls	r6, r6, #12
 8000f98:	e6d5      	b.n	8000d46 <__aeabi_dadd+0x292>
 8000f9a:	4665      	mov	r5, ip
 8000f9c:	000c      	movs	r4, r1
 8000f9e:	001e      	movs	r6, r3
 8000fa0:	08d0      	lsrs	r0, r2, #3
 8000fa2:	e6e4      	b.n	8000d6e <__aeabi_dadd+0x2ba>
 8000fa4:	444a      	add	r2, r9
 8000fa6:	454a      	cmp	r2, r9
 8000fa8:	4180      	sbcs	r0, r0
 8000faa:	18f3      	adds	r3, r6, r3
 8000fac:	4240      	negs	r0, r0
 8000fae:	1818      	adds	r0, r3, r0
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0203      	lsls	r3, r0, #8
 8000fb4:	d400      	bmi.n	8000fb8 <__aeabi_dadd+0x504>
 8000fb6:	e096      	b.n	80010e6 <__aeabi_dadd+0x632>
 8000fb8:	4b77      	ldr	r3, [pc, #476]	@ (8001198 <__aeabi_dadd+0x6e4>)
 8000fba:	0849      	lsrs	r1, r1, #1
 8000fbc:	4018      	ands	r0, r3
 8000fbe:	07c3      	lsls	r3, r0, #31
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	0844      	lsrs	r4, r0, #1
 8000fc4:	0749      	lsls	r1, r1, #29
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dadd+0x516>
 8000fc8:	e129      	b.n	800121e <__aeabi_dadd+0x76a>
 8000fca:	220f      	movs	r2, #15
 8000fcc:	401a      	ands	r2, r3
 8000fce:	2a04      	cmp	r2, #4
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_dadd+0x520>
 8000fd2:	e0ea      	b.n	80011aa <__aeabi_dadd+0x6f6>
 8000fd4:	1d1f      	adds	r7, r3, #4
 8000fd6:	429f      	cmp	r7, r3
 8000fd8:	41b6      	sbcs	r6, r6
 8000fda:	4276      	negs	r6, r6
 8000fdc:	1936      	adds	r6, r6, r4
 8000fde:	2402      	movs	r4, #2
 8000fe0:	e6c4      	b.n	8000d6c <__aeabi_dadd+0x2b8>
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	1a8f      	subs	r7, r1, r2
 8000fe6:	45b9      	cmp	r9, r7
 8000fe8:	4180      	sbcs	r0, r0
 8000fea:	1af6      	subs	r6, r6, r3
 8000fec:	4240      	negs	r0, r0
 8000fee:	1a36      	subs	r6, r6, r0
 8000ff0:	0233      	lsls	r3, r6, #8
 8000ff2:	d406      	bmi.n	8001002 <__aeabi_dadd+0x54e>
 8000ff4:	0773      	lsls	r3, r6, #29
 8000ff6:	08ff      	lsrs	r7, r7, #3
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	431f      	orrs	r7, r3
 8000ffc:	08f0      	lsrs	r0, r6, #3
 8000ffe:	e690      	b.n	8000d22 <__aeabi_dadd+0x26e>
 8001000:	4665      	mov	r5, ip
 8001002:	2401      	movs	r4, #1
 8001004:	e5ab      	b.n	8000b5e <__aeabi_dadd+0xaa>
 8001006:	464b      	mov	r3, r9
 8001008:	0777      	lsls	r7, r6, #29
 800100a:	08d8      	lsrs	r0, r3, #3
 800100c:	4307      	orrs	r7, r0
 800100e:	08f0      	lsrs	r0, r6, #3
 8001010:	e6b4      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 8001012:	000f      	movs	r7, r1
 8001014:	0018      	movs	r0, r3
 8001016:	3f20      	subs	r7, #32
 8001018:	40f8      	lsrs	r0, r7
 800101a:	4684      	mov	ip, r0
 800101c:	2920      	cmp	r1, #32
 800101e:	d003      	beq.n	8001028 <__aeabi_dadd+0x574>
 8001020:	2740      	movs	r7, #64	@ 0x40
 8001022:	1a79      	subs	r1, r7, r1
 8001024:	408b      	lsls	r3, r1
 8001026:	431a      	orrs	r2, r3
 8001028:	1e53      	subs	r3, r2, #1
 800102a:	419a      	sbcs	r2, r3
 800102c:	4663      	mov	r3, ip
 800102e:	0017      	movs	r7, r2
 8001030:	431f      	orrs	r7, r3
 8001032:	e635      	b.n	8000ca0 <__aeabi_dadd+0x1ec>
 8001034:	2500      	movs	r5, #0
 8001036:	2400      	movs	r4, #0
 8001038:	2600      	movs	r6, #0
 800103a:	e684      	b.n	8000d46 <__aeabi_dadd+0x292>
 800103c:	000c      	movs	r4, r1
 800103e:	0035      	movs	r5, r6
 8001040:	3c20      	subs	r4, #32
 8001042:	40e5      	lsrs	r5, r4
 8001044:	2920      	cmp	r1, #32
 8001046:	d005      	beq.n	8001054 <__aeabi_dadd+0x5a0>
 8001048:	2440      	movs	r4, #64	@ 0x40
 800104a:	1a61      	subs	r1, r4, r1
 800104c:	408e      	lsls	r6, r1
 800104e:	4649      	mov	r1, r9
 8001050:	4331      	orrs	r1, r6
 8001052:	4689      	mov	r9, r1
 8001054:	4648      	mov	r0, r9
 8001056:	1e41      	subs	r1, r0, #1
 8001058:	4188      	sbcs	r0, r1
 800105a:	0007      	movs	r7, r0
 800105c:	432f      	orrs	r7, r5
 800105e:	e5ef      	b.n	8000c40 <__aeabi_dadd+0x18c>
 8001060:	08d2      	lsrs	r2, r2, #3
 8001062:	075f      	lsls	r7, r3, #29
 8001064:	4665      	mov	r5, ip
 8001066:	4317      	orrs	r7, r2
 8001068:	08d8      	lsrs	r0, r3, #3
 800106a:	e687      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 800106c:	1a17      	subs	r7, r2, r0
 800106e:	42ba      	cmp	r2, r7
 8001070:	4192      	sbcs	r2, r2
 8001072:	1b9e      	subs	r6, r3, r6
 8001074:	4252      	negs	r2, r2
 8001076:	1ab6      	subs	r6, r6, r2
 8001078:	0233      	lsls	r3, r6, #8
 800107a:	d4c1      	bmi.n	8001000 <__aeabi_dadd+0x54c>
 800107c:	0773      	lsls	r3, r6, #29
 800107e:	08ff      	lsrs	r7, r7, #3
 8001080:	4665      	mov	r5, ip
 8001082:	2101      	movs	r1, #1
 8001084:	431f      	orrs	r7, r3
 8001086:	08f0      	lsrs	r0, r6, #3
 8001088:	e64b      	b.n	8000d22 <__aeabi_dadd+0x26e>
 800108a:	2f00      	cmp	r7, #0
 800108c:	d07b      	beq.n	8001186 <__aeabi_dadd+0x6d2>
 800108e:	4665      	mov	r5, ip
 8001090:	001e      	movs	r6, r3
 8001092:	4691      	mov	r9, r2
 8001094:	e63f      	b.n	8000d16 <__aeabi_dadd+0x262>
 8001096:	1a81      	subs	r1, r0, r2
 8001098:	4688      	mov	r8, r1
 800109a:	45c1      	cmp	r9, r8
 800109c:	41a4      	sbcs	r4, r4
 800109e:	1af1      	subs	r1, r6, r3
 80010a0:	4264      	negs	r4, r4
 80010a2:	1b09      	subs	r1, r1, r4
 80010a4:	2480      	movs	r4, #128	@ 0x80
 80010a6:	0424      	lsls	r4, r4, #16
 80010a8:	4221      	tst	r1, r4
 80010aa:	d077      	beq.n	800119c <__aeabi_dadd+0x6e8>
 80010ac:	1a10      	subs	r0, r2, r0
 80010ae:	4282      	cmp	r2, r0
 80010b0:	4192      	sbcs	r2, r2
 80010b2:	0007      	movs	r7, r0
 80010b4:	1b9e      	subs	r6, r3, r6
 80010b6:	4252      	negs	r2, r2
 80010b8:	1ab6      	subs	r6, r6, r2
 80010ba:	4337      	orrs	r7, r6
 80010bc:	d000      	beq.n	80010c0 <__aeabi_dadd+0x60c>
 80010be:	e0a0      	b.n	8001202 <__aeabi_dadd+0x74e>
 80010c0:	4665      	mov	r5, ip
 80010c2:	2400      	movs	r4, #0
 80010c4:	2600      	movs	r6, #0
 80010c6:	e63e      	b.n	8000d46 <__aeabi_dadd+0x292>
 80010c8:	075f      	lsls	r7, r3, #29
 80010ca:	08d2      	lsrs	r2, r2, #3
 80010cc:	4665      	mov	r5, ip
 80010ce:	4317      	orrs	r7, r2
 80010d0:	08d8      	lsrs	r0, r3, #3
 80010d2:	e653      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 80010d4:	1881      	adds	r1, r0, r2
 80010d6:	4291      	cmp	r1, r2
 80010d8:	4192      	sbcs	r2, r2
 80010da:	18f0      	adds	r0, r6, r3
 80010dc:	4252      	negs	r2, r2
 80010de:	1880      	adds	r0, r0, r2
 80010e0:	0203      	lsls	r3, r0, #8
 80010e2:	d500      	bpl.n	80010e6 <__aeabi_dadd+0x632>
 80010e4:	e768      	b.n	8000fb8 <__aeabi_dadd+0x504>
 80010e6:	0747      	lsls	r7, r0, #29
 80010e8:	08c9      	lsrs	r1, r1, #3
 80010ea:	430f      	orrs	r7, r1
 80010ec:	08c0      	lsrs	r0, r0, #3
 80010ee:	2101      	movs	r1, #1
 80010f0:	e617      	b.n	8000d22 <__aeabi_dadd+0x26e>
 80010f2:	08d2      	lsrs	r2, r2, #3
 80010f4:	075f      	lsls	r7, r3, #29
 80010f6:	4317      	orrs	r7, r2
 80010f8:	08d8      	lsrs	r0, r3, #3
 80010fa:	e63f      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 80010fc:	000c      	movs	r4, r1
 80010fe:	2600      	movs	r6, #0
 8001100:	2700      	movs	r7, #0
 8001102:	e620      	b.n	8000d46 <__aeabi_dadd+0x292>
 8001104:	2900      	cmp	r1, #0
 8001106:	d156      	bne.n	80011b6 <__aeabi_dadd+0x702>
 8001108:	075f      	lsls	r7, r3, #29
 800110a:	08d2      	lsrs	r2, r2, #3
 800110c:	4317      	orrs	r7, r2
 800110e:	08d8      	lsrs	r0, r3, #3
 8001110:	e634      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 8001112:	000c      	movs	r4, r1
 8001114:	001e      	movs	r6, r3
 8001116:	08d0      	lsrs	r0, r2, #3
 8001118:	e629      	b.n	8000d6e <__aeabi_dadd+0x2ba>
 800111a:	08c1      	lsrs	r1, r0, #3
 800111c:	0770      	lsls	r0, r6, #29
 800111e:	4301      	orrs	r1, r0
 8001120:	08f0      	lsrs	r0, r6, #3
 8001122:	2f00      	cmp	r7, #0
 8001124:	d062      	beq.n	80011ec <__aeabi_dadd+0x738>
 8001126:	2480      	movs	r4, #128	@ 0x80
 8001128:	0324      	lsls	r4, r4, #12
 800112a:	4220      	tst	r0, r4
 800112c:	d007      	beq.n	800113e <__aeabi_dadd+0x68a>
 800112e:	08de      	lsrs	r6, r3, #3
 8001130:	4226      	tst	r6, r4
 8001132:	d104      	bne.n	800113e <__aeabi_dadd+0x68a>
 8001134:	4665      	mov	r5, ip
 8001136:	0030      	movs	r0, r6
 8001138:	08d1      	lsrs	r1, r2, #3
 800113a:	075b      	lsls	r3, r3, #29
 800113c:	4319      	orrs	r1, r3
 800113e:	0f4f      	lsrs	r7, r1, #29
 8001140:	00c9      	lsls	r1, r1, #3
 8001142:	08c9      	lsrs	r1, r1, #3
 8001144:	077f      	lsls	r7, r7, #29
 8001146:	430f      	orrs	r7, r1
 8001148:	e618      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 800114a:	000c      	movs	r4, r1
 800114c:	0030      	movs	r0, r6
 800114e:	3c20      	subs	r4, #32
 8001150:	40e0      	lsrs	r0, r4
 8001152:	4684      	mov	ip, r0
 8001154:	2920      	cmp	r1, #32
 8001156:	d005      	beq.n	8001164 <__aeabi_dadd+0x6b0>
 8001158:	2440      	movs	r4, #64	@ 0x40
 800115a:	1a61      	subs	r1, r4, r1
 800115c:	408e      	lsls	r6, r1
 800115e:	4649      	mov	r1, r9
 8001160:	4331      	orrs	r1, r6
 8001162:	4689      	mov	r9, r1
 8001164:	4648      	mov	r0, r9
 8001166:	1e41      	subs	r1, r0, #1
 8001168:	4188      	sbcs	r0, r1
 800116a:	4661      	mov	r1, ip
 800116c:	0007      	movs	r7, r0
 800116e:	430f      	orrs	r7, r1
 8001170:	e630      	b.n	8000dd4 <__aeabi_dadd+0x320>
 8001172:	2120      	movs	r1, #32
 8001174:	2700      	movs	r7, #0
 8001176:	1a09      	subs	r1, r1, r0
 8001178:	e50e      	b.n	8000b98 <__aeabi_dadd+0xe4>
 800117a:	001e      	movs	r6, r3
 800117c:	2f00      	cmp	r7, #0
 800117e:	d000      	beq.n	8001182 <__aeabi_dadd+0x6ce>
 8001180:	e522      	b.n	8000bc8 <__aeabi_dadd+0x114>
 8001182:	2400      	movs	r4, #0
 8001184:	e758      	b.n	8001038 <__aeabi_dadd+0x584>
 8001186:	2500      	movs	r5, #0
 8001188:	2400      	movs	r4, #0
 800118a:	2600      	movs	r6, #0
 800118c:	e5db      	b.n	8000d46 <__aeabi_dadd+0x292>
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	000007fe 	.word	0x000007fe
 8001194:	000007ff 	.word	0x000007ff
 8001198:	ff7fffff 	.word	0xff7fffff
 800119c:	4647      	mov	r7, r8
 800119e:	430f      	orrs	r7, r1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dadd+0x6f0>
 80011a2:	e747      	b.n	8001034 <__aeabi_dadd+0x580>
 80011a4:	000e      	movs	r6, r1
 80011a6:	46c1      	mov	r9, r8
 80011a8:	e5b5      	b.n	8000d16 <__aeabi_dadd+0x262>
 80011aa:	08df      	lsrs	r7, r3, #3
 80011ac:	0764      	lsls	r4, r4, #29
 80011ae:	2102      	movs	r1, #2
 80011b0:	4327      	orrs	r7, r4
 80011b2:	0900      	lsrs	r0, r0, #4
 80011b4:	e5b5      	b.n	8000d22 <__aeabi_dadd+0x26e>
 80011b6:	0019      	movs	r1, r3
 80011b8:	08c0      	lsrs	r0, r0, #3
 80011ba:	0777      	lsls	r7, r6, #29
 80011bc:	4307      	orrs	r7, r0
 80011be:	4311      	orrs	r1, r2
 80011c0:	08f0      	lsrs	r0, r6, #3
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_dadd+0x714>
 80011c6:	e5d9      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 80011c8:	2180      	movs	r1, #128	@ 0x80
 80011ca:	0309      	lsls	r1, r1, #12
 80011cc:	4208      	tst	r0, r1
 80011ce:	d007      	beq.n	80011e0 <__aeabi_dadd+0x72c>
 80011d0:	08dc      	lsrs	r4, r3, #3
 80011d2:	420c      	tst	r4, r1
 80011d4:	d104      	bne.n	80011e0 <__aeabi_dadd+0x72c>
 80011d6:	08d2      	lsrs	r2, r2, #3
 80011d8:	075b      	lsls	r3, r3, #29
 80011da:	431a      	orrs	r2, r3
 80011dc:	0017      	movs	r7, r2
 80011de:	0020      	movs	r0, r4
 80011e0:	0f7b      	lsrs	r3, r7, #29
 80011e2:	00ff      	lsls	r7, r7, #3
 80011e4:	08ff      	lsrs	r7, r7, #3
 80011e6:	075b      	lsls	r3, r3, #29
 80011e8:	431f      	orrs	r7, r3
 80011ea:	e5c7      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 80011ec:	000f      	movs	r7, r1
 80011ee:	e5c5      	b.n	8000d7c <__aeabi_dadd+0x2c8>
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <__aeabi_dadd+0x788>)
 80011f2:	08d2      	lsrs	r2, r2, #3
 80011f4:	4033      	ands	r3, r6
 80011f6:	075f      	lsls	r7, r3, #29
 80011f8:	025b      	lsls	r3, r3, #9
 80011fa:	2401      	movs	r4, #1
 80011fc:	4317      	orrs	r7, r2
 80011fe:	0b1e      	lsrs	r6, r3, #12
 8001200:	e5a1      	b.n	8000d46 <__aeabi_dadd+0x292>
 8001202:	4226      	tst	r6, r4
 8001204:	d012      	beq.n	800122c <__aeabi_dadd+0x778>
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <__aeabi_dadd+0x788>)
 8001208:	4665      	mov	r5, ip
 800120a:	0002      	movs	r2, r0
 800120c:	2401      	movs	r4, #1
 800120e:	401e      	ands	r6, r3
 8001210:	e4e6      	b.n	8000be0 <__aeabi_dadd+0x12c>
 8001212:	0021      	movs	r1, r4
 8001214:	e585      	b.n	8000d22 <__aeabi_dadd+0x26e>
 8001216:	0017      	movs	r7, r2
 8001218:	e5a8      	b.n	8000d6c <__aeabi_dadd+0x2b8>
 800121a:	003a      	movs	r2, r7
 800121c:	e4d4      	b.n	8000bc8 <__aeabi_dadd+0x114>
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	0764      	lsls	r4, r4, #29
 8001222:	431c      	orrs	r4, r3
 8001224:	0027      	movs	r7, r4
 8001226:	2102      	movs	r1, #2
 8001228:	0900      	lsrs	r0, r0, #4
 800122a:	e57a      	b.n	8000d22 <__aeabi_dadd+0x26e>
 800122c:	08c0      	lsrs	r0, r0, #3
 800122e:	0777      	lsls	r7, r6, #29
 8001230:	4307      	orrs	r7, r0
 8001232:	4665      	mov	r5, ip
 8001234:	2100      	movs	r1, #0
 8001236:	08f0      	lsrs	r0, r6, #3
 8001238:	e573      	b.n	8000d22 <__aeabi_dadd+0x26e>
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	ff7fffff 	.word	0xff7fffff

08001240 <__aeabi_ddiv>:
 8001240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001242:	46de      	mov	lr, fp
 8001244:	4645      	mov	r5, r8
 8001246:	4657      	mov	r7, sl
 8001248:	464e      	mov	r6, r9
 800124a:	b5e0      	push	{r5, r6, r7, lr}
 800124c:	b087      	sub	sp, #28
 800124e:	9200      	str	r2, [sp, #0]
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	030b      	lsls	r3, r1, #12
 8001254:	0b1b      	lsrs	r3, r3, #12
 8001256:	469b      	mov	fp, r3
 8001258:	0fca      	lsrs	r2, r1, #31
 800125a:	004b      	lsls	r3, r1, #1
 800125c:	0004      	movs	r4, r0
 800125e:	4680      	mov	r8, r0
 8001260:	0d5b      	lsrs	r3, r3, #21
 8001262:	9202      	str	r2, [sp, #8]
 8001264:	d100      	bne.n	8001268 <__aeabi_ddiv+0x28>
 8001266:	e098      	b.n	800139a <__aeabi_ddiv+0x15a>
 8001268:	4a7c      	ldr	r2, [pc, #496]	@ (800145c <__aeabi_ddiv+0x21c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d037      	beq.n	80012de <__aeabi_ddiv+0x9e>
 800126e:	4659      	mov	r1, fp
 8001270:	0f42      	lsrs	r2, r0, #29
 8001272:	00c9      	lsls	r1, r1, #3
 8001274:	430a      	orrs	r2, r1
 8001276:	2180      	movs	r1, #128	@ 0x80
 8001278:	0409      	lsls	r1, r1, #16
 800127a:	4311      	orrs	r1, r2
 800127c:	00c2      	lsls	r2, r0, #3
 800127e:	4690      	mov	r8, r2
 8001280:	4a77      	ldr	r2, [pc, #476]	@ (8001460 <__aeabi_ddiv+0x220>)
 8001282:	4689      	mov	r9, r1
 8001284:	4692      	mov	sl, r2
 8001286:	449a      	add	sl, r3
 8001288:	2300      	movs	r3, #0
 800128a:	2400      	movs	r4, #0
 800128c:	9303      	str	r3, [sp, #12]
 800128e:	9e00      	ldr	r6, [sp, #0]
 8001290:	9f01      	ldr	r7, [sp, #4]
 8001292:	033b      	lsls	r3, r7, #12
 8001294:	0b1b      	lsrs	r3, r3, #12
 8001296:	469b      	mov	fp, r3
 8001298:	007b      	lsls	r3, r7, #1
 800129a:	0030      	movs	r0, r6
 800129c:	0d5b      	lsrs	r3, r3, #21
 800129e:	0ffd      	lsrs	r5, r7, #31
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d059      	beq.n	8001358 <__aeabi_ddiv+0x118>
 80012a4:	4a6d      	ldr	r2, [pc, #436]	@ (800145c <__aeabi_ddiv+0x21c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d048      	beq.n	800133c <__aeabi_ddiv+0xfc>
 80012aa:	4659      	mov	r1, fp
 80012ac:	0f72      	lsrs	r2, r6, #29
 80012ae:	00c9      	lsls	r1, r1, #3
 80012b0:	430a      	orrs	r2, r1
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	0409      	lsls	r1, r1, #16
 80012b6:	4311      	orrs	r1, r2
 80012b8:	468b      	mov	fp, r1
 80012ba:	4969      	ldr	r1, [pc, #420]	@ (8001460 <__aeabi_ddiv+0x220>)
 80012bc:	00f2      	lsls	r2, r6, #3
 80012be:	468c      	mov	ip, r1
 80012c0:	4651      	mov	r1, sl
 80012c2:	4463      	add	r3, ip
 80012c4:	1acb      	subs	r3, r1, r3
 80012c6:	469a      	mov	sl, r3
 80012c8:	2100      	movs	r1, #0
 80012ca:	9e02      	ldr	r6, [sp, #8]
 80012cc:	406e      	eors	r6, r5
 80012ce:	b2f6      	uxtb	r6, r6
 80012d0:	2c0f      	cmp	r4, #15
 80012d2:	d900      	bls.n	80012d6 <__aeabi_ddiv+0x96>
 80012d4:	e0ce      	b.n	8001474 <__aeabi_ddiv+0x234>
 80012d6:	4b63      	ldr	r3, [pc, #396]	@ (8001464 <__aeabi_ddiv+0x224>)
 80012d8:	00a4      	lsls	r4, r4, #2
 80012da:	591b      	ldr	r3, [r3, r4]
 80012dc:	469f      	mov	pc, r3
 80012de:	465a      	mov	r2, fp
 80012e0:	4302      	orrs	r2, r0
 80012e2:	4691      	mov	r9, r2
 80012e4:	d000      	beq.n	80012e8 <__aeabi_ddiv+0xa8>
 80012e6:	e090      	b.n	800140a <__aeabi_ddiv+0x1ca>
 80012e8:	469a      	mov	sl, r3
 80012ea:	2302      	movs	r3, #2
 80012ec:	4690      	mov	r8, r2
 80012ee:	2408      	movs	r4, #8
 80012f0:	9303      	str	r3, [sp, #12]
 80012f2:	e7cc      	b.n	800128e <__aeabi_ddiv+0x4e>
 80012f4:	46cb      	mov	fp, r9
 80012f6:	4642      	mov	r2, r8
 80012f8:	9d02      	ldr	r5, [sp, #8]
 80012fa:	9903      	ldr	r1, [sp, #12]
 80012fc:	2902      	cmp	r1, #2
 80012fe:	d100      	bne.n	8001302 <__aeabi_ddiv+0xc2>
 8001300:	e1de      	b.n	80016c0 <__aeabi_ddiv+0x480>
 8001302:	2903      	cmp	r1, #3
 8001304:	d100      	bne.n	8001308 <__aeabi_ddiv+0xc8>
 8001306:	e08d      	b.n	8001424 <__aeabi_ddiv+0x1e4>
 8001308:	2901      	cmp	r1, #1
 800130a:	d000      	beq.n	800130e <__aeabi_ddiv+0xce>
 800130c:	e179      	b.n	8001602 <__aeabi_ddiv+0x3c2>
 800130e:	002e      	movs	r6, r5
 8001310:	2200      	movs	r2, #0
 8001312:	2300      	movs	r3, #0
 8001314:	2400      	movs	r4, #0
 8001316:	4690      	mov	r8, r2
 8001318:	051b      	lsls	r3, r3, #20
 800131a:	4323      	orrs	r3, r4
 800131c:	07f6      	lsls	r6, r6, #31
 800131e:	4333      	orrs	r3, r6
 8001320:	4640      	mov	r0, r8
 8001322:	0019      	movs	r1, r3
 8001324:	b007      	add	sp, #28
 8001326:	bcf0      	pop	{r4, r5, r6, r7}
 8001328:	46bb      	mov	fp, r7
 800132a:	46b2      	mov	sl, r6
 800132c:	46a9      	mov	r9, r5
 800132e:	46a0      	mov	r8, r4
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001332:	2200      	movs	r2, #0
 8001334:	2400      	movs	r4, #0
 8001336:	4690      	mov	r8, r2
 8001338:	4b48      	ldr	r3, [pc, #288]	@ (800145c <__aeabi_ddiv+0x21c>)
 800133a:	e7ed      	b.n	8001318 <__aeabi_ddiv+0xd8>
 800133c:	465a      	mov	r2, fp
 800133e:	9b00      	ldr	r3, [sp, #0]
 8001340:	431a      	orrs	r2, r3
 8001342:	4b49      	ldr	r3, [pc, #292]	@ (8001468 <__aeabi_ddiv+0x228>)
 8001344:	469c      	mov	ip, r3
 8001346:	44e2      	add	sl, ip
 8001348:	2a00      	cmp	r2, #0
 800134a:	d159      	bne.n	8001400 <__aeabi_ddiv+0x1c0>
 800134c:	2302      	movs	r3, #2
 800134e:	431c      	orrs	r4, r3
 8001350:	2300      	movs	r3, #0
 8001352:	2102      	movs	r1, #2
 8001354:	469b      	mov	fp, r3
 8001356:	e7b8      	b.n	80012ca <__aeabi_ddiv+0x8a>
 8001358:	465a      	mov	r2, fp
 800135a:	9b00      	ldr	r3, [sp, #0]
 800135c:	431a      	orrs	r2, r3
 800135e:	d049      	beq.n	80013f4 <__aeabi_ddiv+0x1b4>
 8001360:	465b      	mov	r3, fp
 8001362:	2b00      	cmp	r3, #0
 8001364:	d100      	bne.n	8001368 <__aeabi_ddiv+0x128>
 8001366:	e19c      	b.n	80016a2 <__aeabi_ddiv+0x462>
 8001368:	4658      	mov	r0, fp
 800136a:	f001 fc0d 	bl	8002b88 <__clzsi2>
 800136e:	0002      	movs	r2, r0
 8001370:	0003      	movs	r3, r0
 8001372:	3a0b      	subs	r2, #11
 8001374:	271d      	movs	r7, #29
 8001376:	9e00      	ldr	r6, [sp, #0]
 8001378:	1aba      	subs	r2, r7, r2
 800137a:	0019      	movs	r1, r3
 800137c:	4658      	mov	r0, fp
 800137e:	40d6      	lsrs	r6, r2
 8001380:	3908      	subs	r1, #8
 8001382:	4088      	lsls	r0, r1
 8001384:	0032      	movs	r2, r6
 8001386:	4302      	orrs	r2, r0
 8001388:	4693      	mov	fp, r2
 800138a:	9a00      	ldr	r2, [sp, #0]
 800138c:	408a      	lsls	r2, r1
 800138e:	4937      	ldr	r1, [pc, #220]	@ (800146c <__aeabi_ddiv+0x22c>)
 8001390:	4453      	add	r3, sl
 8001392:	468a      	mov	sl, r1
 8001394:	2100      	movs	r1, #0
 8001396:	449a      	add	sl, r3
 8001398:	e797      	b.n	80012ca <__aeabi_ddiv+0x8a>
 800139a:	465b      	mov	r3, fp
 800139c:	4303      	orrs	r3, r0
 800139e:	4699      	mov	r9, r3
 80013a0:	d021      	beq.n	80013e6 <__aeabi_ddiv+0x1a6>
 80013a2:	465b      	mov	r3, fp
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d100      	bne.n	80013aa <__aeabi_ddiv+0x16a>
 80013a8:	e169      	b.n	800167e <__aeabi_ddiv+0x43e>
 80013aa:	4658      	mov	r0, fp
 80013ac:	f001 fbec 	bl	8002b88 <__clzsi2>
 80013b0:	230b      	movs	r3, #11
 80013b2:	425b      	negs	r3, r3
 80013b4:	469c      	mov	ip, r3
 80013b6:	0002      	movs	r2, r0
 80013b8:	4484      	add	ip, r0
 80013ba:	4666      	mov	r6, ip
 80013bc:	231d      	movs	r3, #29
 80013be:	1b9b      	subs	r3, r3, r6
 80013c0:	0026      	movs	r6, r4
 80013c2:	0011      	movs	r1, r2
 80013c4:	4658      	mov	r0, fp
 80013c6:	40de      	lsrs	r6, r3
 80013c8:	3908      	subs	r1, #8
 80013ca:	4088      	lsls	r0, r1
 80013cc:	0033      	movs	r3, r6
 80013ce:	4303      	orrs	r3, r0
 80013d0:	4699      	mov	r9, r3
 80013d2:	0023      	movs	r3, r4
 80013d4:	408b      	lsls	r3, r1
 80013d6:	4698      	mov	r8, r3
 80013d8:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <__aeabi_ddiv+0x230>)
 80013da:	2400      	movs	r4, #0
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	469a      	mov	sl, r3
 80013e0:	2300      	movs	r3, #0
 80013e2:	9303      	str	r3, [sp, #12]
 80013e4:	e753      	b.n	800128e <__aeabi_ddiv+0x4e>
 80013e6:	2300      	movs	r3, #0
 80013e8:	4698      	mov	r8, r3
 80013ea:	469a      	mov	sl, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	2404      	movs	r4, #4
 80013f0:	9303      	str	r3, [sp, #12]
 80013f2:	e74c      	b.n	800128e <__aeabi_ddiv+0x4e>
 80013f4:	2301      	movs	r3, #1
 80013f6:	431c      	orrs	r4, r3
 80013f8:	2300      	movs	r3, #0
 80013fa:	2101      	movs	r1, #1
 80013fc:	469b      	mov	fp, r3
 80013fe:	e764      	b.n	80012ca <__aeabi_ddiv+0x8a>
 8001400:	2303      	movs	r3, #3
 8001402:	0032      	movs	r2, r6
 8001404:	2103      	movs	r1, #3
 8001406:	431c      	orrs	r4, r3
 8001408:	e75f      	b.n	80012ca <__aeabi_ddiv+0x8a>
 800140a:	469a      	mov	sl, r3
 800140c:	2303      	movs	r3, #3
 800140e:	46d9      	mov	r9, fp
 8001410:	240c      	movs	r4, #12
 8001412:	9303      	str	r3, [sp, #12]
 8001414:	e73b      	b.n	800128e <__aeabi_ddiv+0x4e>
 8001416:	2300      	movs	r3, #0
 8001418:	2480      	movs	r4, #128	@ 0x80
 800141a:	4698      	mov	r8, r3
 800141c:	2600      	movs	r6, #0
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <__aeabi_ddiv+0x21c>)
 8001420:	0324      	lsls	r4, r4, #12
 8001422:	e779      	b.n	8001318 <__aeabi_ddiv+0xd8>
 8001424:	2480      	movs	r4, #128	@ 0x80
 8001426:	465b      	mov	r3, fp
 8001428:	0324      	lsls	r4, r4, #12
 800142a:	431c      	orrs	r4, r3
 800142c:	0324      	lsls	r4, r4, #12
 800142e:	002e      	movs	r6, r5
 8001430:	4690      	mov	r8, r2
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <__aeabi_ddiv+0x21c>)
 8001434:	0b24      	lsrs	r4, r4, #12
 8001436:	e76f      	b.n	8001318 <__aeabi_ddiv+0xd8>
 8001438:	2480      	movs	r4, #128	@ 0x80
 800143a:	464b      	mov	r3, r9
 800143c:	0324      	lsls	r4, r4, #12
 800143e:	4223      	tst	r3, r4
 8001440:	d002      	beq.n	8001448 <__aeabi_ddiv+0x208>
 8001442:	465b      	mov	r3, fp
 8001444:	4223      	tst	r3, r4
 8001446:	d0f0      	beq.n	800142a <__aeabi_ddiv+0x1ea>
 8001448:	2480      	movs	r4, #128	@ 0x80
 800144a:	464b      	mov	r3, r9
 800144c:	0324      	lsls	r4, r4, #12
 800144e:	431c      	orrs	r4, r3
 8001450:	0324      	lsls	r4, r4, #12
 8001452:	9e02      	ldr	r6, [sp, #8]
 8001454:	4b01      	ldr	r3, [pc, #4]	@ (800145c <__aeabi_ddiv+0x21c>)
 8001456:	0b24      	lsrs	r4, r4, #12
 8001458:	e75e      	b.n	8001318 <__aeabi_ddiv+0xd8>
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	000007ff 	.word	0x000007ff
 8001460:	fffffc01 	.word	0xfffffc01
 8001464:	080098a0 	.word	0x080098a0
 8001468:	fffff801 	.word	0xfffff801
 800146c:	000003f3 	.word	0x000003f3
 8001470:	fffffc0d 	.word	0xfffffc0d
 8001474:	45cb      	cmp	fp, r9
 8001476:	d200      	bcs.n	800147a <__aeabi_ddiv+0x23a>
 8001478:	e0f8      	b.n	800166c <__aeabi_ddiv+0x42c>
 800147a:	d100      	bne.n	800147e <__aeabi_ddiv+0x23e>
 800147c:	e0f3      	b.n	8001666 <__aeabi_ddiv+0x426>
 800147e:	2301      	movs	r3, #1
 8001480:	425b      	negs	r3, r3
 8001482:	469c      	mov	ip, r3
 8001484:	4644      	mov	r4, r8
 8001486:	4648      	mov	r0, r9
 8001488:	2500      	movs	r5, #0
 800148a:	44e2      	add	sl, ip
 800148c:	465b      	mov	r3, fp
 800148e:	0e17      	lsrs	r7, r2, #24
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	431f      	orrs	r7, r3
 8001494:	0c19      	lsrs	r1, r3, #16
 8001496:	043b      	lsls	r3, r7, #16
 8001498:	0212      	lsls	r2, r2, #8
 800149a:	9700      	str	r7, [sp, #0]
 800149c:	0c1f      	lsrs	r7, r3, #16
 800149e:	4691      	mov	r9, r2
 80014a0:	9102      	str	r1, [sp, #8]
 80014a2:	9703      	str	r7, [sp, #12]
 80014a4:	f7fe feb4 	bl	8000210 <__aeabi_uidivmod>
 80014a8:	0002      	movs	r2, r0
 80014aa:	437a      	muls	r2, r7
 80014ac:	040b      	lsls	r3, r1, #16
 80014ae:	0c21      	lsrs	r1, r4, #16
 80014b0:	4680      	mov	r8, r0
 80014b2:	4319      	orrs	r1, r3
 80014b4:	428a      	cmp	r2, r1
 80014b6:	d909      	bls.n	80014cc <__aeabi_ddiv+0x28c>
 80014b8:	9f00      	ldr	r7, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	46bc      	mov	ip, r7
 80014be:	425b      	negs	r3, r3
 80014c0:	4461      	add	r1, ip
 80014c2:	469c      	mov	ip, r3
 80014c4:	44e0      	add	r8, ip
 80014c6:	428f      	cmp	r7, r1
 80014c8:	d800      	bhi.n	80014cc <__aeabi_ddiv+0x28c>
 80014ca:	e15c      	b.n	8001786 <__aeabi_ddiv+0x546>
 80014cc:	1a88      	subs	r0, r1, r2
 80014ce:	9902      	ldr	r1, [sp, #8]
 80014d0:	f7fe fe9e 	bl	8000210 <__aeabi_uidivmod>
 80014d4:	9a03      	ldr	r2, [sp, #12]
 80014d6:	0424      	lsls	r4, r4, #16
 80014d8:	4342      	muls	r2, r0
 80014da:	0409      	lsls	r1, r1, #16
 80014dc:	0c24      	lsrs	r4, r4, #16
 80014de:	0003      	movs	r3, r0
 80014e0:	430c      	orrs	r4, r1
 80014e2:	42a2      	cmp	r2, r4
 80014e4:	d906      	bls.n	80014f4 <__aeabi_ddiv+0x2b4>
 80014e6:	9900      	ldr	r1, [sp, #0]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	468c      	mov	ip, r1
 80014ec:	4464      	add	r4, ip
 80014ee:	42a1      	cmp	r1, r4
 80014f0:	d800      	bhi.n	80014f4 <__aeabi_ddiv+0x2b4>
 80014f2:	e142      	b.n	800177a <__aeabi_ddiv+0x53a>
 80014f4:	1aa0      	subs	r0, r4, r2
 80014f6:	4642      	mov	r2, r8
 80014f8:	0412      	lsls	r2, r2, #16
 80014fa:	431a      	orrs	r2, r3
 80014fc:	4693      	mov	fp, r2
 80014fe:	464b      	mov	r3, r9
 8001500:	4659      	mov	r1, fp
 8001502:	0c1b      	lsrs	r3, r3, #16
 8001504:	001f      	movs	r7, r3
 8001506:	9304      	str	r3, [sp, #16]
 8001508:	040b      	lsls	r3, r1, #16
 800150a:	4649      	mov	r1, r9
 800150c:	0409      	lsls	r1, r1, #16
 800150e:	0c09      	lsrs	r1, r1, #16
 8001510:	000c      	movs	r4, r1
 8001512:	0c1b      	lsrs	r3, r3, #16
 8001514:	435c      	muls	r4, r3
 8001516:	0c12      	lsrs	r2, r2, #16
 8001518:	437b      	muls	r3, r7
 800151a:	4688      	mov	r8, r1
 800151c:	4351      	muls	r1, r2
 800151e:	437a      	muls	r2, r7
 8001520:	0c27      	lsrs	r7, r4, #16
 8001522:	46bc      	mov	ip, r7
 8001524:	185b      	adds	r3, r3, r1
 8001526:	4463      	add	r3, ip
 8001528:	4299      	cmp	r1, r3
 800152a:	d903      	bls.n	8001534 <__aeabi_ddiv+0x2f4>
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	0249      	lsls	r1, r1, #9
 8001530:	468c      	mov	ip, r1
 8001532:	4462      	add	r2, ip
 8001534:	0c19      	lsrs	r1, r3, #16
 8001536:	0424      	lsls	r4, r4, #16
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	0c24      	lsrs	r4, r4, #16
 800153c:	188a      	adds	r2, r1, r2
 800153e:	191c      	adds	r4, r3, r4
 8001540:	4290      	cmp	r0, r2
 8001542:	d302      	bcc.n	800154a <__aeabi_ddiv+0x30a>
 8001544:	d116      	bne.n	8001574 <__aeabi_ddiv+0x334>
 8001546:	42a5      	cmp	r5, r4
 8001548:	d214      	bcs.n	8001574 <__aeabi_ddiv+0x334>
 800154a:	465b      	mov	r3, fp
 800154c:	9f00      	ldr	r7, [sp, #0]
 800154e:	3b01      	subs	r3, #1
 8001550:	444d      	add	r5, r9
 8001552:	9305      	str	r3, [sp, #20]
 8001554:	454d      	cmp	r5, r9
 8001556:	419b      	sbcs	r3, r3
 8001558:	46bc      	mov	ip, r7
 800155a:	425b      	negs	r3, r3
 800155c:	4463      	add	r3, ip
 800155e:	18c0      	adds	r0, r0, r3
 8001560:	4287      	cmp	r7, r0
 8001562:	d300      	bcc.n	8001566 <__aeabi_ddiv+0x326>
 8001564:	e102      	b.n	800176c <__aeabi_ddiv+0x52c>
 8001566:	4282      	cmp	r2, r0
 8001568:	d900      	bls.n	800156c <__aeabi_ddiv+0x32c>
 800156a:	e129      	b.n	80017c0 <__aeabi_ddiv+0x580>
 800156c:	d100      	bne.n	8001570 <__aeabi_ddiv+0x330>
 800156e:	e124      	b.n	80017ba <__aeabi_ddiv+0x57a>
 8001570:	9b05      	ldr	r3, [sp, #20]
 8001572:	469b      	mov	fp, r3
 8001574:	1b2c      	subs	r4, r5, r4
 8001576:	42a5      	cmp	r5, r4
 8001578:	41ad      	sbcs	r5, r5
 800157a:	9b00      	ldr	r3, [sp, #0]
 800157c:	1a80      	subs	r0, r0, r2
 800157e:	426d      	negs	r5, r5
 8001580:	1b40      	subs	r0, r0, r5
 8001582:	4283      	cmp	r3, r0
 8001584:	d100      	bne.n	8001588 <__aeabi_ddiv+0x348>
 8001586:	e10f      	b.n	80017a8 <__aeabi_ddiv+0x568>
 8001588:	9902      	ldr	r1, [sp, #8]
 800158a:	f7fe fe41 	bl	8000210 <__aeabi_uidivmod>
 800158e:	9a03      	ldr	r2, [sp, #12]
 8001590:	040b      	lsls	r3, r1, #16
 8001592:	4342      	muls	r2, r0
 8001594:	0c21      	lsrs	r1, r4, #16
 8001596:	0005      	movs	r5, r0
 8001598:	4319      	orrs	r1, r3
 800159a:	428a      	cmp	r2, r1
 800159c:	d900      	bls.n	80015a0 <__aeabi_ddiv+0x360>
 800159e:	e0cb      	b.n	8001738 <__aeabi_ddiv+0x4f8>
 80015a0:	1a88      	subs	r0, r1, r2
 80015a2:	9902      	ldr	r1, [sp, #8]
 80015a4:	f7fe fe34 	bl	8000210 <__aeabi_uidivmod>
 80015a8:	9a03      	ldr	r2, [sp, #12]
 80015aa:	0424      	lsls	r4, r4, #16
 80015ac:	4342      	muls	r2, r0
 80015ae:	0409      	lsls	r1, r1, #16
 80015b0:	0c24      	lsrs	r4, r4, #16
 80015b2:	0003      	movs	r3, r0
 80015b4:	430c      	orrs	r4, r1
 80015b6:	42a2      	cmp	r2, r4
 80015b8:	d900      	bls.n	80015bc <__aeabi_ddiv+0x37c>
 80015ba:	e0ca      	b.n	8001752 <__aeabi_ddiv+0x512>
 80015bc:	4641      	mov	r1, r8
 80015be:	1aa4      	subs	r4, r4, r2
 80015c0:	042a      	lsls	r2, r5, #16
 80015c2:	431a      	orrs	r2, r3
 80015c4:	9f04      	ldr	r7, [sp, #16]
 80015c6:	0413      	lsls	r3, r2, #16
 80015c8:	0c1b      	lsrs	r3, r3, #16
 80015ca:	4359      	muls	r1, r3
 80015cc:	4640      	mov	r0, r8
 80015ce:	437b      	muls	r3, r7
 80015d0:	469c      	mov	ip, r3
 80015d2:	0c15      	lsrs	r5, r2, #16
 80015d4:	4368      	muls	r0, r5
 80015d6:	0c0b      	lsrs	r3, r1, #16
 80015d8:	4484      	add	ip, r0
 80015da:	4463      	add	r3, ip
 80015dc:	437d      	muls	r5, r7
 80015de:	4298      	cmp	r0, r3
 80015e0:	d903      	bls.n	80015ea <__aeabi_ddiv+0x3aa>
 80015e2:	2080      	movs	r0, #128	@ 0x80
 80015e4:	0240      	lsls	r0, r0, #9
 80015e6:	4684      	mov	ip, r0
 80015e8:	4465      	add	r5, ip
 80015ea:	0c18      	lsrs	r0, r3, #16
 80015ec:	0409      	lsls	r1, r1, #16
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	0c09      	lsrs	r1, r1, #16
 80015f2:	1940      	adds	r0, r0, r5
 80015f4:	185b      	adds	r3, r3, r1
 80015f6:	4284      	cmp	r4, r0
 80015f8:	d327      	bcc.n	800164a <__aeabi_ddiv+0x40a>
 80015fa:	d023      	beq.n	8001644 <__aeabi_ddiv+0x404>
 80015fc:	2301      	movs	r3, #1
 80015fe:	0035      	movs	r5, r6
 8001600:	431a      	orrs	r2, r3
 8001602:	4b94      	ldr	r3, [pc, #592]	@ (8001854 <__aeabi_ddiv+0x614>)
 8001604:	4453      	add	r3, sl
 8001606:	2b00      	cmp	r3, #0
 8001608:	dd60      	ble.n	80016cc <__aeabi_ddiv+0x48c>
 800160a:	0751      	lsls	r1, r2, #29
 800160c:	d000      	beq.n	8001610 <__aeabi_ddiv+0x3d0>
 800160e:	e086      	b.n	800171e <__aeabi_ddiv+0x4de>
 8001610:	002e      	movs	r6, r5
 8001612:	08d1      	lsrs	r1, r2, #3
 8001614:	465a      	mov	r2, fp
 8001616:	01d2      	lsls	r2, r2, #7
 8001618:	d506      	bpl.n	8001628 <__aeabi_ddiv+0x3e8>
 800161a:	465a      	mov	r2, fp
 800161c:	4b8e      	ldr	r3, [pc, #568]	@ (8001858 <__aeabi_ddiv+0x618>)
 800161e:	401a      	ands	r2, r3
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	4693      	mov	fp, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4453      	add	r3, sl
 8001628:	4a8c      	ldr	r2, [pc, #560]	@ (800185c <__aeabi_ddiv+0x61c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	dd00      	ble.n	8001630 <__aeabi_ddiv+0x3f0>
 800162e:	e680      	b.n	8001332 <__aeabi_ddiv+0xf2>
 8001630:	465a      	mov	r2, fp
 8001632:	0752      	lsls	r2, r2, #29
 8001634:	430a      	orrs	r2, r1
 8001636:	4690      	mov	r8, r2
 8001638:	465a      	mov	r2, fp
 800163a:	055b      	lsls	r3, r3, #21
 800163c:	0254      	lsls	r4, r2, #9
 800163e:	0b24      	lsrs	r4, r4, #12
 8001640:	0d5b      	lsrs	r3, r3, #21
 8001642:	e669      	b.n	8001318 <__aeabi_ddiv+0xd8>
 8001644:	0035      	movs	r5, r6
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0db      	beq.n	8001602 <__aeabi_ddiv+0x3c2>
 800164a:	9d00      	ldr	r5, [sp, #0]
 800164c:	1e51      	subs	r1, r2, #1
 800164e:	46ac      	mov	ip, r5
 8001650:	4464      	add	r4, ip
 8001652:	42ac      	cmp	r4, r5
 8001654:	d200      	bcs.n	8001658 <__aeabi_ddiv+0x418>
 8001656:	e09e      	b.n	8001796 <__aeabi_ddiv+0x556>
 8001658:	4284      	cmp	r4, r0
 800165a:	d200      	bcs.n	800165e <__aeabi_ddiv+0x41e>
 800165c:	e0e1      	b.n	8001822 <__aeabi_ddiv+0x5e2>
 800165e:	d100      	bne.n	8001662 <__aeabi_ddiv+0x422>
 8001660:	e0ee      	b.n	8001840 <__aeabi_ddiv+0x600>
 8001662:	000a      	movs	r2, r1
 8001664:	e7ca      	b.n	80015fc <__aeabi_ddiv+0x3bc>
 8001666:	4542      	cmp	r2, r8
 8001668:	d900      	bls.n	800166c <__aeabi_ddiv+0x42c>
 800166a:	e708      	b.n	800147e <__aeabi_ddiv+0x23e>
 800166c:	464b      	mov	r3, r9
 800166e:	07dc      	lsls	r4, r3, #31
 8001670:	0858      	lsrs	r0, r3, #1
 8001672:	4643      	mov	r3, r8
 8001674:	085b      	lsrs	r3, r3, #1
 8001676:	431c      	orrs	r4, r3
 8001678:	4643      	mov	r3, r8
 800167a:	07dd      	lsls	r5, r3, #31
 800167c:	e706      	b.n	800148c <__aeabi_ddiv+0x24c>
 800167e:	f001 fa83 	bl	8002b88 <__clzsi2>
 8001682:	2315      	movs	r3, #21
 8001684:	469c      	mov	ip, r3
 8001686:	4484      	add	ip, r0
 8001688:	0002      	movs	r2, r0
 800168a:	4663      	mov	r3, ip
 800168c:	3220      	adds	r2, #32
 800168e:	2b1c      	cmp	r3, #28
 8001690:	dc00      	bgt.n	8001694 <__aeabi_ddiv+0x454>
 8001692:	e692      	b.n	80013ba <__aeabi_ddiv+0x17a>
 8001694:	0023      	movs	r3, r4
 8001696:	3808      	subs	r0, #8
 8001698:	4083      	lsls	r3, r0
 800169a:	4699      	mov	r9, r3
 800169c:	2300      	movs	r3, #0
 800169e:	4698      	mov	r8, r3
 80016a0:	e69a      	b.n	80013d8 <__aeabi_ddiv+0x198>
 80016a2:	f001 fa71 	bl	8002b88 <__clzsi2>
 80016a6:	0002      	movs	r2, r0
 80016a8:	0003      	movs	r3, r0
 80016aa:	3215      	adds	r2, #21
 80016ac:	3320      	adds	r3, #32
 80016ae:	2a1c      	cmp	r2, #28
 80016b0:	dc00      	bgt.n	80016b4 <__aeabi_ddiv+0x474>
 80016b2:	e65f      	b.n	8001374 <__aeabi_ddiv+0x134>
 80016b4:	9900      	ldr	r1, [sp, #0]
 80016b6:	3808      	subs	r0, #8
 80016b8:	4081      	lsls	r1, r0
 80016ba:	2200      	movs	r2, #0
 80016bc:	468b      	mov	fp, r1
 80016be:	e666      	b.n	800138e <__aeabi_ddiv+0x14e>
 80016c0:	2200      	movs	r2, #0
 80016c2:	002e      	movs	r6, r5
 80016c4:	2400      	movs	r4, #0
 80016c6:	4690      	mov	r8, r2
 80016c8:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <__aeabi_ddiv+0x620>)
 80016ca:	e625      	b.n	8001318 <__aeabi_ddiv+0xd8>
 80016cc:	002e      	movs	r6, r5
 80016ce:	2101      	movs	r1, #1
 80016d0:	1ac9      	subs	r1, r1, r3
 80016d2:	2938      	cmp	r1, #56	@ 0x38
 80016d4:	dd00      	ble.n	80016d8 <__aeabi_ddiv+0x498>
 80016d6:	e61b      	b.n	8001310 <__aeabi_ddiv+0xd0>
 80016d8:	291f      	cmp	r1, #31
 80016da:	dc7e      	bgt.n	80017da <__aeabi_ddiv+0x59a>
 80016dc:	4861      	ldr	r0, [pc, #388]	@ (8001864 <__aeabi_ddiv+0x624>)
 80016de:	0014      	movs	r4, r2
 80016e0:	4450      	add	r0, sl
 80016e2:	465b      	mov	r3, fp
 80016e4:	4082      	lsls	r2, r0
 80016e6:	4083      	lsls	r3, r0
 80016e8:	40cc      	lsrs	r4, r1
 80016ea:	1e50      	subs	r0, r2, #1
 80016ec:	4182      	sbcs	r2, r0
 80016ee:	4323      	orrs	r3, r4
 80016f0:	431a      	orrs	r2, r3
 80016f2:	465b      	mov	r3, fp
 80016f4:	40cb      	lsrs	r3, r1
 80016f6:	0751      	lsls	r1, r2, #29
 80016f8:	d009      	beq.n	800170e <__aeabi_ddiv+0x4ce>
 80016fa:	210f      	movs	r1, #15
 80016fc:	4011      	ands	r1, r2
 80016fe:	2904      	cmp	r1, #4
 8001700:	d005      	beq.n	800170e <__aeabi_ddiv+0x4ce>
 8001702:	1d11      	adds	r1, r2, #4
 8001704:	4291      	cmp	r1, r2
 8001706:	4192      	sbcs	r2, r2
 8001708:	4252      	negs	r2, r2
 800170a:	189b      	adds	r3, r3, r2
 800170c:	000a      	movs	r2, r1
 800170e:	0219      	lsls	r1, r3, #8
 8001710:	d400      	bmi.n	8001714 <__aeabi_ddiv+0x4d4>
 8001712:	e09b      	b.n	800184c <__aeabi_ddiv+0x60c>
 8001714:	2200      	movs	r2, #0
 8001716:	2301      	movs	r3, #1
 8001718:	2400      	movs	r4, #0
 800171a:	4690      	mov	r8, r2
 800171c:	e5fc      	b.n	8001318 <__aeabi_ddiv+0xd8>
 800171e:	210f      	movs	r1, #15
 8001720:	4011      	ands	r1, r2
 8001722:	2904      	cmp	r1, #4
 8001724:	d100      	bne.n	8001728 <__aeabi_ddiv+0x4e8>
 8001726:	e773      	b.n	8001610 <__aeabi_ddiv+0x3d0>
 8001728:	1d11      	adds	r1, r2, #4
 800172a:	4291      	cmp	r1, r2
 800172c:	4192      	sbcs	r2, r2
 800172e:	4252      	negs	r2, r2
 8001730:	002e      	movs	r6, r5
 8001732:	08c9      	lsrs	r1, r1, #3
 8001734:	4493      	add	fp, r2
 8001736:	e76d      	b.n	8001614 <__aeabi_ddiv+0x3d4>
 8001738:	9b00      	ldr	r3, [sp, #0]
 800173a:	3d01      	subs	r5, #1
 800173c:	469c      	mov	ip, r3
 800173e:	4461      	add	r1, ip
 8001740:	428b      	cmp	r3, r1
 8001742:	d900      	bls.n	8001746 <__aeabi_ddiv+0x506>
 8001744:	e72c      	b.n	80015a0 <__aeabi_ddiv+0x360>
 8001746:	428a      	cmp	r2, r1
 8001748:	d800      	bhi.n	800174c <__aeabi_ddiv+0x50c>
 800174a:	e729      	b.n	80015a0 <__aeabi_ddiv+0x360>
 800174c:	1e85      	subs	r5, r0, #2
 800174e:	4461      	add	r1, ip
 8001750:	e726      	b.n	80015a0 <__aeabi_ddiv+0x360>
 8001752:	9900      	ldr	r1, [sp, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	468c      	mov	ip, r1
 8001758:	4464      	add	r4, ip
 800175a:	42a1      	cmp	r1, r4
 800175c:	d900      	bls.n	8001760 <__aeabi_ddiv+0x520>
 800175e:	e72d      	b.n	80015bc <__aeabi_ddiv+0x37c>
 8001760:	42a2      	cmp	r2, r4
 8001762:	d800      	bhi.n	8001766 <__aeabi_ddiv+0x526>
 8001764:	e72a      	b.n	80015bc <__aeabi_ddiv+0x37c>
 8001766:	1e83      	subs	r3, r0, #2
 8001768:	4464      	add	r4, ip
 800176a:	e727      	b.n	80015bc <__aeabi_ddiv+0x37c>
 800176c:	4287      	cmp	r7, r0
 800176e:	d000      	beq.n	8001772 <__aeabi_ddiv+0x532>
 8001770:	e6fe      	b.n	8001570 <__aeabi_ddiv+0x330>
 8001772:	45a9      	cmp	r9, r5
 8001774:	d900      	bls.n	8001778 <__aeabi_ddiv+0x538>
 8001776:	e6fb      	b.n	8001570 <__aeabi_ddiv+0x330>
 8001778:	e6f5      	b.n	8001566 <__aeabi_ddiv+0x326>
 800177a:	42a2      	cmp	r2, r4
 800177c:	d800      	bhi.n	8001780 <__aeabi_ddiv+0x540>
 800177e:	e6b9      	b.n	80014f4 <__aeabi_ddiv+0x2b4>
 8001780:	1e83      	subs	r3, r0, #2
 8001782:	4464      	add	r4, ip
 8001784:	e6b6      	b.n	80014f4 <__aeabi_ddiv+0x2b4>
 8001786:	428a      	cmp	r2, r1
 8001788:	d800      	bhi.n	800178c <__aeabi_ddiv+0x54c>
 800178a:	e69f      	b.n	80014cc <__aeabi_ddiv+0x28c>
 800178c:	46bc      	mov	ip, r7
 800178e:	1e83      	subs	r3, r0, #2
 8001790:	4698      	mov	r8, r3
 8001792:	4461      	add	r1, ip
 8001794:	e69a      	b.n	80014cc <__aeabi_ddiv+0x28c>
 8001796:	000a      	movs	r2, r1
 8001798:	4284      	cmp	r4, r0
 800179a:	d000      	beq.n	800179e <__aeabi_ddiv+0x55e>
 800179c:	e72e      	b.n	80015fc <__aeabi_ddiv+0x3bc>
 800179e:	454b      	cmp	r3, r9
 80017a0:	d000      	beq.n	80017a4 <__aeabi_ddiv+0x564>
 80017a2:	e72b      	b.n	80015fc <__aeabi_ddiv+0x3bc>
 80017a4:	0035      	movs	r5, r6
 80017a6:	e72c      	b.n	8001602 <__aeabi_ddiv+0x3c2>
 80017a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <__aeabi_ddiv+0x614>)
 80017aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001868 <__aeabi_ddiv+0x628>)
 80017ac:	4453      	add	r3, sl
 80017ae:	4592      	cmp	sl, r2
 80017b0:	db43      	blt.n	800183a <__aeabi_ddiv+0x5fa>
 80017b2:	2201      	movs	r2, #1
 80017b4:	2100      	movs	r1, #0
 80017b6:	4493      	add	fp, r2
 80017b8:	e72c      	b.n	8001614 <__aeabi_ddiv+0x3d4>
 80017ba:	42ac      	cmp	r4, r5
 80017bc:	d800      	bhi.n	80017c0 <__aeabi_ddiv+0x580>
 80017be:	e6d7      	b.n	8001570 <__aeabi_ddiv+0x330>
 80017c0:	2302      	movs	r3, #2
 80017c2:	425b      	negs	r3, r3
 80017c4:	469c      	mov	ip, r3
 80017c6:	9900      	ldr	r1, [sp, #0]
 80017c8:	444d      	add	r5, r9
 80017ca:	454d      	cmp	r5, r9
 80017cc:	419b      	sbcs	r3, r3
 80017ce:	44e3      	add	fp, ip
 80017d0:	468c      	mov	ip, r1
 80017d2:	425b      	negs	r3, r3
 80017d4:	4463      	add	r3, ip
 80017d6:	18c0      	adds	r0, r0, r3
 80017d8:	e6cc      	b.n	8001574 <__aeabi_ddiv+0x334>
 80017da:	201f      	movs	r0, #31
 80017dc:	4240      	negs	r0, r0
 80017de:	1ac3      	subs	r3, r0, r3
 80017e0:	4658      	mov	r0, fp
 80017e2:	40d8      	lsrs	r0, r3
 80017e4:	2920      	cmp	r1, #32
 80017e6:	d004      	beq.n	80017f2 <__aeabi_ddiv+0x5b2>
 80017e8:	4659      	mov	r1, fp
 80017ea:	4b20      	ldr	r3, [pc, #128]	@ (800186c <__aeabi_ddiv+0x62c>)
 80017ec:	4453      	add	r3, sl
 80017ee:	4099      	lsls	r1, r3
 80017f0:	430a      	orrs	r2, r1
 80017f2:	1e53      	subs	r3, r2, #1
 80017f4:	419a      	sbcs	r2, r3
 80017f6:	2307      	movs	r3, #7
 80017f8:	0019      	movs	r1, r3
 80017fa:	4302      	orrs	r2, r0
 80017fc:	2400      	movs	r4, #0
 80017fe:	4011      	ands	r1, r2
 8001800:	4213      	tst	r3, r2
 8001802:	d009      	beq.n	8001818 <__aeabi_ddiv+0x5d8>
 8001804:	3308      	adds	r3, #8
 8001806:	4013      	ands	r3, r2
 8001808:	2b04      	cmp	r3, #4
 800180a:	d01d      	beq.n	8001848 <__aeabi_ddiv+0x608>
 800180c:	1d13      	adds	r3, r2, #4
 800180e:	4293      	cmp	r3, r2
 8001810:	4189      	sbcs	r1, r1
 8001812:	001a      	movs	r2, r3
 8001814:	4249      	negs	r1, r1
 8001816:	0749      	lsls	r1, r1, #29
 8001818:	08d2      	lsrs	r2, r2, #3
 800181a:	430a      	orrs	r2, r1
 800181c:	4690      	mov	r8, r2
 800181e:	2300      	movs	r3, #0
 8001820:	e57a      	b.n	8001318 <__aeabi_ddiv+0xd8>
 8001822:	4649      	mov	r1, r9
 8001824:	9f00      	ldr	r7, [sp, #0]
 8001826:	004d      	lsls	r5, r1, #1
 8001828:	454d      	cmp	r5, r9
 800182a:	4189      	sbcs	r1, r1
 800182c:	46bc      	mov	ip, r7
 800182e:	4249      	negs	r1, r1
 8001830:	4461      	add	r1, ip
 8001832:	46a9      	mov	r9, r5
 8001834:	3a02      	subs	r2, #2
 8001836:	1864      	adds	r4, r4, r1
 8001838:	e7ae      	b.n	8001798 <__aeabi_ddiv+0x558>
 800183a:	2201      	movs	r2, #1
 800183c:	4252      	negs	r2, r2
 800183e:	e746      	b.n	80016ce <__aeabi_ddiv+0x48e>
 8001840:	4599      	cmp	r9, r3
 8001842:	d3ee      	bcc.n	8001822 <__aeabi_ddiv+0x5e2>
 8001844:	000a      	movs	r2, r1
 8001846:	e7aa      	b.n	800179e <__aeabi_ddiv+0x55e>
 8001848:	2100      	movs	r1, #0
 800184a:	e7e5      	b.n	8001818 <__aeabi_ddiv+0x5d8>
 800184c:	0759      	lsls	r1, r3, #29
 800184e:	025b      	lsls	r3, r3, #9
 8001850:	0b1c      	lsrs	r4, r3, #12
 8001852:	e7e1      	b.n	8001818 <__aeabi_ddiv+0x5d8>
 8001854:	000003ff 	.word	0x000003ff
 8001858:	feffffff 	.word	0xfeffffff
 800185c:	000007fe 	.word	0x000007fe
 8001860:	000007ff 	.word	0x000007ff
 8001864:	0000041e 	.word	0x0000041e
 8001868:	fffffc02 	.word	0xfffffc02
 800186c:	0000043e 	.word	0x0000043e

08001870 <__eqdf2>:
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	4657      	mov	r7, sl
 8001874:	46de      	mov	lr, fp
 8001876:	464e      	mov	r6, r9
 8001878:	4645      	mov	r5, r8
 800187a:	b5e0      	push	{r5, r6, r7, lr}
 800187c:	000d      	movs	r5, r1
 800187e:	0004      	movs	r4, r0
 8001880:	0fe8      	lsrs	r0, r5, #31
 8001882:	4683      	mov	fp, r0
 8001884:	0309      	lsls	r1, r1, #12
 8001886:	0fd8      	lsrs	r0, r3, #31
 8001888:	0b09      	lsrs	r1, r1, #12
 800188a:	4682      	mov	sl, r0
 800188c:	4819      	ldr	r0, [pc, #100]	@ (80018f4 <__eqdf2+0x84>)
 800188e:	468c      	mov	ip, r1
 8001890:	031f      	lsls	r7, r3, #12
 8001892:	0069      	lsls	r1, r5, #1
 8001894:	005e      	lsls	r6, r3, #1
 8001896:	0d49      	lsrs	r1, r1, #21
 8001898:	0b3f      	lsrs	r7, r7, #12
 800189a:	0d76      	lsrs	r6, r6, #21
 800189c:	4281      	cmp	r1, r0
 800189e:	d018      	beq.n	80018d2 <__eqdf2+0x62>
 80018a0:	4286      	cmp	r6, r0
 80018a2:	d00f      	beq.n	80018c4 <__eqdf2+0x54>
 80018a4:	2001      	movs	r0, #1
 80018a6:	42b1      	cmp	r1, r6
 80018a8:	d10d      	bne.n	80018c6 <__eqdf2+0x56>
 80018aa:	45bc      	cmp	ip, r7
 80018ac:	d10b      	bne.n	80018c6 <__eqdf2+0x56>
 80018ae:	4294      	cmp	r4, r2
 80018b0:	d109      	bne.n	80018c6 <__eqdf2+0x56>
 80018b2:	45d3      	cmp	fp, sl
 80018b4:	d01c      	beq.n	80018f0 <__eqdf2+0x80>
 80018b6:	2900      	cmp	r1, #0
 80018b8:	d105      	bne.n	80018c6 <__eqdf2+0x56>
 80018ba:	4660      	mov	r0, ip
 80018bc:	4320      	orrs	r0, r4
 80018be:	1e43      	subs	r3, r0, #1
 80018c0:	4198      	sbcs	r0, r3
 80018c2:	e000      	b.n	80018c6 <__eqdf2+0x56>
 80018c4:	2001      	movs	r0, #1
 80018c6:	bcf0      	pop	{r4, r5, r6, r7}
 80018c8:	46bb      	mov	fp, r7
 80018ca:	46b2      	mov	sl, r6
 80018cc:	46a9      	mov	r9, r5
 80018ce:	46a0      	mov	r8, r4
 80018d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d2:	2001      	movs	r0, #1
 80018d4:	428e      	cmp	r6, r1
 80018d6:	d1f6      	bne.n	80018c6 <__eqdf2+0x56>
 80018d8:	4661      	mov	r1, ip
 80018da:	4339      	orrs	r1, r7
 80018dc:	000f      	movs	r7, r1
 80018de:	4317      	orrs	r7, r2
 80018e0:	4327      	orrs	r7, r4
 80018e2:	d1f0      	bne.n	80018c6 <__eqdf2+0x56>
 80018e4:	465b      	mov	r3, fp
 80018e6:	4652      	mov	r2, sl
 80018e8:	1a98      	subs	r0, r3, r2
 80018ea:	1e43      	subs	r3, r0, #1
 80018ec:	4198      	sbcs	r0, r3
 80018ee:	e7ea      	b.n	80018c6 <__eqdf2+0x56>
 80018f0:	2000      	movs	r0, #0
 80018f2:	e7e8      	b.n	80018c6 <__eqdf2+0x56>
 80018f4:	000007ff 	.word	0x000007ff

080018f8 <__gedf2>:
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	4657      	mov	r7, sl
 80018fc:	464e      	mov	r6, r9
 80018fe:	4645      	mov	r5, r8
 8001900:	46de      	mov	lr, fp
 8001902:	b5e0      	push	{r5, r6, r7, lr}
 8001904:	000d      	movs	r5, r1
 8001906:	030e      	lsls	r6, r1, #12
 8001908:	0049      	lsls	r1, r1, #1
 800190a:	0d49      	lsrs	r1, r1, #21
 800190c:	468a      	mov	sl, r1
 800190e:	0fdf      	lsrs	r7, r3, #31
 8001910:	0fe9      	lsrs	r1, r5, #31
 8001912:	46bc      	mov	ip, r7
 8001914:	b083      	sub	sp, #12
 8001916:	4f2f      	ldr	r7, [pc, #188]	@ (80019d4 <__gedf2+0xdc>)
 8001918:	0004      	movs	r4, r0
 800191a:	4680      	mov	r8, r0
 800191c:	9101      	str	r1, [sp, #4]
 800191e:	0058      	lsls	r0, r3, #1
 8001920:	0319      	lsls	r1, r3, #12
 8001922:	4691      	mov	r9, r2
 8001924:	0b36      	lsrs	r6, r6, #12
 8001926:	0b09      	lsrs	r1, r1, #12
 8001928:	0d40      	lsrs	r0, r0, #21
 800192a:	45ba      	cmp	sl, r7
 800192c:	d01d      	beq.n	800196a <__gedf2+0x72>
 800192e:	42b8      	cmp	r0, r7
 8001930:	d00d      	beq.n	800194e <__gedf2+0x56>
 8001932:	4657      	mov	r7, sl
 8001934:	2f00      	cmp	r7, #0
 8001936:	d12a      	bne.n	800198e <__gedf2+0x96>
 8001938:	4334      	orrs	r4, r6
 800193a:	2800      	cmp	r0, #0
 800193c:	d124      	bne.n	8001988 <__gedf2+0x90>
 800193e:	430a      	orrs	r2, r1
 8001940:	d036      	beq.n	80019b0 <__gedf2+0xb8>
 8001942:	2c00      	cmp	r4, #0
 8001944:	d141      	bne.n	80019ca <__gedf2+0xd2>
 8001946:	4663      	mov	r3, ip
 8001948:	0058      	lsls	r0, r3, #1
 800194a:	3801      	subs	r0, #1
 800194c:	e015      	b.n	800197a <__gedf2+0x82>
 800194e:	4311      	orrs	r1, r2
 8001950:	d138      	bne.n	80019c4 <__gedf2+0xcc>
 8001952:	4653      	mov	r3, sl
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <__gedf2+0x64>
 8001958:	4326      	orrs	r6, r4
 800195a:	d0f4      	beq.n	8001946 <__gedf2+0x4e>
 800195c:	9b01      	ldr	r3, [sp, #4]
 800195e:	4563      	cmp	r3, ip
 8001960:	d107      	bne.n	8001972 <__gedf2+0x7a>
 8001962:	9b01      	ldr	r3, [sp, #4]
 8001964:	0058      	lsls	r0, r3, #1
 8001966:	3801      	subs	r0, #1
 8001968:	e007      	b.n	800197a <__gedf2+0x82>
 800196a:	4326      	orrs	r6, r4
 800196c:	d12a      	bne.n	80019c4 <__gedf2+0xcc>
 800196e:	4550      	cmp	r0, sl
 8001970:	d021      	beq.n	80019b6 <__gedf2+0xbe>
 8001972:	2001      	movs	r0, #1
 8001974:	9b01      	ldr	r3, [sp, #4]
 8001976:	425f      	negs	r7, r3
 8001978:	4338      	orrs	r0, r7
 800197a:	b003      	add	sp, #12
 800197c:	bcf0      	pop	{r4, r5, r6, r7}
 800197e:	46bb      	mov	fp, r7
 8001980:	46b2      	mov	sl, r6
 8001982:	46a9      	mov	r9, r5
 8001984:	46a0      	mov	r8, r4
 8001986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001988:	2c00      	cmp	r4, #0
 800198a:	d0dc      	beq.n	8001946 <__gedf2+0x4e>
 800198c:	e7e6      	b.n	800195c <__gedf2+0x64>
 800198e:	2800      	cmp	r0, #0
 8001990:	d0ef      	beq.n	8001972 <__gedf2+0x7a>
 8001992:	9b01      	ldr	r3, [sp, #4]
 8001994:	4563      	cmp	r3, ip
 8001996:	d1ec      	bne.n	8001972 <__gedf2+0x7a>
 8001998:	4582      	cmp	sl, r0
 800199a:	dcea      	bgt.n	8001972 <__gedf2+0x7a>
 800199c:	dbe1      	blt.n	8001962 <__gedf2+0x6a>
 800199e:	428e      	cmp	r6, r1
 80019a0:	d8e7      	bhi.n	8001972 <__gedf2+0x7a>
 80019a2:	d1de      	bne.n	8001962 <__gedf2+0x6a>
 80019a4:	45c8      	cmp	r8, r9
 80019a6:	d8e4      	bhi.n	8001972 <__gedf2+0x7a>
 80019a8:	2000      	movs	r0, #0
 80019aa:	45c8      	cmp	r8, r9
 80019ac:	d2e5      	bcs.n	800197a <__gedf2+0x82>
 80019ae:	e7d8      	b.n	8001962 <__gedf2+0x6a>
 80019b0:	2c00      	cmp	r4, #0
 80019b2:	d0e2      	beq.n	800197a <__gedf2+0x82>
 80019b4:	e7dd      	b.n	8001972 <__gedf2+0x7a>
 80019b6:	4311      	orrs	r1, r2
 80019b8:	d104      	bne.n	80019c4 <__gedf2+0xcc>
 80019ba:	9b01      	ldr	r3, [sp, #4]
 80019bc:	4563      	cmp	r3, ip
 80019be:	d1d8      	bne.n	8001972 <__gedf2+0x7a>
 80019c0:	2000      	movs	r0, #0
 80019c2:	e7da      	b.n	800197a <__gedf2+0x82>
 80019c4:	2002      	movs	r0, #2
 80019c6:	4240      	negs	r0, r0
 80019c8:	e7d7      	b.n	800197a <__gedf2+0x82>
 80019ca:	9b01      	ldr	r3, [sp, #4]
 80019cc:	4563      	cmp	r3, ip
 80019ce:	d0e6      	beq.n	800199e <__gedf2+0xa6>
 80019d0:	e7cf      	b.n	8001972 <__gedf2+0x7a>
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	000007ff 	.word	0x000007ff

080019d8 <__ledf2>:
 80019d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019da:	4657      	mov	r7, sl
 80019dc:	464e      	mov	r6, r9
 80019de:	4645      	mov	r5, r8
 80019e0:	46de      	mov	lr, fp
 80019e2:	b5e0      	push	{r5, r6, r7, lr}
 80019e4:	000d      	movs	r5, r1
 80019e6:	030e      	lsls	r6, r1, #12
 80019e8:	0049      	lsls	r1, r1, #1
 80019ea:	0d49      	lsrs	r1, r1, #21
 80019ec:	468a      	mov	sl, r1
 80019ee:	0fdf      	lsrs	r7, r3, #31
 80019f0:	0fe9      	lsrs	r1, r5, #31
 80019f2:	46bc      	mov	ip, r7
 80019f4:	b083      	sub	sp, #12
 80019f6:	4f2e      	ldr	r7, [pc, #184]	@ (8001ab0 <__ledf2+0xd8>)
 80019f8:	0004      	movs	r4, r0
 80019fa:	4680      	mov	r8, r0
 80019fc:	9101      	str	r1, [sp, #4]
 80019fe:	0058      	lsls	r0, r3, #1
 8001a00:	0319      	lsls	r1, r3, #12
 8001a02:	4691      	mov	r9, r2
 8001a04:	0b36      	lsrs	r6, r6, #12
 8001a06:	0b09      	lsrs	r1, r1, #12
 8001a08:	0d40      	lsrs	r0, r0, #21
 8001a0a:	45ba      	cmp	sl, r7
 8001a0c:	d01e      	beq.n	8001a4c <__ledf2+0x74>
 8001a0e:	42b8      	cmp	r0, r7
 8001a10:	d00d      	beq.n	8001a2e <__ledf2+0x56>
 8001a12:	4657      	mov	r7, sl
 8001a14:	2f00      	cmp	r7, #0
 8001a16:	d127      	bne.n	8001a68 <__ledf2+0x90>
 8001a18:	4334      	orrs	r4, r6
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d133      	bne.n	8001a86 <__ledf2+0xae>
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	d034      	beq.n	8001a8c <__ledf2+0xb4>
 8001a22:	2c00      	cmp	r4, #0
 8001a24:	d140      	bne.n	8001aa8 <__ledf2+0xd0>
 8001a26:	4663      	mov	r3, ip
 8001a28:	0058      	lsls	r0, r3, #1
 8001a2a:	3801      	subs	r0, #1
 8001a2c:	e015      	b.n	8001a5a <__ledf2+0x82>
 8001a2e:	4311      	orrs	r1, r2
 8001a30:	d112      	bne.n	8001a58 <__ledf2+0x80>
 8001a32:	4653      	mov	r3, sl
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <__ledf2+0x64>
 8001a38:	4326      	orrs	r6, r4
 8001a3a:	d0f4      	beq.n	8001a26 <__ledf2+0x4e>
 8001a3c:	9b01      	ldr	r3, [sp, #4]
 8001a3e:	4563      	cmp	r3, ip
 8001a40:	d01d      	beq.n	8001a7e <__ledf2+0xa6>
 8001a42:	2001      	movs	r0, #1
 8001a44:	9b01      	ldr	r3, [sp, #4]
 8001a46:	425f      	negs	r7, r3
 8001a48:	4338      	orrs	r0, r7
 8001a4a:	e006      	b.n	8001a5a <__ledf2+0x82>
 8001a4c:	4326      	orrs	r6, r4
 8001a4e:	d103      	bne.n	8001a58 <__ledf2+0x80>
 8001a50:	4550      	cmp	r0, sl
 8001a52:	d1f6      	bne.n	8001a42 <__ledf2+0x6a>
 8001a54:	4311      	orrs	r1, r2
 8001a56:	d01c      	beq.n	8001a92 <__ledf2+0xba>
 8001a58:	2002      	movs	r0, #2
 8001a5a:	b003      	add	sp, #12
 8001a5c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a5e:	46bb      	mov	fp, r7
 8001a60:	46b2      	mov	sl, r6
 8001a62:	46a9      	mov	r9, r5
 8001a64:	46a0      	mov	r8, r4
 8001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d0ea      	beq.n	8001a42 <__ledf2+0x6a>
 8001a6c:	9b01      	ldr	r3, [sp, #4]
 8001a6e:	4563      	cmp	r3, ip
 8001a70:	d1e7      	bne.n	8001a42 <__ledf2+0x6a>
 8001a72:	4582      	cmp	sl, r0
 8001a74:	dce5      	bgt.n	8001a42 <__ledf2+0x6a>
 8001a76:	db02      	blt.n	8001a7e <__ledf2+0xa6>
 8001a78:	428e      	cmp	r6, r1
 8001a7a:	d8e2      	bhi.n	8001a42 <__ledf2+0x6a>
 8001a7c:	d00e      	beq.n	8001a9c <__ledf2+0xc4>
 8001a7e:	9b01      	ldr	r3, [sp, #4]
 8001a80:	0058      	lsls	r0, r3, #1
 8001a82:	3801      	subs	r0, #1
 8001a84:	e7e9      	b.n	8001a5a <__ledf2+0x82>
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	d0cd      	beq.n	8001a26 <__ledf2+0x4e>
 8001a8a:	e7d7      	b.n	8001a3c <__ledf2+0x64>
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	d0e4      	beq.n	8001a5a <__ledf2+0x82>
 8001a90:	e7d7      	b.n	8001a42 <__ledf2+0x6a>
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	2000      	movs	r0, #0
 8001a96:	4563      	cmp	r3, ip
 8001a98:	d0df      	beq.n	8001a5a <__ledf2+0x82>
 8001a9a:	e7d2      	b.n	8001a42 <__ledf2+0x6a>
 8001a9c:	45c8      	cmp	r8, r9
 8001a9e:	d8d0      	bhi.n	8001a42 <__ledf2+0x6a>
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	45c8      	cmp	r8, r9
 8001aa4:	d2d9      	bcs.n	8001a5a <__ledf2+0x82>
 8001aa6:	e7ea      	b.n	8001a7e <__ledf2+0xa6>
 8001aa8:	9b01      	ldr	r3, [sp, #4]
 8001aaa:	4563      	cmp	r3, ip
 8001aac:	d0e4      	beq.n	8001a78 <__ledf2+0xa0>
 8001aae:	e7c8      	b.n	8001a42 <__ledf2+0x6a>
 8001ab0:	000007ff 	.word	0x000007ff

08001ab4 <__aeabi_dmul>:
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	4657      	mov	r7, sl
 8001ab8:	464e      	mov	r6, r9
 8001aba:	46de      	mov	lr, fp
 8001abc:	4645      	mov	r5, r8
 8001abe:	b5e0      	push	{r5, r6, r7, lr}
 8001ac0:	001f      	movs	r7, r3
 8001ac2:	030b      	lsls	r3, r1, #12
 8001ac4:	0b1b      	lsrs	r3, r3, #12
 8001ac6:	0016      	movs	r6, r2
 8001ac8:	469a      	mov	sl, r3
 8001aca:	0fca      	lsrs	r2, r1, #31
 8001acc:	004b      	lsls	r3, r1, #1
 8001ace:	0004      	movs	r4, r0
 8001ad0:	4691      	mov	r9, r2
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	0d5b      	lsrs	r3, r3, #21
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dmul+0x26>
 8001ad8:	e1cf      	b.n	8001e7a <__aeabi_dmul+0x3c6>
 8001ada:	4acd      	ldr	r2, [pc, #820]	@ (8001e10 <__aeabi_dmul+0x35c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d055      	beq.n	8001b8c <__aeabi_dmul+0xd8>
 8001ae0:	4651      	mov	r1, sl
 8001ae2:	0f42      	lsrs	r2, r0, #29
 8001ae4:	00c9      	lsls	r1, r1, #3
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	2180      	movs	r1, #128	@ 0x80
 8001aea:	0409      	lsls	r1, r1, #16
 8001aec:	4311      	orrs	r1, r2
 8001aee:	00c2      	lsls	r2, r0, #3
 8001af0:	4690      	mov	r8, r2
 8001af2:	4ac8      	ldr	r2, [pc, #800]	@ (8001e14 <__aeabi_dmul+0x360>)
 8001af4:	468a      	mov	sl, r1
 8001af6:	4693      	mov	fp, r2
 8001af8:	449b      	add	fp, r3
 8001afa:	2300      	movs	r3, #0
 8001afc:	2500      	movs	r5, #0
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	033c      	lsls	r4, r7, #12
 8001b02:	007b      	lsls	r3, r7, #1
 8001b04:	0ffa      	lsrs	r2, r7, #31
 8001b06:	9601      	str	r6, [sp, #4]
 8001b08:	0b24      	lsrs	r4, r4, #12
 8001b0a:	0d5b      	lsrs	r3, r3, #21
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dmul+0x5e>
 8001b10:	e188      	b.n	8001e24 <__aeabi_dmul+0x370>
 8001b12:	4abf      	ldr	r2, [pc, #764]	@ (8001e10 <__aeabi_dmul+0x35c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dmul+0x66>
 8001b18:	e092      	b.n	8001c40 <__aeabi_dmul+0x18c>
 8001b1a:	4abe      	ldr	r2, [pc, #760]	@ (8001e14 <__aeabi_dmul+0x360>)
 8001b1c:	4694      	mov	ip, r2
 8001b1e:	4463      	add	r3, ip
 8001b20:	449b      	add	fp, r3
 8001b22:	2d0a      	cmp	r5, #10
 8001b24:	dc42      	bgt.n	8001bac <__aeabi_dmul+0xf8>
 8001b26:	00e4      	lsls	r4, r4, #3
 8001b28:	0f73      	lsrs	r3, r6, #29
 8001b2a:	4323      	orrs	r3, r4
 8001b2c:	2480      	movs	r4, #128	@ 0x80
 8001b2e:	4649      	mov	r1, r9
 8001b30:	0424      	lsls	r4, r4, #16
 8001b32:	431c      	orrs	r4, r3
 8001b34:	00f3      	lsls	r3, r6, #3
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	9b00      	ldr	r3, [sp, #0]
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	4059      	eors	r1, r3
 8001b3e:	b2cb      	uxtb	r3, r1
 8001b40:	9303      	str	r3, [sp, #12]
 8001b42:	2d02      	cmp	r5, #2
 8001b44:	dc00      	bgt.n	8001b48 <__aeabi_dmul+0x94>
 8001b46:	e094      	b.n	8001c72 <__aeabi_dmul+0x1be>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	40ab      	lsls	r3, r5
 8001b4c:	001d      	movs	r5, r3
 8001b4e:	23a6      	movs	r3, #166	@ 0xa6
 8001b50:	002a      	movs	r2, r5
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	401a      	ands	r2, r3
 8001b56:	421d      	tst	r5, r3
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dmul+0xa8>
 8001b5a:	e229      	b.n	8001fb0 <__aeabi_dmul+0x4fc>
 8001b5c:	2390      	movs	r3, #144	@ 0x90
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	421d      	tst	r5, r3
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dmul+0xb2>
 8001b64:	e24d      	b.n	8002002 <__aeabi_dmul+0x54e>
 8001b66:	2300      	movs	r3, #0
 8001b68:	2480      	movs	r4, #128	@ 0x80
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	0324      	lsls	r4, r4, #12
 8001b6e:	4ba8      	ldr	r3, [pc, #672]	@ (8001e10 <__aeabi_dmul+0x35c>)
 8001b70:	0010      	movs	r0, r2
 8001b72:	464a      	mov	r2, r9
 8001b74:	051b      	lsls	r3, r3, #20
 8001b76:	4323      	orrs	r3, r4
 8001b78:	07d2      	lsls	r2, r2, #31
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	b005      	add	sp, #20
 8001b80:	bcf0      	pop	{r4, r5, r6, r7}
 8001b82:	46bb      	mov	fp, r7
 8001b84:	46b2      	mov	sl, r6
 8001b86:	46a9      	mov	r9, r5
 8001b88:	46a0      	mov	r8, r4
 8001b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	4302      	orrs	r2, r0
 8001b90:	4690      	mov	r8, r2
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dmul+0xe2>
 8001b94:	e1ac      	b.n	8001ef0 <__aeabi_dmul+0x43c>
 8001b96:	469b      	mov	fp, r3
 8001b98:	2302      	movs	r3, #2
 8001b9a:	4692      	mov	sl, r2
 8001b9c:	2508      	movs	r5, #8
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	e7ae      	b.n	8001b00 <__aeabi_dmul+0x4c>
 8001ba2:	9b00      	ldr	r3, [sp, #0]
 8001ba4:	46a2      	mov	sl, r4
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	9b01      	ldr	r3, [sp, #4]
 8001baa:	4698      	mov	r8, r3
 8001bac:	9b02      	ldr	r3, [sp, #8]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dmul+0x100>
 8001bb2:	e1ca      	b.n	8001f4a <__aeabi_dmul+0x496>
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dmul+0x106>
 8001bb8:	e192      	b.n	8001ee0 <__aeabi_dmul+0x42c>
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d110      	bne.n	8001be0 <__aeabi_dmul+0x12c>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	e7d4      	b.n	8001b70 <__aeabi_dmul+0xbc>
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	087b      	lsrs	r3, r7, #1
 8001bca:	403a      	ands	r2, r7
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	4652      	mov	r2, sl
 8001bd0:	07d2      	lsls	r2, r2, #31
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	4698      	mov	r8, r3
 8001bd6:	4653      	mov	r3, sl
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	469a      	mov	sl, r3
 8001bdc:	9b03      	ldr	r3, [sp, #12]
 8001bde:	4699      	mov	r9, r3
 8001be0:	465b      	mov	r3, fp
 8001be2:	1c58      	adds	r0, r3, #1
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	445b      	add	r3, fp
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_dmul+0x13c>
 8001bee:	e1b1      	b.n	8001f54 <__aeabi_dmul+0x4a0>
 8001bf0:	4642      	mov	r2, r8
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	d00b      	beq.n	8001c0e <__aeabi_dmul+0x15a>
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	4641      	mov	r1, r8
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	2a04      	cmp	r2, #4
 8001bfe:	d006      	beq.n	8001c0e <__aeabi_dmul+0x15a>
 8001c00:	4642      	mov	r2, r8
 8001c02:	1d11      	adds	r1, r2, #4
 8001c04:	4541      	cmp	r1, r8
 8001c06:	4192      	sbcs	r2, r2
 8001c08:	4688      	mov	r8, r1
 8001c0a:	4252      	negs	r2, r2
 8001c0c:	4492      	add	sl, r2
 8001c0e:	4652      	mov	r2, sl
 8001c10:	01d2      	lsls	r2, r2, #7
 8001c12:	d506      	bpl.n	8001c22 <__aeabi_dmul+0x16e>
 8001c14:	4652      	mov	r2, sl
 8001c16:	4b80      	ldr	r3, [pc, #512]	@ (8001e18 <__aeabi_dmul+0x364>)
 8001c18:	401a      	ands	r2, r3
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	4692      	mov	sl, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	18c3      	adds	r3, r0, r3
 8001c22:	4a7e      	ldr	r2, [pc, #504]	@ (8001e1c <__aeabi_dmul+0x368>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	dd00      	ble.n	8001c2a <__aeabi_dmul+0x176>
 8001c28:	e18f      	b.n	8001f4a <__aeabi_dmul+0x496>
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	08d1      	lsrs	r1, r2, #3
 8001c2e:	4652      	mov	r2, sl
 8001c30:	0752      	lsls	r2, r2, #29
 8001c32:	430a      	orrs	r2, r1
 8001c34:	4651      	mov	r1, sl
 8001c36:	055b      	lsls	r3, r3, #21
 8001c38:	024c      	lsls	r4, r1, #9
 8001c3a:	0b24      	lsrs	r4, r4, #12
 8001c3c:	0d5b      	lsrs	r3, r3, #21
 8001c3e:	e797      	b.n	8001b70 <__aeabi_dmul+0xbc>
 8001c40:	4b73      	ldr	r3, [pc, #460]	@ (8001e10 <__aeabi_dmul+0x35c>)
 8001c42:	4326      	orrs	r6, r4
 8001c44:	469c      	mov	ip, r3
 8001c46:	44e3      	add	fp, ip
 8001c48:	2e00      	cmp	r6, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dmul+0x19a>
 8001c4c:	e16f      	b.n	8001f2e <__aeabi_dmul+0x47a>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	4649      	mov	r1, r9
 8001c52:	431d      	orrs	r5, r3
 8001c54:	9b00      	ldr	r3, [sp, #0]
 8001c56:	4059      	eors	r1, r3
 8001c58:	b2cb      	uxtb	r3, r1
 8001c5a:	9303      	str	r3, [sp, #12]
 8001c5c:	2d0a      	cmp	r5, #10
 8001c5e:	dd00      	ble.n	8001c62 <__aeabi_dmul+0x1ae>
 8001c60:	e133      	b.n	8001eca <__aeabi_dmul+0x416>
 8001c62:	2301      	movs	r3, #1
 8001c64:	40ab      	lsls	r3, r5
 8001c66:	001d      	movs	r5, r3
 8001c68:	2303      	movs	r3, #3
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	2288      	movs	r2, #136	@ 0x88
 8001c6e:	422a      	tst	r2, r5
 8001c70:	d197      	bne.n	8001ba2 <__aeabi_dmul+0xee>
 8001c72:	4642      	mov	r2, r8
 8001c74:	4643      	mov	r3, r8
 8001c76:	0412      	lsls	r2, r2, #16
 8001c78:	0c12      	lsrs	r2, r2, #16
 8001c7a:	0016      	movs	r6, r2
 8001c7c:	9801      	ldr	r0, [sp, #4]
 8001c7e:	0c1d      	lsrs	r5, r3, #16
 8001c80:	0c03      	lsrs	r3, r0, #16
 8001c82:	0400      	lsls	r0, r0, #16
 8001c84:	0c00      	lsrs	r0, r0, #16
 8001c86:	4346      	muls	r6, r0
 8001c88:	46b4      	mov	ip, r6
 8001c8a:	001e      	movs	r6, r3
 8001c8c:	436e      	muls	r6, r5
 8001c8e:	9600      	str	r6, [sp, #0]
 8001c90:	0016      	movs	r6, r2
 8001c92:	0007      	movs	r7, r0
 8001c94:	435e      	muls	r6, r3
 8001c96:	4661      	mov	r1, ip
 8001c98:	46b0      	mov	r8, r6
 8001c9a:	436f      	muls	r7, r5
 8001c9c:	0c0e      	lsrs	r6, r1, #16
 8001c9e:	44b8      	add	r8, r7
 8001ca0:	4446      	add	r6, r8
 8001ca2:	42b7      	cmp	r7, r6
 8001ca4:	d905      	bls.n	8001cb2 <__aeabi_dmul+0x1fe>
 8001ca6:	2180      	movs	r1, #128	@ 0x80
 8001ca8:	0249      	lsls	r1, r1, #9
 8001caa:	4688      	mov	r8, r1
 8001cac:	9f00      	ldr	r7, [sp, #0]
 8001cae:	4447      	add	r7, r8
 8001cb0:	9700      	str	r7, [sp, #0]
 8001cb2:	4661      	mov	r1, ip
 8001cb4:	0409      	lsls	r1, r1, #16
 8001cb6:	0c09      	lsrs	r1, r1, #16
 8001cb8:	0c37      	lsrs	r7, r6, #16
 8001cba:	0436      	lsls	r6, r6, #16
 8001cbc:	468c      	mov	ip, r1
 8001cbe:	0031      	movs	r1, r6
 8001cc0:	4461      	add	r1, ip
 8001cc2:	9101      	str	r1, [sp, #4]
 8001cc4:	0011      	movs	r1, r2
 8001cc6:	0c26      	lsrs	r6, r4, #16
 8001cc8:	0424      	lsls	r4, r4, #16
 8001cca:	0c24      	lsrs	r4, r4, #16
 8001ccc:	4361      	muls	r1, r4
 8001cce:	468c      	mov	ip, r1
 8001cd0:	0021      	movs	r1, r4
 8001cd2:	4369      	muls	r1, r5
 8001cd4:	4689      	mov	r9, r1
 8001cd6:	4661      	mov	r1, ip
 8001cd8:	0c09      	lsrs	r1, r1, #16
 8001cda:	4688      	mov	r8, r1
 8001cdc:	4372      	muls	r2, r6
 8001cde:	444a      	add	r2, r9
 8001ce0:	4442      	add	r2, r8
 8001ce2:	4375      	muls	r5, r6
 8001ce4:	4591      	cmp	r9, r2
 8001ce6:	d903      	bls.n	8001cf0 <__aeabi_dmul+0x23c>
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0249      	lsls	r1, r1, #9
 8001cec:	4688      	mov	r8, r1
 8001cee:	4445      	add	r5, r8
 8001cf0:	0c11      	lsrs	r1, r2, #16
 8001cf2:	4688      	mov	r8, r1
 8001cf4:	4661      	mov	r1, ip
 8001cf6:	0409      	lsls	r1, r1, #16
 8001cf8:	0c09      	lsrs	r1, r1, #16
 8001cfa:	468c      	mov	ip, r1
 8001cfc:	0412      	lsls	r2, r2, #16
 8001cfe:	4462      	add	r2, ip
 8001d00:	18b9      	adds	r1, r7, r2
 8001d02:	9102      	str	r1, [sp, #8]
 8001d04:	4651      	mov	r1, sl
 8001d06:	0c09      	lsrs	r1, r1, #16
 8001d08:	468c      	mov	ip, r1
 8001d0a:	4651      	mov	r1, sl
 8001d0c:	040f      	lsls	r7, r1, #16
 8001d0e:	0c3f      	lsrs	r7, r7, #16
 8001d10:	0039      	movs	r1, r7
 8001d12:	4341      	muls	r1, r0
 8001d14:	4445      	add	r5, r8
 8001d16:	4688      	mov	r8, r1
 8001d18:	4661      	mov	r1, ip
 8001d1a:	4341      	muls	r1, r0
 8001d1c:	468a      	mov	sl, r1
 8001d1e:	4641      	mov	r1, r8
 8001d20:	4660      	mov	r0, ip
 8001d22:	0c09      	lsrs	r1, r1, #16
 8001d24:	4689      	mov	r9, r1
 8001d26:	4358      	muls	r0, r3
 8001d28:	437b      	muls	r3, r7
 8001d2a:	4453      	add	r3, sl
 8001d2c:	444b      	add	r3, r9
 8001d2e:	459a      	cmp	sl, r3
 8001d30:	d903      	bls.n	8001d3a <__aeabi_dmul+0x286>
 8001d32:	2180      	movs	r1, #128	@ 0x80
 8001d34:	0249      	lsls	r1, r1, #9
 8001d36:	4689      	mov	r9, r1
 8001d38:	4448      	add	r0, r9
 8001d3a:	0c19      	lsrs	r1, r3, #16
 8001d3c:	4689      	mov	r9, r1
 8001d3e:	4641      	mov	r1, r8
 8001d40:	0409      	lsls	r1, r1, #16
 8001d42:	0c09      	lsrs	r1, r1, #16
 8001d44:	4688      	mov	r8, r1
 8001d46:	0039      	movs	r1, r7
 8001d48:	4361      	muls	r1, r4
 8001d4a:	041b      	lsls	r3, r3, #16
 8001d4c:	4443      	add	r3, r8
 8001d4e:	4688      	mov	r8, r1
 8001d50:	4661      	mov	r1, ip
 8001d52:	434c      	muls	r4, r1
 8001d54:	4371      	muls	r1, r6
 8001d56:	468c      	mov	ip, r1
 8001d58:	4641      	mov	r1, r8
 8001d5a:	4377      	muls	r7, r6
 8001d5c:	0c0e      	lsrs	r6, r1, #16
 8001d5e:	193f      	adds	r7, r7, r4
 8001d60:	19f6      	adds	r6, r6, r7
 8001d62:	4448      	add	r0, r9
 8001d64:	42b4      	cmp	r4, r6
 8001d66:	d903      	bls.n	8001d70 <__aeabi_dmul+0x2bc>
 8001d68:	2180      	movs	r1, #128	@ 0x80
 8001d6a:	0249      	lsls	r1, r1, #9
 8001d6c:	4689      	mov	r9, r1
 8001d6e:	44cc      	add	ip, r9
 8001d70:	9902      	ldr	r1, [sp, #8]
 8001d72:	9f00      	ldr	r7, [sp, #0]
 8001d74:	4689      	mov	r9, r1
 8001d76:	0431      	lsls	r1, r6, #16
 8001d78:	444f      	add	r7, r9
 8001d7a:	4689      	mov	r9, r1
 8001d7c:	4641      	mov	r1, r8
 8001d7e:	4297      	cmp	r7, r2
 8001d80:	4192      	sbcs	r2, r2
 8001d82:	040c      	lsls	r4, r1, #16
 8001d84:	0c24      	lsrs	r4, r4, #16
 8001d86:	444c      	add	r4, r9
 8001d88:	18ff      	adds	r7, r7, r3
 8001d8a:	4252      	negs	r2, r2
 8001d8c:	1964      	adds	r4, r4, r5
 8001d8e:	18a1      	adds	r1, r4, r2
 8001d90:	429f      	cmp	r7, r3
 8001d92:	419b      	sbcs	r3, r3
 8001d94:	4688      	mov	r8, r1
 8001d96:	4682      	mov	sl, r0
 8001d98:	425b      	negs	r3, r3
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	4590      	cmp	r8, r2
 8001d9e:	4192      	sbcs	r2, r2
 8001da0:	42ac      	cmp	r4, r5
 8001da2:	41a4      	sbcs	r4, r4
 8001da4:	44c2      	add	sl, r8
 8001da6:	44d1      	add	r9, sl
 8001da8:	4252      	negs	r2, r2
 8001daa:	4264      	negs	r4, r4
 8001dac:	4314      	orrs	r4, r2
 8001dae:	4599      	cmp	r9, r3
 8001db0:	419b      	sbcs	r3, r3
 8001db2:	4582      	cmp	sl, r0
 8001db4:	4192      	sbcs	r2, r2
 8001db6:	425b      	negs	r3, r3
 8001db8:	4252      	negs	r2, r2
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	464a      	mov	r2, r9
 8001dbe:	0c36      	lsrs	r6, r6, #16
 8001dc0:	19a4      	adds	r4, r4, r6
 8001dc2:	18e3      	adds	r3, r4, r3
 8001dc4:	4463      	add	r3, ip
 8001dc6:	025b      	lsls	r3, r3, #9
 8001dc8:	0dd2      	lsrs	r2, r2, #23
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	9901      	ldr	r1, [sp, #4]
 8001dce:	4692      	mov	sl, r2
 8001dd0:	027a      	lsls	r2, r7, #9
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	1e50      	subs	r0, r2, #1
 8001dd6:	4182      	sbcs	r2, r0
 8001dd8:	0dff      	lsrs	r7, r7, #23
 8001dda:	4317      	orrs	r7, r2
 8001ddc:	464a      	mov	r2, r9
 8001dde:	0252      	lsls	r2, r2, #9
 8001de0:	4317      	orrs	r7, r2
 8001de2:	46b8      	mov	r8, r7
 8001de4:	01db      	lsls	r3, r3, #7
 8001de6:	d500      	bpl.n	8001dea <__aeabi_dmul+0x336>
 8001de8:	e6ed      	b.n	8001bc6 <__aeabi_dmul+0x112>
 8001dea:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <__aeabi_dmul+0x36c>)
 8001dec:	9a03      	ldr	r2, [sp, #12]
 8001dee:	445b      	add	r3, fp
 8001df0:	4691      	mov	r9, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dc00      	bgt.n	8001df8 <__aeabi_dmul+0x344>
 8001df6:	e0ac      	b.n	8001f52 <__aeabi_dmul+0x49e>
 8001df8:	003a      	movs	r2, r7
 8001dfa:	0752      	lsls	r2, r2, #29
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dmul+0x34c>
 8001dfe:	e710      	b.n	8001c22 <__aeabi_dmul+0x16e>
 8001e00:	220f      	movs	r2, #15
 8001e02:	4658      	mov	r0, fp
 8001e04:	403a      	ands	r2, r7
 8001e06:	2a04      	cmp	r2, #4
 8001e08:	d000      	beq.n	8001e0c <__aeabi_dmul+0x358>
 8001e0a:	e6f9      	b.n	8001c00 <__aeabi_dmul+0x14c>
 8001e0c:	e709      	b.n	8001c22 <__aeabi_dmul+0x16e>
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	000007ff 	.word	0x000007ff
 8001e14:	fffffc01 	.word	0xfffffc01
 8001e18:	feffffff 	.word	0xfeffffff
 8001e1c:	000007fe 	.word	0x000007fe
 8001e20:	000003ff 	.word	0x000003ff
 8001e24:	0022      	movs	r2, r4
 8001e26:	4332      	orrs	r2, r6
 8001e28:	d06f      	beq.n	8001f0a <__aeabi_dmul+0x456>
 8001e2a:	2c00      	cmp	r4, #0
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dmul+0x37c>
 8001e2e:	e0c2      	b.n	8001fb6 <__aeabi_dmul+0x502>
 8001e30:	0020      	movs	r0, r4
 8001e32:	f000 fea9 	bl	8002b88 <__clzsi2>
 8001e36:	0002      	movs	r2, r0
 8001e38:	0003      	movs	r3, r0
 8001e3a:	3a0b      	subs	r2, #11
 8001e3c:	201d      	movs	r0, #29
 8001e3e:	1a82      	subs	r2, r0, r2
 8001e40:	0030      	movs	r0, r6
 8001e42:	0019      	movs	r1, r3
 8001e44:	40d0      	lsrs	r0, r2
 8001e46:	3908      	subs	r1, #8
 8001e48:	408c      	lsls	r4, r1
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	4322      	orrs	r2, r4
 8001e4e:	0034      	movs	r4, r6
 8001e50:	408c      	lsls	r4, r1
 8001e52:	4659      	mov	r1, fp
 8001e54:	1acb      	subs	r3, r1, r3
 8001e56:	4986      	ldr	r1, [pc, #536]	@ (8002070 <__aeabi_dmul+0x5bc>)
 8001e58:	468b      	mov	fp, r1
 8001e5a:	449b      	add	fp, r3
 8001e5c:	2d0a      	cmp	r5, #10
 8001e5e:	dd00      	ble.n	8001e62 <__aeabi_dmul+0x3ae>
 8001e60:	e6a4      	b.n	8001bac <__aeabi_dmul+0xf8>
 8001e62:	4649      	mov	r1, r9
 8001e64:	9b00      	ldr	r3, [sp, #0]
 8001e66:	9401      	str	r4, [sp, #4]
 8001e68:	4059      	eors	r1, r3
 8001e6a:	b2cb      	uxtb	r3, r1
 8001e6c:	0014      	movs	r4, r2
 8001e6e:	2000      	movs	r0, #0
 8001e70:	9303      	str	r3, [sp, #12]
 8001e72:	2d02      	cmp	r5, #2
 8001e74:	dd00      	ble.n	8001e78 <__aeabi_dmul+0x3c4>
 8001e76:	e667      	b.n	8001b48 <__aeabi_dmul+0x94>
 8001e78:	e6fb      	b.n	8001c72 <__aeabi_dmul+0x1be>
 8001e7a:	4653      	mov	r3, sl
 8001e7c:	4303      	orrs	r3, r0
 8001e7e:	4698      	mov	r8, r3
 8001e80:	d03c      	beq.n	8001efc <__aeabi_dmul+0x448>
 8001e82:	4653      	mov	r3, sl
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dmul+0x3d6>
 8001e88:	e0a3      	b.n	8001fd2 <__aeabi_dmul+0x51e>
 8001e8a:	4650      	mov	r0, sl
 8001e8c:	f000 fe7c 	bl	8002b88 <__clzsi2>
 8001e90:	230b      	movs	r3, #11
 8001e92:	425b      	negs	r3, r3
 8001e94:	469c      	mov	ip, r3
 8001e96:	0002      	movs	r2, r0
 8001e98:	4484      	add	ip, r0
 8001e9a:	0011      	movs	r1, r2
 8001e9c:	4650      	mov	r0, sl
 8001e9e:	3908      	subs	r1, #8
 8001ea0:	4088      	lsls	r0, r1
 8001ea2:	231d      	movs	r3, #29
 8001ea4:	4680      	mov	r8, r0
 8001ea6:	4660      	mov	r0, ip
 8001ea8:	1a1b      	subs	r3, r3, r0
 8001eaa:	0020      	movs	r0, r4
 8001eac:	40d8      	lsrs	r0, r3
 8001eae:	0003      	movs	r3, r0
 8001eb0:	4640      	mov	r0, r8
 8001eb2:	4303      	orrs	r3, r0
 8001eb4:	469a      	mov	sl, r3
 8001eb6:	0023      	movs	r3, r4
 8001eb8:	408b      	lsls	r3, r1
 8001eba:	4698      	mov	r8, r3
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8002070 <__aeabi_dmul+0x5bc>)
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	469b      	mov	fp, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	e61a      	b.n	8001b00 <__aeabi_dmul+0x4c>
 8001eca:	2d0f      	cmp	r5, #15
 8001ecc:	d000      	beq.n	8001ed0 <__aeabi_dmul+0x41c>
 8001ece:	e0c9      	b.n	8002064 <__aeabi_dmul+0x5b0>
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	4652      	mov	r2, sl
 8001ed4:	031b      	lsls	r3, r3, #12
 8001ed6:	421a      	tst	r2, r3
 8001ed8:	d002      	beq.n	8001ee0 <__aeabi_dmul+0x42c>
 8001eda:	421c      	tst	r4, r3
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dmul+0x42c>
 8001ede:	e092      	b.n	8002006 <__aeabi_dmul+0x552>
 8001ee0:	2480      	movs	r4, #128	@ 0x80
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	0324      	lsls	r4, r4, #12
 8001ee6:	431c      	orrs	r4, r3
 8001ee8:	0324      	lsls	r4, r4, #12
 8001eea:	4642      	mov	r2, r8
 8001eec:	0b24      	lsrs	r4, r4, #12
 8001eee:	e63e      	b.n	8001b6e <__aeabi_dmul+0xba>
 8001ef0:	469b      	mov	fp, r3
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	4680      	mov	r8, r0
 8001ef6:	250c      	movs	r5, #12
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	e601      	b.n	8001b00 <__aeabi_dmul+0x4c>
 8001efc:	2300      	movs	r3, #0
 8001efe:	469a      	mov	sl, r3
 8001f00:	469b      	mov	fp, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	2504      	movs	r5, #4
 8001f06:	9302      	str	r3, [sp, #8]
 8001f08:	e5fa      	b.n	8001b00 <__aeabi_dmul+0x4c>
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	430d      	orrs	r5, r1
 8001f0e:	2d0a      	cmp	r5, #10
 8001f10:	dd00      	ble.n	8001f14 <__aeabi_dmul+0x460>
 8001f12:	e64b      	b.n	8001bac <__aeabi_dmul+0xf8>
 8001f14:	4649      	mov	r1, r9
 8001f16:	9800      	ldr	r0, [sp, #0]
 8001f18:	4041      	eors	r1, r0
 8001f1a:	b2c9      	uxtb	r1, r1
 8001f1c:	9103      	str	r1, [sp, #12]
 8001f1e:	2d02      	cmp	r5, #2
 8001f20:	dc00      	bgt.n	8001f24 <__aeabi_dmul+0x470>
 8001f22:	e096      	b.n	8002052 <__aeabi_dmul+0x59e>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2400      	movs	r4, #0
 8001f28:	2001      	movs	r0, #1
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	e60c      	b.n	8001b48 <__aeabi_dmul+0x94>
 8001f2e:	4649      	mov	r1, r9
 8001f30:	2302      	movs	r3, #2
 8001f32:	9a00      	ldr	r2, [sp, #0]
 8001f34:	432b      	orrs	r3, r5
 8001f36:	4051      	eors	r1, r2
 8001f38:	b2ca      	uxtb	r2, r1
 8001f3a:	9203      	str	r2, [sp, #12]
 8001f3c:	2b0a      	cmp	r3, #10
 8001f3e:	dd00      	ble.n	8001f42 <__aeabi_dmul+0x48e>
 8001f40:	e634      	b.n	8001bac <__aeabi_dmul+0xf8>
 8001f42:	2d00      	cmp	r5, #0
 8001f44:	d157      	bne.n	8001ff6 <__aeabi_dmul+0x542>
 8001f46:	9b03      	ldr	r3, [sp, #12]
 8001f48:	4699      	mov	r9, r3
 8001f4a:	2400      	movs	r4, #0
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4b49      	ldr	r3, [pc, #292]	@ (8002074 <__aeabi_dmul+0x5c0>)
 8001f50:	e60e      	b.n	8001b70 <__aeabi_dmul+0xbc>
 8001f52:	4658      	mov	r0, fp
 8001f54:	2101      	movs	r1, #1
 8001f56:	1ac9      	subs	r1, r1, r3
 8001f58:	2938      	cmp	r1, #56	@ 0x38
 8001f5a:	dd00      	ble.n	8001f5e <__aeabi_dmul+0x4aa>
 8001f5c:	e62f      	b.n	8001bbe <__aeabi_dmul+0x10a>
 8001f5e:	291f      	cmp	r1, #31
 8001f60:	dd56      	ble.n	8002010 <__aeabi_dmul+0x55c>
 8001f62:	221f      	movs	r2, #31
 8001f64:	4654      	mov	r4, sl
 8001f66:	4252      	negs	r2, r2
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	40dc      	lsrs	r4, r3
 8001f6c:	2920      	cmp	r1, #32
 8001f6e:	d007      	beq.n	8001f80 <__aeabi_dmul+0x4cc>
 8001f70:	4b41      	ldr	r3, [pc, #260]	@ (8002078 <__aeabi_dmul+0x5c4>)
 8001f72:	4642      	mov	r2, r8
 8001f74:	469c      	mov	ip, r3
 8001f76:	4653      	mov	r3, sl
 8001f78:	4460      	add	r0, ip
 8001f7a:	4083      	lsls	r3, r0
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	4690      	mov	r8, r2
 8001f80:	4642      	mov	r2, r8
 8001f82:	2107      	movs	r1, #7
 8001f84:	1e53      	subs	r3, r2, #1
 8001f86:	419a      	sbcs	r2, r3
 8001f88:	000b      	movs	r3, r1
 8001f8a:	4322      	orrs	r2, r4
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2400      	movs	r4, #0
 8001f90:	4211      	tst	r1, r2
 8001f92:	d009      	beq.n	8001fa8 <__aeabi_dmul+0x4f4>
 8001f94:	230f      	movs	r3, #15
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d05d      	beq.n	8002058 <__aeabi_dmul+0x5a4>
 8001f9c:	1d11      	adds	r1, r2, #4
 8001f9e:	4291      	cmp	r1, r2
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	000a      	movs	r2, r1
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	075b      	lsls	r3, r3, #29
 8001fa8:	08d2      	lsrs	r2, r2, #3
 8001faa:	431a      	orrs	r2, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	e5df      	b.n	8001b70 <__aeabi_dmul+0xbc>
 8001fb0:	9b03      	ldr	r3, [sp, #12]
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	e5fa      	b.n	8001bac <__aeabi_dmul+0xf8>
 8001fb6:	9801      	ldr	r0, [sp, #4]
 8001fb8:	f000 fde6 	bl	8002b88 <__clzsi2>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	3215      	adds	r2, #21
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	2a1c      	cmp	r2, #28
 8001fc6:	dc00      	bgt.n	8001fca <__aeabi_dmul+0x516>
 8001fc8:	e738      	b.n	8001e3c <__aeabi_dmul+0x388>
 8001fca:	9a01      	ldr	r2, [sp, #4]
 8001fcc:	3808      	subs	r0, #8
 8001fce:	4082      	lsls	r2, r0
 8001fd0:	e73f      	b.n	8001e52 <__aeabi_dmul+0x39e>
 8001fd2:	f000 fdd9 	bl	8002b88 <__clzsi2>
 8001fd6:	2315      	movs	r3, #21
 8001fd8:	469c      	mov	ip, r3
 8001fda:	4484      	add	ip, r0
 8001fdc:	0002      	movs	r2, r0
 8001fde:	4663      	mov	r3, ip
 8001fe0:	3220      	adds	r2, #32
 8001fe2:	2b1c      	cmp	r3, #28
 8001fe4:	dc00      	bgt.n	8001fe8 <__aeabi_dmul+0x534>
 8001fe6:	e758      	b.n	8001e9a <__aeabi_dmul+0x3e6>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	4698      	mov	r8, r3
 8001fec:	0023      	movs	r3, r4
 8001fee:	3808      	subs	r0, #8
 8001ff0:	4083      	lsls	r3, r0
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	e762      	b.n	8001ebc <__aeabi_dmul+0x408>
 8001ff6:	001d      	movs	r5, r3
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	e5a2      	b.n	8001b48 <__aeabi_dmul+0x94>
 8002002:	9002      	str	r0, [sp, #8]
 8002004:	e632      	b.n	8001c6c <__aeabi_dmul+0x1b8>
 8002006:	431c      	orrs	r4, r3
 8002008:	9b00      	ldr	r3, [sp, #0]
 800200a:	9a01      	ldr	r2, [sp, #4]
 800200c:	4699      	mov	r9, r3
 800200e:	e5ae      	b.n	8001b6e <__aeabi_dmul+0xba>
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <__aeabi_dmul+0x5c8>)
 8002012:	4652      	mov	r2, sl
 8002014:	18c3      	adds	r3, r0, r3
 8002016:	4640      	mov	r0, r8
 8002018:	409a      	lsls	r2, r3
 800201a:	40c8      	lsrs	r0, r1
 800201c:	4302      	orrs	r2, r0
 800201e:	4640      	mov	r0, r8
 8002020:	4098      	lsls	r0, r3
 8002022:	0003      	movs	r3, r0
 8002024:	1e58      	subs	r0, r3, #1
 8002026:	4183      	sbcs	r3, r0
 8002028:	4654      	mov	r4, sl
 800202a:	431a      	orrs	r2, r3
 800202c:	40cc      	lsrs	r4, r1
 800202e:	0753      	lsls	r3, r2, #29
 8002030:	d009      	beq.n	8002046 <__aeabi_dmul+0x592>
 8002032:	230f      	movs	r3, #15
 8002034:	4013      	ands	r3, r2
 8002036:	2b04      	cmp	r3, #4
 8002038:	d005      	beq.n	8002046 <__aeabi_dmul+0x592>
 800203a:	1d13      	adds	r3, r2, #4
 800203c:	4293      	cmp	r3, r2
 800203e:	4192      	sbcs	r2, r2
 8002040:	4252      	negs	r2, r2
 8002042:	18a4      	adds	r4, r4, r2
 8002044:	001a      	movs	r2, r3
 8002046:	0223      	lsls	r3, r4, #8
 8002048:	d508      	bpl.n	800205c <__aeabi_dmul+0x5a8>
 800204a:	2301      	movs	r3, #1
 800204c:	2400      	movs	r4, #0
 800204e:	2200      	movs	r2, #0
 8002050:	e58e      	b.n	8001b70 <__aeabi_dmul+0xbc>
 8002052:	4689      	mov	r9, r1
 8002054:	2400      	movs	r4, #0
 8002056:	e58b      	b.n	8001b70 <__aeabi_dmul+0xbc>
 8002058:	2300      	movs	r3, #0
 800205a:	e7a5      	b.n	8001fa8 <__aeabi_dmul+0x4f4>
 800205c:	0763      	lsls	r3, r4, #29
 800205e:	0264      	lsls	r4, r4, #9
 8002060:	0b24      	lsrs	r4, r4, #12
 8002062:	e7a1      	b.n	8001fa8 <__aeabi_dmul+0x4f4>
 8002064:	9b00      	ldr	r3, [sp, #0]
 8002066:	46a2      	mov	sl, r4
 8002068:	4699      	mov	r9, r3
 800206a:	9b01      	ldr	r3, [sp, #4]
 800206c:	4698      	mov	r8, r3
 800206e:	e737      	b.n	8001ee0 <__aeabi_dmul+0x42c>
 8002070:	fffffc0d 	.word	0xfffffc0d
 8002074:	000007ff 	.word	0x000007ff
 8002078:	0000043e 	.word	0x0000043e
 800207c:	0000041e 	.word	0x0000041e

08002080 <__aeabi_dsub>:
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	4657      	mov	r7, sl
 8002084:	464e      	mov	r6, r9
 8002086:	4645      	mov	r5, r8
 8002088:	46de      	mov	lr, fp
 800208a:	b5e0      	push	{r5, r6, r7, lr}
 800208c:	b083      	sub	sp, #12
 800208e:	9000      	str	r0, [sp, #0]
 8002090:	9101      	str	r1, [sp, #4]
 8002092:	030c      	lsls	r4, r1, #12
 8002094:	004d      	lsls	r5, r1, #1
 8002096:	0fce      	lsrs	r6, r1, #31
 8002098:	0a61      	lsrs	r1, r4, #9
 800209a:	9c00      	ldr	r4, [sp, #0]
 800209c:	005f      	lsls	r7, r3, #1
 800209e:	0f64      	lsrs	r4, r4, #29
 80020a0:	430c      	orrs	r4, r1
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	9200      	str	r2, [sp, #0]
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	00c8      	lsls	r0, r1, #3
 80020aa:	0319      	lsls	r1, r3, #12
 80020ac:	0d7b      	lsrs	r3, r7, #21
 80020ae:	4699      	mov	r9, r3
 80020b0:	9b01      	ldr	r3, [sp, #4]
 80020b2:	4fcc      	ldr	r7, [pc, #816]	@ (80023e4 <__aeabi_dsub+0x364>)
 80020b4:	0fdb      	lsrs	r3, r3, #31
 80020b6:	469c      	mov	ip, r3
 80020b8:	0a4b      	lsrs	r3, r1, #9
 80020ba:	9900      	ldr	r1, [sp, #0]
 80020bc:	4680      	mov	r8, r0
 80020be:	0f49      	lsrs	r1, r1, #29
 80020c0:	4319      	orrs	r1, r3
 80020c2:	9b00      	ldr	r3, [sp, #0]
 80020c4:	468b      	mov	fp, r1
 80020c6:	00da      	lsls	r2, r3, #3
 80020c8:	4692      	mov	sl, r2
 80020ca:	0d6d      	lsrs	r5, r5, #21
 80020cc:	45b9      	cmp	r9, r7
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dsub+0x52>
 80020d0:	e0bf      	b.n	8002252 <__aeabi_dsub+0x1d2>
 80020d2:	2301      	movs	r3, #1
 80020d4:	4661      	mov	r1, ip
 80020d6:	4059      	eors	r1, r3
 80020d8:	464b      	mov	r3, r9
 80020da:	468c      	mov	ip, r1
 80020dc:	1aeb      	subs	r3, r5, r3
 80020de:	428e      	cmp	r6, r1
 80020e0:	d075      	beq.n	80021ce <__aeabi_dsub+0x14e>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	dc00      	bgt.n	80020e8 <__aeabi_dsub+0x68>
 80020e6:	e2a3      	b.n	8002630 <__aeabi_dsub+0x5b0>
 80020e8:	4649      	mov	r1, r9
 80020ea:	2900      	cmp	r1, #0
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x70>
 80020ee:	e0ce      	b.n	800228e <__aeabi_dsub+0x20e>
 80020f0:	42bd      	cmp	r5, r7
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x76>
 80020f4:	e200      	b.n	80024f8 <__aeabi_dsub+0x478>
 80020f6:	2701      	movs	r7, #1
 80020f8:	2b38      	cmp	r3, #56	@ 0x38
 80020fa:	dc19      	bgt.n	8002130 <__aeabi_dsub+0xb0>
 80020fc:	2780      	movs	r7, #128	@ 0x80
 80020fe:	4659      	mov	r1, fp
 8002100:	043f      	lsls	r7, r7, #16
 8002102:	4339      	orrs	r1, r7
 8002104:	468b      	mov	fp, r1
 8002106:	2b1f      	cmp	r3, #31
 8002108:	dd00      	ble.n	800210c <__aeabi_dsub+0x8c>
 800210a:	e1fa      	b.n	8002502 <__aeabi_dsub+0x482>
 800210c:	2720      	movs	r7, #32
 800210e:	1af9      	subs	r1, r7, r3
 8002110:	468c      	mov	ip, r1
 8002112:	4659      	mov	r1, fp
 8002114:	4667      	mov	r7, ip
 8002116:	40b9      	lsls	r1, r7
 8002118:	000f      	movs	r7, r1
 800211a:	0011      	movs	r1, r2
 800211c:	40d9      	lsrs	r1, r3
 800211e:	430f      	orrs	r7, r1
 8002120:	4661      	mov	r1, ip
 8002122:	408a      	lsls	r2, r1
 8002124:	1e51      	subs	r1, r2, #1
 8002126:	418a      	sbcs	r2, r1
 8002128:	4659      	mov	r1, fp
 800212a:	40d9      	lsrs	r1, r3
 800212c:	4317      	orrs	r7, r2
 800212e:	1a64      	subs	r4, r4, r1
 8002130:	1bc7      	subs	r7, r0, r7
 8002132:	42b8      	cmp	r0, r7
 8002134:	4180      	sbcs	r0, r0
 8002136:	4240      	negs	r0, r0
 8002138:	1a24      	subs	r4, r4, r0
 800213a:	0223      	lsls	r3, r4, #8
 800213c:	d400      	bmi.n	8002140 <__aeabi_dsub+0xc0>
 800213e:	e140      	b.n	80023c2 <__aeabi_dsub+0x342>
 8002140:	0264      	lsls	r4, r4, #9
 8002142:	0a64      	lsrs	r4, r4, #9
 8002144:	2c00      	cmp	r4, #0
 8002146:	d100      	bne.n	800214a <__aeabi_dsub+0xca>
 8002148:	e154      	b.n	80023f4 <__aeabi_dsub+0x374>
 800214a:	0020      	movs	r0, r4
 800214c:	f000 fd1c 	bl	8002b88 <__clzsi2>
 8002150:	0003      	movs	r3, r0
 8002152:	3b08      	subs	r3, #8
 8002154:	2120      	movs	r1, #32
 8002156:	0038      	movs	r0, r7
 8002158:	1aca      	subs	r2, r1, r3
 800215a:	40d0      	lsrs	r0, r2
 800215c:	409c      	lsls	r4, r3
 800215e:	0002      	movs	r2, r0
 8002160:	409f      	lsls	r7, r3
 8002162:	4322      	orrs	r2, r4
 8002164:	429d      	cmp	r5, r3
 8002166:	dd00      	ble.n	800216a <__aeabi_dsub+0xea>
 8002168:	e1a6      	b.n	80024b8 <__aeabi_dsub+0x438>
 800216a:	1b58      	subs	r0, r3, r5
 800216c:	3001      	adds	r0, #1
 800216e:	1a09      	subs	r1, r1, r0
 8002170:	003c      	movs	r4, r7
 8002172:	408f      	lsls	r7, r1
 8002174:	40c4      	lsrs	r4, r0
 8002176:	1e7b      	subs	r3, r7, #1
 8002178:	419f      	sbcs	r7, r3
 800217a:	0013      	movs	r3, r2
 800217c:	408b      	lsls	r3, r1
 800217e:	4327      	orrs	r7, r4
 8002180:	431f      	orrs	r7, r3
 8002182:	40c2      	lsrs	r2, r0
 8002184:	003b      	movs	r3, r7
 8002186:	0014      	movs	r4, r2
 8002188:	2500      	movs	r5, #0
 800218a:	4313      	orrs	r3, r2
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x110>
 800218e:	e1f7      	b.n	8002580 <__aeabi_dsub+0x500>
 8002190:	077b      	lsls	r3, r7, #29
 8002192:	d100      	bne.n	8002196 <__aeabi_dsub+0x116>
 8002194:	e377      	b.n	8002886 <__aeabi_dsub+0x806>
 8002196:	230f      	movs	r3, #15
 8002198:	0038      	movs	r0, r7
 800219a:	403b      	ands	r3, r7
 800219c:	2b04      	cmp	r3, #4
 800219e:	d004      	beq.n	80021aa <__aeabi_dsub+0x12a>
 80021a0:	1d38      	adds	r0, r7, #4
 80021a2:	42b8      	cmp	r0, r7
 80021a4:	41bf      	sbcs	r7, r7
 80021a6:	427f      	negs	r7, r7
 80021a8:	19e4      	adds	r4, r4, r7
 80021aa:	0223      	lsls	r3, r4, #8
 80021ac:	d400      	bmi.n	80021b0 <__aeabi_dsub+0x130>
 80021ae:	e368      	b.n	8002882 <__aeabi_dsub+0x802>
 80021b0:	4b8c      	ldr	r3, [pc, #560]	@ (80023e4 <__aeabi_dsub+0x364>)
 80021b2:	3501      	adds	r5, #1
 80021b4:	429d      	cmp	r5, r3
 80021b6:	d100      	bne.n	80021ba <__aeabi_dsub+0x13a>
 80021b8:	e0f4      	b.n	80023a4 <__aeabi_dsub+0x324>
 80021ba:	4b8b      	ldr	r3, [pc, #556]	@ (80023e8 <__aeabi_dsub+0x368>)
 80021bc:	056d      	lsls	r5, r5, #21
 80021be:	401c      	ands	r4, r3
 80021c0:	0d6d      	lsrs	r5, r5, #21
 80021c2:	0767      	lsls	r7, r4, #29
 80021c4:	08c0      	lsrs	r0, r0, #3
 80021c6:	0264      	lsls	r4, r4, #9
 80021c8:	4307      	orrs	r7, r0
 80021ca:	0b24      	lsrs	r4, r4, #12
 80021cc:	e0ec      	b.n	80023a8 <__aeabi_dsub+0x328>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	dc00      	bgt.n	80021d4 <__aeabi_dsub+0x154>
 80021d2:	e329      	b.n	8002828 <__aeabi_dsub+0x7a8>
 80021d4:	4649      	mov	r1, r9
 80021d6:	2900      	cmp	r1, #0
 80021d8:	d000      	beq.n	80021dc <__aeabi_dsub+0x15c>
 80021da:	e0d6      	b.n	800238a <__aeabi_dsub+0x30a>
 80021dc:	4659      	mov	r1, fp
 80021de:	4311      	orrs	r1, r2
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x164>
 80021e2:	e12e      	b.n	8002442 <__aeabi_dsub+0x3c2>
 80021e4:	1e59      	subs	r1, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d100      	bne.n	80021ec <__aeabi_dsub+0x16c>
 80021ea:	e1e6      	b.n	80025ba <__aeabi_dsub+0x53a>
 80021ec:	42bb      	cmp	r3, r7
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dsub+0x172>
 80021f0:	e182      	b.n	80024f8 <__aeabi_dsub+0x478>
 80021f2:	2701      	movs	r7, #1
 80021f4:	000b      	movs	r3, r1
 80021f6:	2938      	cmp	r1, #56	@ 0x38
 80021f8:	dc14      	bgt.n	8002224 <__aeabi_dsub+0x1a4>
 80021fa:	2b1f      	cmp	r3, #31
 80021fc:	dd00      	ble.n	8002200 <__aeabi_dsub+0x180>
 80021fe:	e23c      	b.n	800267a <__aeabi_dsub+0x5fa>
 8002200:	2720      	movs	r7, #32
 8002202:	1af9      	subs	r1, r7, r3
 8002204:	468c      	mov	ip, r1
 8002206:	4659      	mov	r1, fp
 8002208:	4667      	mov	r7, ip
 800220a:	40b9      	lsls	r1, r7
 800220c:	000f      	movs	r7, r1
 800220e:	0011      	movs	r1, r2
 8002210:	40d9      	lsrs	r1, r3
 8002212:	430f      	orrs	r7, r1
 8002214:	4661      	mov	r1, ip
 8002216:	408a      	lsls	r2, r1
 8002218:	1e51      	subs	r1, r2, #1
 800221a:	418a      	sbcs	r2, r1
 800221c:	4659      	mov	r1, fp
 800221e:	40d9      	lsrs	r1, r3
 8002220:	4317      	orrs	r7, r2
 8002222:	1864      	adds	r4, r4, r1
 8002224:	183f      	adds	r7, r7, r0
 8002226:	4287      	cmp	r7, r0
 8002228:	4180      	sbcs	r0, r0
 800222a:	4240      	negs	r0, r0
 800222c:	1824      	adds	r4, r4, r0
 800222e:	0223      	lsls	r3, r4, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_dsub+0x1b4>
 8002232:	e0c6      	b.n	80023c2 <__aeabi_dsub+0x342>
 8002234:	4b6b      	ldr	r3, [pc, #428]	@ (80023e4 <__aeabi_dsub+0x364>)
 8002236:	3501      	adds	r5, #1
 8002238:	429d      	cmp	r5, r3
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x1be>
 800223c:	e0b2      	b.n	80023a4 <__aeabi_dsub+0x324>
 800223e:	2101      	movs	r1, #1
 8002240:	4b69      	ldr	r3, [pc, #420]	@ (80023e8 <__aeabi_dsub+0x368>)
 8002242:	087a      	lsrs	r2, r7, #1
 8002244:	401c      	ands	r4, r3
 8002246:	4039      	ands	r1, r7
 8002248:	430a      	orrs	r2, r1
 800224a:	07e7      	lsls	r7, r4, #31
 800224c:	4317      	orrs	r7, r2
 800224e:	0864      	lsrs	r4, r4, #1
 8002250:	e79e      	b.n	8002190 <__aeabi_dsub+0x110>
 8002252:	4b66      	ldr	r3, [pc, #408]	@ (80023ec <__aeabi_dsub+0x36c>)
 8002254:	4311      	orrs	r1, r2
 8002256:	468a      	mov	sl, r1
 8002258:	18eb      	adds	r3, r5, r3
 800225a:	2900      	cmp	r1, #0
 800225c:	d028      	beq.n	80022b0 <__aeabi_dsub+0x230>
 800225e:	4566      	cmp	r6, ip
 8002260:	d02c      	beq.n	80022bc <__aeabi_dsub+0x23c>
 8002262:	2b00      	cmp	r3, #0
 8002264:	d05b      	beq.n	800231e <__aeabi_dsub+0x29e>
 8002266:	2d00      	cmp	r5, #0
 8002268:	d100      	bne.n	800226c <__aeabi_dsub+0x1ec>
 800226a:	e12c      	b.n	80024c6 <__aeabi_dsub+0x446>
 800226c:	465b      	mov	r3, fp
 800226e:	4666      	mov	r6, ip
 8002270:	075f      	lsls	r7, r3, #29
 8002272:	08d2      	lsrs	r2, r2, #3
 8002274:	4317      	orrs	r7, r2
 8002276:	08dd      	lsrs	r5, r3, #3
 8002278:	003b      	movs	r3, r7
 800227a:	432b      	orrs	r3, r5
 800227c:	d100      	bne.n	8002280 <__aeabi_dsub+0x200>
 800227e:	e0e2      	b.n	8002446 <__aeabi_dsub+0x3c6>
 8002280:	2480      	movs	r4, #128	@ 0x80
 8002282:	0324      	lsls	r4, r4, #12
 8002284:	432c      	orrs	r4, r5
 8002286:	0324      	lsls	r4, r4, #12
 8002288:	4d56      	ldr	r5, [pc, #344]	@ (80023e4 <__aeabi_dsub+0x364>)
 800228a:	0b24      	lsrs	r4, r4, #12
 800228c:	e08c      	b.n	80023a8 <__aeabi_dsub+0x328>
 800228e:	4659      	mov	r1, fp
 8002290:	4311      	orrs	r1, r2
 8002292:	d100      	bne.n	8002296 <__aeabi_dsub+0x216>
 8002294:	e0d5      	b.n	8002442 <__aeabi_dsub+0x3c2>
 8002296:	1e59      	subs	r1, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x21e>
 800229c:	e1b9      	b.n	8002612 <__aeabi_dsub+0x592>
 800229e:	42bb      	cmp	r3, r7
 80022a0:	d100      	bne.n	80022a4 <__aeabi_dsub+0x224>
 80022a2:	e1b1      	b.n	8002608 <__aeabi_dsub+0x588>
 80022a4:	2701      	movs	r7, #1
 80022a6:	000b      	movs	r3, r1
 80022a8:	2938      	cmp	r1, #56	@ 0x38
 80022aa:	dd00      	ble.n	80022ae <__aeabi_dsub+0x22e>
 80022ac:	e740      	b.n	8002130 <__aeabi_dsub+0xb0>
 80022ae:	e72a      	b.n	8002106 <__aeabi_dsub+0x86>
 80022b0:	4661      	mov	r1, ip
 80022b2:	2701      	movs	r7, #1
 80022b4:	4079      	eors	r1, r7
 80022b6:	468c      	mov	ip, r1
 80022b8:	4566      	cmp	r6, ip
 80022ba:	d1d2      	bne.n	8002262 <__aeabi_dsub+0x1e2>
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d100      	bne.n	80022c2 <__aeabi_dsub+0x242>
 80022c0:	e0c5      	b.n	800244e <__aeabi_dsub+0x3ce>
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	d000      	beq.n	80022c8 <__aeabi_dsub+0x248>
 80022c6:	e155      	b.n	8002574 <__aeabi_dsub+0x4f4>
 80022c8:	464b      	mov	r3, r9
 80022ca:	0025      	movs	r5, r4
 80022cc:	4305      	orrs	r5, r0
 80022ce:	d100      	bne.n	80022d2 <__aeabi_dsub+0x252>
 80022d0:	e212      	b.n	80026f8 <__aeabi_dsub+0x678>
 80022d2:	1e59      	subs	r1, r3, #1
 80022d4:	468c      	mov	ip, r1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x25c>
 80022da:	e249      	b.n	8002770 <__aeabi_dsub+0x6f0>
 80022dc:	4d41      	ldr	r5, [pc, #260]	@ (80023e4 <__aeabi_dsub+0x364>)
 80022de:	42ab      	cmp	r3, r5
 80022e0:	d100      	bne.n	80022e4 <__aeabi_dsub+0x264>
 80022e2:	e28f      	b.n	8002804 <__aeabi_dsub+0x784>
 80022e4:	2701      	movs	r7, #1
 80022e6:	2938      	cmp	r1, #56	@ 0x38
 80022e8:	dc11      	bgt.n	800230e <__aeabi_dsub+0x28e>
 80022ea:	4663      	mov	r3, ip
 80022ec:	2b1f      	cmp	r3, #31
 80022ee:	dd00      	ble.n	80022f2 <__aeabi_dsub+0x272>
 80022f0:	e25b      	b.n	80027aa <__aeabi_dsub+0x72a>
 80022f2:	4661      	mov	r1, ip
 80022f4:	2320      	movs	r3, #32
 80022f6:	0027      	movs	r7, r4
 80022f8:	1a5b      	subs	r3, r3, r1
 80022fa:	0005      	movs	r5, r0
 80022fc:	4098      	lsls	r0, r3
 80022fe:	409f      	lsls	r7, r3
 8002300:	40cd      	lsrs	r5, r1
 8002302:	1e43      	subs	r3, r0, #1
 8002304:	4198      	sbcs	r0, r3
 8002306:	40cc      	lsrs	r4, r1
 8002308:	432f      	orrs	r7, r5
 800230a:	4307      	orrs	r7, r0
 800230c:	44a3      	add	fp, r4
 800230e:	18bf      	adds	r7, r7, r2
 8002310:	4297      	cmp	r7, r2
 8002312:	4192      	sbcs	r2, r2
 8002314:	4252      	negs	r2, r2
 8002316:	445a      	add	r2, fp
 8002318:	0014      	movs	r4, r2
 800231a:	464d      	mov	r5, r9
 800231c:	e787      	b.n	800222e <__aeabi_dsub+0x1ae>
 800231e:	4f34      	ldr	r7, [pc, #208]	@ (80023f0 <__aeabi_dsub+0x370>)
 8002320:	1c6b      	adds	r3, r5, #1
 8002322:	423b      	tst	r3, r7
 8002324:	d000      	beq.n	8002328 <__aeabi_dsub+0x2a8>
 8002326:	e0b6      	b.n	8002496 <__aeabi_dsub+0x416>
 8002328:	4659      	mov	r1, fp
 800232a:	0023      	movs	r3, r4
 800232c:	4311      	orrs	r1, r2
 800232e:	000f      	movs	r7, r1
 8002330:	4303      	orrs	r3, r0
 8002332:	2d00      	cmp	r5, #0
 8002334:	d000      	beq.n	8002338 <__aeabi_dsub+0x2b8>
 8002336:	e126      	b.n	8002586 <__aeabi_dsub+0x506>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d100      	bne.n	800233e <__aeabi_dsub+0x2be>
 800233c:	e1c0      	b.n	80026c0 <__aeabi_dsub+0x640>
 800233e:	2900      	cmp	r1, #0
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x2c4>
 8002342:	e0a1      	b.n	8002488 <__aeabi_dsub+0x408>
 8002344:	1a83      	subs	r3, r0, r2
 8002346:	4698      	mov	r8, r3
 8002348:	465b      	mov	r3, fp
 800234a:	4540      	cmp	r0, r8
 800234c:	41ad      	sbcs	r5, r5
 800234e:	1ae3      	subs	r3, r4, r3
 8002350:	426d      	negs	r5, r5
 8002352:	1b5b      	subs	r3, r3, r5
 8002354:	2580      	movs	r5, #128	@ 0x80
 8002356:	042d      	lsls	r5, r5, #16
 8002358:	422b      	tst	r3, r5
 800235a:	d100      	bne.n	800235e <__aeabi_dsub+0x2de>
 800235c:	e14b      	b.n	80025f6 <__aeabi_dsub+0x576>
 800235e:	465b      	mov	r3, fp
 8002360:	1a10      	subs	r0, r2, r0
 8002362:	4282      	cmp	r2, r0
 8002364:	4192      	sbcs	r2, r2
 8002366:	1b1c      	subs	r4, r3, r4
 8002368:	0007      	movs	r7, r0
 800236a:	2601      	movs	r6, #1
 800236c:	4663      	mov	r3, ip
 800236e:	4252      	negs	r2, r2
 8002370:	1aa4      	subs	r4, r4, r2
 8002372:	4327      	orrs	r7, r4
 8002374:	401e      	ands	r6, r3
 8002376:	2f00      	cmp	r7, #0
 8002378:	d100      	bne.n	800237c <__aeabi_dsub+0x2fc>
 800237a:	e142      	b.n	8002602 <__aeabi_dsub+0x582>
 800237c:	422c      	tst	r4, r5
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x302>
 8002380:	e26d      	b.n	800285e <__aeabi_dsub+0x7de>
 8002382:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <__aeabi_dsub+0x368>)
 8002384:	2501      	movs	r5, #1
 8002386:	401c      	ands	r4, r3
 8002388:	e71b      	b.n	80021c2 <__aeabi_dsub+0x142>
 800238a:	42bd      	cmp	r5, r7
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x310>
 800238e:	e13b      	b.n	8002608 <__aeabi_dsub+0x588>
 8002390:	2701      	movs	r7, #1
 8002392:	2b38      	cmp	r3, #56	@ 0x38
 8002394:	dd00      	ble.n	8002398 <__aeabi_dsub+0x318>
 8002396:	e745      	b.n	8002224 <__aeabi_dsub+0x1a4>
 8002398:	2780      	movs	r7, #128	@ 0x80
 800239a:	4659      	mov	r1, fp
 800239c:	043f      	lsls	r7, r7, #16
 800239e:	4339      	orrs	r1, r7
 80023a0:	468b      	mov	fp, r1
 80023a2:	e72a      	b.n	80021fa <__aeabi_dsub+0x17a>
 80023a4:	2400      	movs	r4, #0
 80023a6:	2700      	movs	r7, #0
 80023a8:	052d      	lsls	r5, r5, #20
 80023aa:	4325      	orrs	r5, r4
 80023ac:	07f6      	lsls	r6, r6, #31
 80023ae:	4335      	orrs	r5, r6
 80023b0:	0038      	movs	r0, r7
 80023b2:	0029      	movs	r1, r5
 80023b4:	b003      	add	sp, #12
 80023b6:	bcf0      	pop	{r4, r5, r6, r7}
 80023b8:	46bb      	mov	fp, r7
 80023ba:	46b2      	mov	sl, r6
 80023bc:	46a9      	mov	r9, r5
 80023be:	46a0      	mov	r8, r4
 80023c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c2:	077b      	lsls	r3, r7, #29
 80023c4:	d004      	beq.n	80023d0 <__aeabi_dsub+0x350>
 80023c6:	230f      	movs	r3, #15
 80023c8:	403b      	ands	r3, r7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d000      	beq.n	80023d0 <__aeabi_dsub+0x350>
 80023ce:	e6e7      	b.n	80021a0 <__aeabi_dsub+0x120>
 80023d0:	002b      	movs	r3, r5
 80023d2:	08f8      	lsrs	r0, r7, #3
 80023d4:	4a03      	ldr	r2, [pc, #12]	@ (80023e4 <__aeabi_dsub+0x364>)
 80023d6:	0767      	lsls	r7, r4, #29
 80023d8:	4307      	orrs	r7, r0
 80023da:	08e5      	lsrs	r5, r4, #3
 80023dc:	4293      	cmp	r3, r2
 80023de:	d100      	bne.n	80023e2 <__aeabi_dsub+0x362>
 80023e0:	e74a      	b.n	8002278 <__aeabi_dsub+0x1f8>
 80023e2:	e0a5      	b.n	8002530 <__aeabi_dsub+0x4b0>
 80023e4:	000007ff 	.word	0x000007ff
 80023e8:	ff7fffff 	.word	0xff7fffff
 80023ec:	fffff801 	.word	0xfffff801
 80023f0:	000007fe 	.word	0x000007fe
 80023f4:	0038      	movs	r0, r7
 80023f6:	f000 fbc7 	bl	8002b88 <__clzsi2>
 80023fa:	0003      	movs	r3, r0
 80023fc:	3318      	adds	r3, #24
 80023fe:	2b1f      	cmp	r3, #31
 8002400:	dc00      	bgt.n	8002404 <__aeabi_dsub+0x384>
 8002402:	e6a7      	b.n	8002154 <__aeabi_dsub+0xd4>
 8002404:	003a      	movs	r2, r7
 8002406:	3808      	subs	r0, #8
 8002408:	4082      	lsls	r2, r0
 800240a:	429d      	cmp	r5, r3
 800240c:	dd00      	ble.n	8002410 <__aeabi_dsub+0x390>
 800240e:	e08a      	b.n	8002526 <__aeabi_dsub+0x4a6>
 8002410:	1b5b      	subs	r3, r3, r5
 8002412:	1c58      	adds	r0, r3, #1
 8002414:	281f      	cmp	r0, #31
 8002416:	dc00      	bgt.n	800241a <__aeabi_dsub+0x39a>
 8002418:	e1d8      	b.n	80027cc <__aeabi_dsub+0x74c>
 800241a:	0017      	movs	r7, r2
 800241c:	3b1f      	subs	r3, #31
 800241e:	40df      	lsrs	r7, r3
 8002420:	2820      	cmp	r0, #32
 8002422:	d005      	beq.n	8002430 <__aeabi_dsub+0x3b0>
 8002424:	2340      	movs	r3, #64	@ 0x40
 8002426:	1a1b      	subs	r3, r3, r0
 8002428:	409a      	lsls	r2, r3
 800242a:	1e53      	subs	r3, r2, #1
 800242c:	419a      	sbcs	r2, r3
 800242e:	4317      	orrs	r7, r2
 8002430:	2500      	movs	r5, #0
 8002432:	2f00      	cmp	r7, #0
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x3b8>
 8002436:	e0e5      	b.n	8002604 <__aeabi_dsub+0x584>
 8002438:	077b      	lsls	r3, r7, #29
 800243a:	d000      	beq.n	800243e <__aeabi_dsub+0x3be>
 800243c:	e6ab      	b.n	8002196 <__aeabi_dsub+0x116>
 800243e:	002c      	movs	r4, r5
 8002440:	e7c6      	b.n	80023d0 <__aeabi_dsub+0x350>
 8002442:	08c0      	lsrs	r0, r0, #3
 8002444:	e7c6      	b.n	80023d4 <__aeabi_dsub+0x354>
 8002446:	2700      	movs	r7, #0
 8002448:	2400      	movs	r4, #0
 800244a:	4dd1      	ldr	r5, [pc, #836]	@ (8002790 <__aeabi_dsub+0x710>)
 800244c:	e7ac      	b.n	80023a8 <__aeabi_dsub+0x328>
 800244e:	4fd1      	ldr	r7, [pc, #836]	@ (8002794 <__aeabi_dsub+0x714>)
 8002450:	1c6b      	adds	r3, r5, #1
 8002452:	423b      	tst	r3, r7
 8002454:	d171      	bne.n	800253a <__aeabi_dsub+0x4ba>
 8002456:	0023      	movs	r3, r4
 8002458:	4303      	orrs	r3, r0
 800245a:	2d00      	cmp	r5, #0
 800245c:	d000      	beq.n	8002460 <__aeabi_dsub+0x3e0>
 800245e:	e14e      	b.n	80026fe <__aeabi_dsub+0x67e>
 8002460:	4657      	mov	r7, sl
 8002462:	2b00      	cmp	r3, #0
 8002464:	d100      	bne.n	8002468 <__aeabi_dsub+0x3e8>
 8002466:	e1b5      	b.n	80027d4 <__aeabi_dsub+0x754>
 8002468:	2f00      	cmp	r7, #0
 800246a:	d00d      	beq.n	8002488 <__aeabi_dsub+0x408>
 800246c:	1883      	adds	r3, r0, r2
 800246e:	4283      	cmp	r3, r0
 8002470:	4180      	sbcs	r0, r0
 8002472:	445c      	add	r4, fp
 8002474:	4240      	negs	r0, r0
 8002476:	1824      	adds	r4, r4, r0
 8002478:	0222      	lsls	r2, r4, #8
 800247a:	d500      	bpl.n	800247e <__aeabi_dsub+0x3fe>
 800247c:	e1c8      	b.n	8002810 <__aeabi_dsub+0x790>
 800247e:	001f      	movs	r7, r3
 8002480:	4698      	mov	r8, r3
 8002482:	4327      	orrs	r7, r4
 8002484:	d100      	bne.n	8002488 <__aeabi_dsub+0x408>
 8002486:	e0bc      	b.n	8002602 <__aeabi_dsub+0x582>
 8002488:	4643      	mov	r3, r8
 800248a:	0767      	lsls	r7, r4, #29
 800248c:	08db      	lsrs	r3, r3, #3
 800248e:	431f      	orrs	r7, r3
 8002490:	08e5      	lsrs	r5, r4, #3
 8002492:	2300      	movs	r3, #0
 8002494:	e04c      	b.n	8002530 <__aeabi_dsub+0x4b0>
 8002496:	1a83      	subs	r3, r0, r2
 8002498:	4698      	mov	r8, r3
 800249a:	465b      	mov	r3, fp
 800249c:	4540      	cmp	r0, r8
 800249e:	41bf      	sbcs	r7, r7
 80024a0:	1ae3      	subs	r3, r4, r3
 80024a2:	427f      	negs	r7, r7
 80024a4:	1bdb      	subs	r3, r3, r7
 80024a6:	021f      	lsls	r7, r3, #8
 80024a8:	d47c      	bmi.n	80025a4 <__aeabi_dsub+0x524>
 80024aa:	4647      	mov	r7, r8
 80024ac:	431f      	orrs	r7, r3
 80024ae:	d100      	bne.n	80024b2 <__aeabi_dsub+0x432>
 80024b0:	e0a6      	b.n	8002600 <__aeabi_dsub+0x580>
 80024b2:	001c      	movs	r4, r3
 80024b4:	4647      	mov	r7, r8
 80024b6:	e645      	b.n	8002144 <__aeabi_dsub+0xc4>
 80024b8:	4cb7      	ldr	r4, [pc, #732]	@ (8002798 <__aeabi_dsub+0x718>)
 80024ba:	1aed      	subs	r5, r5, r3
 80024bc:	4014      	ands	r4, r2
 80024be:	077b      	lsls	r3, r7, #29
 80024c0:	d000      	beq.n	80024c4 <__aeabi_dsub+0x444>
 80024c2:	e780      	b.n	80023c6 <__aeabi_dsub+0x346>
 80024c4:	e784      	b.n	80023d0 <__aeabi_dsub+0x350>
 80024c6:	464b      	mov	r3, r9
 80024c8:	0025      	movs	r5, r4
 80024ca:	4305      	orrs	r5, r0
 80024cc:	d066      	beq.n	800259c <__aeabi_dsub+0x51c>
 80024ce:	1e5f      	subs	r7, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d100      	bne.n	80024d6 <__aeabi_dsub+0x456>
 80024d4:	e0fc      	b.n	80026d0 <__aeabi_dsub+0x650>
 80024d6:	4dae      	ldr	r5, [pc, #696]	@ (8002790 <__aeabi_dsub+0x710>)
 80024d8:	42ab      	cmp	r3, r5
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x45e>
 80024dc:	e15e      	b.n	800279c <__aeabi_dsub+0x71c>
 80024de:	4666      	mov	r6, ip
 80024e0:	2f38      	cmp	r7, #56	@ 0x38
 80024e2:	dc00      	bgt.n	80024e6 <__aeabi_dsub+0x466>
 80024e4:	e0b4      	b.n	8002650 <__aeabi_dsub+0x5d0>
 80024e6:	2001      	movs	r0, #1
 80024e8:	1a17      	subs	r7, r2, r0
 80024ea:	42ba      	cmp	r2, r7
 80024ec:	4192      	sbcs	r2, r2
 80024ee:	465b      	mov	r3, fp
 80024f0:	4252      	negs	r2, r2
 80024f2:	464d      	mov	r5, r9
 80024f4:	1a9c      	subs	r4, r3, r2
 80024f6:	e620      	b.n	800213a <__aeabi_dsub+0xba>
 80024f8:	0767      	lsls	r7, r4, #29
 80024fa:	08c0      	lsrs	r0, r0, #3
 80024fc:	4307      	orrs	r7, r0
 80024fe:	08e5      	lsrs	r5, r4, #3
 8002500:	e6ba      	b.n	8002278 <__aeabi_dsub+0x1f8>
 8002502:	001f      	movs	r7, r3
 8002504:	4659      	mov	r1, fp
 8002506:	3f20      	subs	r7, #32
 8002508:	40f9      	lsrs	r1, r7
 800250a:	000f      	movs	r7, r1
 800250c:	2b20      	cmp	r3, #32
 800250e:	d005      	beq.n	800251c <__aeabi_dsub+0x49c>
 8002510:	2140      	movs	r1, #64	@ 0x40
 8002512:	1acb      	subs	r3, r1, r3
 8002514:	4659      	mov	r1, fp
 8002516:	4099      	lsls	r1, r3
 8002518:	430a      	orrs	r2, r1
 800251a:	4692      	mov	sl, r2
 800251c:	4653      	mov	r3, sl
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	4193      	sbcs	r3, r2
 8002522:	431f      	orrs	r7, r3
 8002524:	e604      	b.n	8002130 <__aeabi_dsub+0xb0>
 8002526:	1aeb      	subs	r3, r5, r3
 8002528:	4d9b      	ldr	r5, [pc, #620]	@ (8002798 <__aeabi_dsub+0x718>)
 800252a:	4015      	ands	r5, r2
 800252c:	076f      	lsls	r7, r5, #29
 800252e:	08ed      	lsrs	r5, r5, #3
 8002530:	032c      	lsls	r4, r5, #12
 8002532:	055d      	lsls	r5, r3, #21
 8002534:	0b24      	lsrs	r4, r4, #12
 8002536:	0d6d      	lsrs	r5, r5, #21
 8002538:	e736      	b.n	80023a8 <__aeabi_dsub+0x328>
 800253a:	4d95      	ldr	r5, [pc, #596]	@ (8002790 <__aeabi_dsub+0x710>)
 800253c:	42ab      	cmp	r3, r5
 800253e:	d100      	bne.n	8002542 <__aeabi_dsub+0x4c2>
 8002540:	e0d6      	b.n	80026f0 <__aeabi_dsub+0x670>
 8002542:	1882      	adds	r2, r0, r2
 8002544:	0021      	movs	r1, r4
 8002546:	4282      	cmp	r2, r0
 8002548:	4180      	sbcs	r0, r0
 800254a:	4459      	add	r1, fp
 800254c:	4240      	negs	r0, r0
 800254e:	1808      	adds	r0, r1, r0
 8002550:	07c7      	lsls	r7, r0, #31
 8002552:	0852      	lsrs	r2, r2, #1
 8002554:	4317      	orrs	r7, r2
 8002556:	0844      	lsrs	r4, r0, #1
 8002558:	0752      	lsls	r2, r2, #29
 800255a:	d400      	bmi.n	800255e <__aeabi_dsub+0x4de>
 800255c:	e185      	b.n	800286a <__aeabi_dsub+0x7ea>
 800255e:	220f      	movs	r2, #15
 8002560:	001d      	movs	r5, r3
 8002562:	403a      	ands	r2, r7
 8002564:	2a04      	cmp	r2, #4
 8002566:	d000      	beq.n	800256a <__aeabi_dsub+0x4ea>
 8002568:	e61a      	b.n	80021a0 <__aeabi_dsub+0x120>
 800256a:	08ff      	lsrs	r7, r7, #3
 800256c:	0764      	lsls	r4, r4, #29
 800256e:	4327      	orrs	r7, r4
 8002570:	0905      	lsrs	r5, r0, #4
 8002572:	e7dd      	b.n	8002530 <__aeabi_dsub+0x4b0>
 8002574:	465b      	mov	r3, fp
 8002576:	08d2      	lsrs	r2, r2, #3
 8002578:	075f      	lsls	r7, r3, #29
 800257a:	4317      	orrs	r7, r2
 800257c:	08dd      	lsrs	r5, r3, #3
 800257e:	e67b      	b.n	8002278 <__aeabi_dsub+0x1f8>
 8002580:	2700      	movs	r7, #0
 8002582:	2400      	movs	r4, #0
 8002584:	e710      	b.n	80023a8 <__aeabi_dsub+0x328>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d000      	beq.n	800258c <__aeabi_dsub+0x50c>
 800258a:	e0d6      	b.n	800273a <__aeabi_dsub+0x6ba>
 800258c:	2900      	cmp	r1, #0
 800258e:	d000      	beq.n	8002592 <__aeabi_dsub+0x512>
 8002590:	e12f      	b.n	80027f2 <__aeabi_dsub+0x772>
 8002592:	2480      	movs	r4, #128	@ 0x80
 8002594:	2600      	movs	r6, #0
 8002596:	4d7e      	ldr	r5, [pc, #504]	@ (8002790 <__aeabi_dsub+0x710>)
 8002598:	0324      	lsls	r4, r4, #12
 800259a:	e705      	b.n	80023a8 <__aeabi_dsub+0x328>
 800259c:	4666      	mov	r6, ip
 800259e:	465c      	mov	r4, fp
 80025a0:	08d0      	lsrs	r0, r2, #3
 80025a2:	e717      	b.n	80023d4 <__aeabi_dsub+0x354>
 80025a4:	465b      	mov	r3, fp
 80025a6:	1a17      	subs	r7, r2, r0
 80025a8:	42ba      	cmp	r2, r7
 80025aa:	4192      	sbcs	r2, r2
 80025ac:	1b1c      	subs	r4, r3, r4
 80025ae:	2601      	movs	r6, #1
 80025b0:	4663      	mov	r3, ip
 80025b2:	4252      	negs	r2, r2
 80025b4:	1aa4      	subs	r4, r4, r2
 80025b6:	401e      	ands	r6, r3
 80025b8:	e5c4      	b.n	8002144 <__aeabi_dsub+0xc4>
 80025ba:	1883      	adds	r3, r0, r2
 80025bc:	4283      	cmp	r3, r0
 80025be:	4180      	sbcs	r0, r0
 80025c0:	445c      	add	r4, fp
 80025c2:	4240      	negs	r0, r0
 80025c4:	1825      	adds	r5, r4, r0
 80025c6:	022a      	lsls	r2, r5, #8
 80025c8:	d400      	bmi.n	80025cc <__aeabi_dsub+0x54c>
 80025ca:	e0da      	b.n	8002782 <__aeabi_dsub+0x702>
 80025cc:	4a72      	ldr	r2, [pc, #456]	@ (8002798 <__aeabi_dsub+0x718>)
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	4015      	ands	r5, r2
 80025d2:	07ea      	lsls	r2, r5, #31
 80025d4:	431a      	orrs	r2, r3
 80025d6:	0869      	lsrs	r1, r5, #1
 80025d8:	075b      	lsls	r3, r3, #29
 80025da:	d400      	bmi.n	80025de <__aeabi_dsub+0x55e>
 80025dc:	e14a      	b.n	8002874 <__aeabi_dsub+0x7f4>
 80025de:	230f      	movs	r3, #15
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d100      	bne.n	80025e8 <__aeabi_dsub+0x568>
 80025e6:	e0fc      	b.n	80027e2 <__aeabi_dsub+0x762>
 80025e8:	1d17      	adds	r7, r2, #4
 80025ea:	4297      	cmp	r7, r2
 80025ec:	41a4      	sbcs	r4, r4
 80025ee:	4264      	negs	r4, r4
 80025f0:	2502      	movs	r5, #2
 80025f2:	1864      	adds	r4, r4, r1
 80025f4:	e6ec      	b.n	80023d0 <__aeabi_dsub+0x350>
 80025f6:	4647      	mov	r7, r8
 80025f8:	001c      	movs	r4, r3
 80025fa:	431f      	orrs	r7, r3
 80025fc:	d000      	beq.n	8002600 <__aeabi_dsub+0x580>
 80025fe:	e743      	b.n	8002488 <__aeabi_dsub+0x408>
 8002600:	2600      	movs	r6, #0
 8002602:	2500      	movs	r5, #0
 8002604:	2400      	movs	r4, #0
 8002606:	e6cf      	b.n	80023a8 <__aeabi_dsub+0x328>
 8002608:	08c0      	lsrs	r0, r0, #3
 800260a:	0767      	lsls	r7, r4, #29
 800260c:	4307      	orrs	r7, r0
 800260e:	08e5      	lsrs	r5, r4, #3
 8002610:	e632      	b.n	8002278 <__aeabi_dsub+0x1f8>
 8002612:	1a87      	subs	r7, r0, r2
 8002614:	465b      	mov	r3, fp
 8002616:	42b8      	cmp	r0, r7
 8002618:	4180      	sbcs	r0, r0
 800261a:	1ae4      	subs	r4, r4, r3
 800261c:	4240      	negs	r0, r0
 800261e:	1a24      	subs	r4, r4, r0
 8002620:	0223      	lsls	r3, r4, #8
 8002622:	d428      	bmi.n	8002676 <__aeabi_dsub+0x5f6>
 8002624:	0763      	lsls	r3, r4, #29
 8002626:	08ff      	lsrs	r7, r7, #3
 8002628:	431f      	orrs	r7, r3
 800262a:	08e5      	lsrs	r5, r4, #3
 800262c:	2301      	movs	r3, #1
 800262e:	e77f      	b.n	8002530 <__aeabi_dsub+0x4b0>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d100      	bne.n	8002636 <__aeabi_dsub+0x5b6>
 8002634:	e673      	b.n	800231e <__aeabi_dsub+0x29e>
 8002636:	464b      	mov	r3, r9
 8002638:	1b5f      	subs	r7, r3, r5
 800263a:	003b      	movs	r3, r7
 800263c:	2d00      	cmp	r5, #0
 800263e:	d100      	bne.n	8002642 <__aeabi_dsub+0x5c2>
 8002640:	e742      	b.n	80024c8 <__aeabi_dsub+0x448>
 8002642:	2f38      	cmp	r7, #56	@ 0x38
 8002644:	dd00      	ble.n	8002648 <__aeabi_dsub+0x5c8>
 8002646:	e0ec      	b.n	8002822 <__aeabi_dsub+0x7a2>
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	000e      	movs	r6, r1
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	431c      	orrs	r4, r3
 8002650:	2f1f      	cmp	r7, #31
 8002652:	dc25      	bgt.n	80026a0 <__aeabi_dsub+0x620>
 8002654:	2520      	movs	r5, #32
 8002656:	0023      	movs	r3, r4
 8002658:	1bed      	subs	r5, r5, r7
 800265a:	0001      	movs	r1, r0
 800265c:	40a8      	lsls	r0, r5
 800265e:	40ab      	lsls	r3, r5
 8002660:	40f9      	lsrs	r1, r7
 8002662:	1e45      	subs	r5, r0, #1
 8002664:	41a8      	sbcs	r0, r5
 8002666:	430b      	orrs	r3, r1
 8002668:	40fc      	lsrs	r4, r7
 800266a:	4318      	orrs	r0, r3
 800266c:	465b      	mov	r3, fp
 800266e:	1b1b      	subs	r3, r3, r4
 8002670:	469b      	mov	fp, r3
 8002672:	e739      	b.n	80024e8 <__aeabi_dsub+0x468>
 8002674:	4666      	mov	r6, ip
 8002676:	2501      	movs	r5, #1
 8002678:	e562      	b.n	8002140 <__aeabi_dsub+0xc0>
 800267a:	001f      	movs	r7, r3
 800267c:	4659      	mov	r1, fp
 800267e:	3f20      	subs	r7, #32
 8002680:	40f9      	lsrs	r1, r7
 8002682:	468c      	mov	ip, r1
 8002684:	2b20      	cmp	r3, #32
 8002686:	d005      	beq.n	8002694 <__aeabi_dsub+0x614>
 8002688:	2740      	movs	r7, #64	@ 0x40
 800268a:	4659      	mov	r1, fp
 800268c:	1afb      	subs	r3, r7, r3
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	4692      	mov	sl, r2
 8002694:	4657      	mov	r7, sl
 8002696:	1e7b      	subs	r3, r7, #1
 8002698:	419f      	sbcs	r7, r3
 800269a:	4663      	mov	r3, ip
 800269c:	431f      	orrs	r7, r3
 800269e:	e5c1      	b.n	8002224 <__aeabi_dsub+0x1a4>
 80026a0:	003b      	movs	r3, r7
 80026a2:	0025      	movs	r5, r4
 80026a4:	3b20      	subs	r3, #32
 80026a6:	40dd      	lsrs	r5, r3
 80026a8:	2f20      	cmp	r7, #32
 80026aa:	d004      	beq.n	80026b6 <__aeabi_dsub+0x636>
 80026ac:	2340      	movs	r3, #64	@ 0x40
 80026ae:	1bdb      	subs	r3, r3, r7
 80026b0:	409c      	lsls	r4, r3
 80026b2:	4320      	orrs	r0, r4
 80026b4:	4680      	mov	r8, r0
 80026b6:	4640      	mov	r0, r8
 80026b8:	1e43      	subs	r3, r0, #1
 80026ba:	4198      	sbcs	r0, r3
 80026bc:	4328      	orrs	r0, r5
 80026be:	e713      	b.n	80024e8 <__aeabi_dsub+0x468>
 80026c0:	2900      	cmp	r1, #0
 80026c2:	d09d      	beq.n	8002600 <__aeabi_dsub+0x580>
 80026c4:	2601      	movs	r6, #1
 80026c6:	4663      	mov	r3, ip
 80026c8:	465c      	mov	r4, fp
 80026ca:	4690      	mov	r8, r2
 80026cc:	401e      	ands	r6, r3
 80026ce:	e6db      	b.n	8002488 <__aeabi_dsub+0x408>
 80026d0:	1a17      	subs	r7, r2, r0
 80026d2:	465b      	mov	r3, fp
 80026d4:	42ba      	cmp	r2, r7
 80026d6:	4192      	sbcs	r2, r2
 80026d8:	1b1c      	subs	r4, r3, r4
 80026da:	4252      	negs	r2, r2
 80026dc:	1aa4      	subs	r4, r4, r2
 80026de:	0223      	lsls	r3, r4, #8
 80026e0:	d4c8      	bmi.n	8002674 <__aeabi_dsub+0x5f4>
 80026e2:	0763      	lsls	r3, r4, #29
 80026e4:	08ff      	lsrs	r7, r7, #3
 80026e6:	431f      	orrs	r7, r3
 80026e8:	4666      	mov	r6, ip
 80026ea:	2301      	movs	r3, #1
 80026ec:	08e5      	lsrs	r5, r4, #3
 80026ee:	e71f      	b.n	8002530 <__aeabi_dsub+0x4b0>
 80026f0:	001d      	movs	r5, r3
 80026f2:	2400      	movs	r4, #0
 80026f4:	2700      	movs	r7, #0
 80026f6:	e657      	b.n	80023a8 <__aeabi_dsub+0x328>
 80026f8:	465c      	mov	r4, fp
 80026fa:	08d0      	lsrs	r0, r2, #3
 80026fc:	e66a      	b.n	80023d4 <__aeabi_dsub+0x354>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d100      	bne.n	8002704 <__aeabi_dsub+0x684>
 8002702:	e737      	b.n	8002574 <__aeabi_dsub+0x4f4>
 8002704:	4653      	mov	r3, sl
 8002706:	08c0      	lsrs	r0, r0, #3
 8002708:	0767      	lsls	r7, r4, #29
 800270a:	4307      	orrs	r7, r0
 800270c:	08e5      	lsrs	r5, r4, #3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d100      	bne.n	8002714 <__aeabi_dsub+0x694>
 8002712:	e5b1      	b.n	8002278 <__aeabi_dsub+0x1f8>
 8002714:	2380      	movs	r3, #128	@ 0x80
 8002716:	031b      	lsls	r3, r3, #12
 8002718:	421d      	tst	r5, r3
 800271a:	d008      	beq.n	800272e <__aeabi_dsub+0x6ae>
 800271c:	4659      	mov	r1, fp
 800271e:	08c8      	lsrs	r0, r1, #3
 8002720:	4218      	tst	r0, r3
 8002722:	d104      	bne.n	800272e <__aeabi_dsub+0x6ae>
 8002724:	08d2      	lsrs	r2, r2, #3
 8002726:	0749      	lsls	r1, r1, #29
 8002728:	430a      	orrs	r2, r1
 800272a:	0017      	movs	r7, r2
 800272c:	0005      	movs	r5, r0
 800272e:	0f7b      	lsrs	r3, r7, #29
 8002730:	00ff      	lsls	r7, r7, #3
 8002732:	08ff      	lsrs	r7, r7, #3
 8002734:	075b      	lsls	r3, r3, #29
 8002736:	431f      	orrs	r7, r3
 8002738:	e59e      	b.n	8002278 <__aeabi_dsub+0x1f8>
 800273a:	08c0      	lsrs	r0, r0, #3
 800273c:	0763      	lsls	r3, r4, #29
 800273e:	4318      	orrs	r0, r3
 8002740:	08e5      	lsrs	r5, r4, #3
 8002742:	2900      	cmp	r1, #0
 8002744:	d053      	beq.n	80027ee <__aeabi_dsub+0x76e>
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	031b      	lsls	r3, r3, #12
 800274a:	421d      	tst	r5, r3
 800274c:	d00a      	beq.n	8002764 <__aeabi_dsub+0x6e4>
 800274e:	4659      	mov	r1, fp
 8002750:	08cc      	lsrs	r4, r1, #3
 8002752:	421c      	tst	r4, r3
 8002754:	d106      	bne.n	8002764 <__aeabi_dsub+0x6e4>
 8002756:	2601      	movs	r6, #1
 8002758:	4663      	mov	r3, ip
 800275a:	0025      	movs	r5, r4
 800275c:	08d0      	lsrs	r0, r2, #3
 800275e:	0749      	lsls	r1, r1, #29
 8002760:	4308      	orrs	r0, r1
 8002762:	401e      	ands	r6, r3
 8002764:	0f47      	lsrs	r7, r0, #29
 8002766:	00c0      	lsls	r0, r0, #3
 8002768:	08c0      	lsrs	r0, r0, #3
 800276a:	077f      	lsls	r7, r7, #29
 800276c:	4307      	orrs	r7, r0
 800276e:	e583      	b.n	8002278 <__aeabi_dsub+0x1f8>
 8002770:	1883      	adds	r3, r0, r2
 8002772:	4293      	cmp	r3, r2
 8002774:	4192      	sbcs	r2, r2
 8002776:	445c      	add	r4, fp
 8002778:	4252      	negs	r2, r2
 800277a:	18a5      	adds	r5, r4, r2
 800277c:	022a      	lsls	r2, r5, #8
 800277e:	d500      	bpl.n	8002782 <__aeabi_dsub+0x702>
 8002780:	e724      	b.n	80025cc <__aeabi_dsub+0x54c>
 8002782:	076f      	lsls	r7, r5, #29
 8002784:	08db      	lsrs	r3, r3, #3
 8002786:	431f      	orrs	r7, r3
 8002788:	08ed      	lsrs	r5, r5, #3
 800278a:	2301      	movs	r3, #1
 800278c:	e6d0      	b.n	8002530 <__aeabi_dsub+0x4b0>
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	000007ff 	.word	0x000007ff
 8002794:	000007fe 	.word	0x000007fe
 8002798:	ff7fffff 	.word	0xff7fffff
 800279c:	465b      	mov	r3, fp
 800279e:	08d2      	lsrs	r2, r2, #3
 80027a0:	075f      	lsls	r7, r3, #29
 80027a2:	4666      	mov	r6, ip
 80027a4:	4317      	orrs	r7, r2
 80027a6:	08dd      	lsrs	r5, r3, #3
 80027a8:	e566      	b.n	8002278 <__aeabi_dsub+0x1f8>
 80027aa:	0025      	movs	r5, r4
 80027ac:	3b20      	subs	r3, #32
 80027ae:	40dd      	lsrs	r5, r3
 80027b0:	4663      	mov	r3, ip
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d005      	beq.n	80027c2 <__aeabi_dsub+0x742>
 80027b6:	2340      	movs	r3, #64	@ 0x40
 80027b8:	4661      	mov	r1, ip
 80027ba:	1a5b      	subs	r3, r3, r1
 80027bc:	409c      	lsls	r4, r3
 80027be:	4320      	orrs	r0, r4
 80027c0:	4680      	mov	r8, r0
 80027c2:	4647      	mov	r7, r8
 80027c4:	1e7b      	subs	r3, r7, #1
 80027c6:	419f      	sbcs	r7, r3
 80027c8:	432f      	orrs	r7, r5
 80027ca:	e5a0      	b.n	800230e <__aeabi_dsub+0x28e>
 80027cc:	2120      	movs	r1, #32
 80027ce:	2700      	movs	r7, #0
 80027d0:	1a09      	subs	r1, r1, r0
 80027d2:	e4d2      	b.n	800217a <__aeabi_dsub+0xfa>
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d100      	bne.n	80027da <__aeabi_dsub+0x75a>
 80027d8:	e713      	b.n	8002602 <__aeabi_dsub+0x582>
 80027da:	465c      	mov	r4, fp
 80027dc:	0017      	movs	r7, r2
 80027de:	2500      	movs	r5, #0
 80027e0:	e5f6      	b.n	80023d0 <__aeabi_dsub+0x350>
 80027e2:	08d7      	lsrs	r7, r2, #3
 80027e4:	0749      	lsls	r1, r1, #29
 80027e6:	2302      	movs	r3, #2
 80027e8:	430f      	orrs	r7, r1
 80027ea:	092d      	lsrs	r5, r5, #4
 80027ec:	e6a0      	b.n	8002530 <__aeabi_dsub+0x4b0>
 80027ee:	0007      	movs	r7, r0
 80027f0:	e542      	b.n	8002278 <__aeabi_dsub+0x1f8>
 80027f2:	465b      	mov	r3, fp
 80027f4:	2601      	movs	r6, #1
 80027f6:	075f      	lsls	r7, r3, #29
 80027f8:	08dd      	lsrs	r5, r3, #3
 80027fa:	4663      	mov	r3, ip
 80027fc:	08d2      	lsrs	r2, r2, #3
 80027fe:	4317      	orrs	r7, r2
 8002800:	401e      	ands	r6, r3
 8002802:	e539      	b.n	8002278 <__aeabi_dsub+0x1f8>
 8002804:	465b      	mov	r3, fp
 8002806:	08d2      	lsrs	r2, r2, #3
 8002808:	075f      	lsls	r7, r3, #29
 800280a:	4317      	orrs	r7, r2
 800280c:	08dd      	lsrs	r5, r3, #3
 800280e:	e533      	b.n	8002278 <__aeabi_dsub+0x1f8>
 8002810:	4a1e      	ldr	r2, [pc, #120]	@ (800288c <__aeabi_dsub+0x80c>)
 8002812:	08db      	lsrs	r3, r3, #3
 8002814:	4022      	ands	r2, r4
 8002816:	0757      	lsls	r7, r2, #29
 8002818:	0252      	lsls	r2, r2, #9
 800281a:	2501      	movs	r5, #1
 800281c:	431f      	orrs	r7, r3
 800281e:	0b14      	lsrs	r4, r2, #12
 8002820:	e5c2      	b.n	80023a8 <__aeabi_dsub+0x328>
 8002822:	000e      	movs	r6, r1
 8002824:	2001      	movs	r0, #1
 8002826:	e65f      	b.n	80024e8 <__aeabi_dsub+0x468>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <__aeabi_dsub+0x7c8>
 800282c:	464b      	mov	r3, r9
 800282e:	1b5b      	subs	r3, r3, r5
 8002830:	469c      	mov	ip, r3
 8002832:	2d00      	cmp	r5, #0
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x7b8>
 8002836:	e548      	b.n	80022ca <__aeabi_dsub+0x24a>
 8002838:	2701      	movs	r7, #1
 800283a:	2b38      	cmp	r3, #56	@ 0x38
 800283c:	dd00      	ble.n	8002840 <__aeabi_dsub+0x7c0>
 800283e:	e566      	b.n	800230e <__aeabi_dsub+0x28e>
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	431c      	orrs	r4, r3
 8002846:	e550      	b.n	80022ea <__aeabi_dsub+0x26a>
 8002848:	1c6b      	adds	r3, r5, #1
 800284a:	4d11      	ldr	r5, [pc, #68]	@ (8002890 <__aeabi_dsub+0x810>)
 800284c:	422b      	tst	r3, r5
 800284e:	d000      	beq.n	8002852 <__aeabi_dsub+0x7d2>
 8002850:	e673      	b.n	800253a <__aeabi_dsub+0x4ba>
 8002852:	4659      	mov	r1, fp
 8002854:	0023      	movs	r3, r4
 8002856:	4311      	orrs	r1, r2
 8002858:	468a      	mov	sl, r1
 800285a:	4303      	orrs	r3, r0
 800285c:	e600      	b.n	8002460 <__aeabi_dsub+0x3e0>
 800285e:	0767      	lsls	r7, r4, #29
 8002860:	08c0      	lsrs	r0, r0, #3
 8002862:	2300      	movs	r3, #0
 8002864:	4307      	orrs	r7, r0
 8002866:	08e5      	lsrs	r5, r4, #3
 8002868:	e662      	b.n	8002530 <__aeabi_dsub+0x4b0>
 800286a:	0764      	lsls	r4, r4, #29
 800286c:	08ff      	lsrs	r7, r7, #3
 800286e:	4327      	orrs	r7, r4
 8002870:	0905      	lsrs	r5, r0, #4
 8002872:	e65d      	b.n	8002530 <__aeabi_dsub+0x4b0>
 8002874:	08d2      	lsrs	r2, r2, #3
 8002876:	0749      	lsls	r1, r1, #29
 8002878:	4311      	orrs	r1, r2
 800287a:	000f      	movs	r7, r1
 800287c:	2302      	movs	r3, #2
 800287e:	092d      	lsrs	r5, r5, #4
 8002880:	e656      	b.n	8002530 <__aeabi_dsub+0x4b0>
 8002882:	0007      	movs	r7, r0
 8002884:	e5a4      	b.n	80023d0 <__aeabi_dsub+0x350>
 8002886:	0038      	movs	r0, r7
 8002888:	e48f      	b.n	80021aa <__aeabi_dsub+0x12a>
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	ff7fffff 	.word	0xff7fffff
 8002890:	000007fe 	.word	0x000007fe

08002894 <__aeabi_dcmpun>:
 8002894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002896:	46c6      	mov	lr, r8
 8002898:	031e      	lsls	r6, r3, #12
 800289a:	0b36      	lsrs	r6, r6, #12
 800289c:	46b0      	mov	r8, r6
 800289e:	4e0d      	ldr	r6, [pc, #52]	@ (80028d4 <__aeabi_dcmpun+0x40>)
 80028a0:	030c      	lsls	r4, r1, #12
 80028a2:	004d      	lsls	r5, r1, #1
 80028a4:	005f      	lsls	r7, r3, #1
 80028a6:	b500      	push	{lr}
 80028a8:	0b24      	lsrs	r4, r4, #12
 80028aa:	0d6d      	lsrs	r5, r5, #21
 80028ac:	0d7f      	lsrs	r7, r7, #21
 80028ae:	42b5      	cmp	r5, r6
 80028b0:	d00b      	beq.n	80028ca <__aeabi_dcmpun+0x36>
 80028b2:	4908      	ldr	r1, [pc, #32]	@ (80028d4 <__aeabi_dcmpun+0x40>)
 80028b4:	2000      	movs	r0, #0
 80028b6:	428f      	cmp	r7, r1
 80028b8:	d104      	bne.n	80028c4 <__aeabi_dcmpun+0x30>
 80028ba:	4646      	mov	r6, r8
 80028bc:	4316      	orrs	r6, r2
 80028be:	0030      	movs	r0, r6
 80028c0:	1e43      	subs	r3, r0, #1
 80028c2:	4198      	sbcs	r0, r3
 80028c4:	bc80      	pop	{r7}
 80028c6:	46b8      	mov	r8, r7
 80028c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ca:	4304      	orrs	r4, r0
 80028cc:	2001      	movs	r0, #1
 80028ce:	2c00      	cmp	r4, #0
 80028d0:	d1f8      	bne.n	80028c4 <__aeabi_dcmpun+0x30>
 80028d2:	e7ee      	b.n	80028b2 <__aeabi_dcmpun+0x1e>
 80028d4:	000007ff 	.word	0x000007ff

080028d8 <__aeabi_d2iz>:
 80028d8:	000b      	movs	r3, r1
 80028da:	0002      	movs	r2, r0
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4d16      	ldr	r5, [pc, #88]	@ (8002938 <__aeabi_d2iz+0x60>)
 80028e0:	030c      	lsls	r4, r1, #12
 80028e2:	b082      	sub	sp, #8
 80028e4:	0049      	lsls	r1, r1, #1
 80028e6:	2000      	movs	r0, #0
 80028e8:	9200      	str	r2, [sp, #0]
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	0b24      	lsrs	r4, r4, #12
 80028ee:	0d49      	lsrs	r1, r1, #21
 80028f0:	0fde      	lsrs	r6, r3, #31
 80028f2:	42a9      	cmp	r1, r5
 80028f4:	dd04      	ble.n	8002900 <__aeabi_d2iz+0x28>
 80028f6:	4811      	ldr	r0, [pc, #68]	@ (800293c <__aeabi_d2iz+0x64>)
 80028f8:	4281      	cmp	r1, r0
 80028fa:	dd03      	ble.n	8002904 <__aeabi_d2iz+0x2c>
 80028fc:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <__aeabi_d2iz+0x68>)
 80028fe:	18f0      	adds	r0, r6, r3
 8002900:	b002      	add	sp, #8
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	2080      	movs	r0, #128	@ 0x80
 8002906:	0340      	lsls	r0, r0, #13
 8002908:	4320      	orrs	r0, r4
 800290a:	4c0e      	ldr	r4, [pc, #56]	@ (8002944 <__aeabi_d2iz+0x6c>)
 800290c:	1a64      	subs	r4, r4, r1
 800290e:	2c1f      	cmp	r4, #31
 8002910:	dd08      	ble.n	8002924 <__aeabi_d2iz+0x4c>
 8002912:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <__aeabi_d2iz+0x70>)
 8002914:	1a5b      	subs	r3, r3, r1
 8002916:	40d8      	lsrs	r0, r3
 8002918:	0003      	movs	r3, r0
 800291a:	4258      	negs	r0, r3
 800291c:	2e00      	cmp	r6, #0
 800291e:	d1ef      	bne.n	8002900 <__aeabi_d2iz+0x28>
 8002920:	0018      	movs	r0, r3
 8002922:	e7ed      	b.n	8002900 <__aeabi_d2iz+0x28>
 8002924:	4b09      	ldr	r3, [pc, #36]	@ (800294c <__aeabi_d2iz+0x74>)
 8002926:	9a00      	ldr	r2, [sp, #0]
 8002928:	469c      	mov	ip, r3
 800292a:	0003      	movs	r3, r0
 800292c:	4461      	add	r1, ip
 800292e:	408b      	lsls	r3, r1
 8002930:	40e2      	lsrs	r2, r4
 8002932:	4313      	orrs	r3, r2
 8002934:	e7f1      	b.n	800291a <__aeabi_d2iz+0x42>
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	000003fe 	.word	0x000003fe
 800293c:	0000041d 	.word	0x0000041d
 8002940:	7fffffff 	.word	0x7fffffff
 8002944:	00000433 	.word	0x00000433
 8002948:	00000413 	.word	0x00000413
 800294c:	fffffbed 	.word	0xfffffbed

08002950 <__aeabi_i2d>:
 8002950:	b570      	push	{r4, r5, r6, lr}
 8002952:	2800      	cmp	r0, #0
 8002954:	d016      	beq.n	8002984 <__aeabi_i2d+0x34>
 8002956:	17c3      	asrs	r3, r0, #31
 8002958:	18c5      	adds	r5, r0, r3
 800295a:	405d      	eors	r5, r3
 800295c:	0fc4      	lsrs	r4, r0, #31
 800295e:	0028      	movs	r0, r5
 8002960:	f000 f912 	bl	8002b88 <__clzsi2>
 8002964:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <__aeabi_i2d+0x58>)
 8002966:	1a1b      	subs	r3, r3, r0
 8002968:	055b      	lsls	r3, r3, #21
 800296a:	0d5b      	lsrs	r3, r3, #21
 800296c:	280a      	cmp	r0, #10
 800296e:	dc14      	bgt.n	800299a <__aeabi_i2d+0x4a>
 8002970:	0002      	movs	r2, r0
 8002972:	002e      	movs	r6, r5
 8002974:	3215      	adds	r2, #21
 8002976:	4096      	lsls	r6, r2
 8002978:	220b      	movs	r2, #11
 800297a:	1a12      	subs	r2, r2, r0
 800297c:	40d5      	lsrs	r5, r2
 800297e:	032d      	lsls	r5, r5, #12
 8002980:	0b2d      	lsrs	r5, r5, #12
 8002982:	e003      	b.n	800298c <__aeabi_i2d+0x3c>
 8002984:	2400      	movs	r4, #0
 8002986:	2300      	movs	r3, #0
 8002988:	2500      	movs	r5, #0
 800298a:	2600      	movs	r6, #0
 800298c:	051b      	lsls	r3, r3, #20
 800298e:	432b      	orrs	r3, r5
 8002990:	07e4      	lsls	r4, r4, #31
 8002992:	4323      	orrs	r3, r4
 8002994:	0030      	movs	r0, r6
 8002996:	0019      	movs	r1, r3
 8002998:	bd70      	pop	{r4, r5, r6, pc}
 800299a:	380b      	subs	r0, #11
 800299c:	4085      	lsls	r5, r0
 800299e:	032d      	lsls	r5, r5, #12
 80029a0:	2600      	movs	r6, #0
 80029a2:	0b2d      	lsrs	r5, r5, #12
 80029a4:	e7f2      	b.n	800298c <__aeabi_i2d+0x3c>
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	0000041e 	.word	0x0000041e

080029ac <__aeabi_ui2d>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	1e04      	subs	r4, r0, #0
 80029b0:	d010      	beq.n	80029d4 <__aeabi_ui2d+0x28>
 80029b2:	f000 f8e9 	bl	8002b88 <__clzsi2>
 80029b6:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <__aeabi_ui2d+0x44>)
 80029b8:	1a1b      	subs	r3, r3, r0
 80029ba:	055b      	lsls	r3, r3, #21
 80029bc:	0d5b      	lsrs	r3, r3, #21
 80029be:	280a      	cmp	r0, #10
 80029c0:	dc0f      	bgt.n	80029e2 <__aeabi_ui2d+0x36>
 80029c2:	220b      	movs	r2, #11
 80029c4:	0021      	movs	r1, r4
 80029c6:	1a12      	subs	r2, r2, r0
 80029c8:	40d1      	lsrs	r1, r2
 80029ca:	3015      	adds	r0, #21
 80029cc:	030a      	lsls	r2, r1, #12
 80029ce:	4084      	lsls	r4, r0
 80029d0:	0b12      	lsrs	r2, r2, #12
 80029d2:	e001      	b.n	80029d8 <__aeabi_ui2d+0x2c>
 80029d4:	2300      	movs	r3, #0
 80029d6:	2200      	movs	r2, #0
 80029d8:	051b      	lsls	r3, r3, #20
 80029da:	4313      	orrs	r3, r2
 80029dc:	0020      	movs	r0, r4
 80029de:	0019      	movs	r1, r3
 80029e0:	bd10      	pop	{r4, pc}
 80029e2:	0022      	movs	r2, r4
 80029e4:	380b      	subs	r0, #11
 80029e6:	4082      	lsls	r2, r0
 80029e8:	0312      	lsls	r2, r2, #12
 80029ea:	2400      	movs	r4, #0
 80029ec:	0b12      	lsrs	r2, r2, #12
 80029ee:	e7f3      	b.n	80029d8 <__aeabi_ui2d+0x2c>
 80029f0:	0000041e 	.word	0x0000041e

080029f4 <__aeabi_f2d>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	0242      	lsls	r2, r0, #9
 80029f8:	0043      	lsls	r3, r0, #1
 80029fa:	0fc4      	lsrs	r4, r0, #31
 80029fc:	20fe      	movs	r0, #254	@ 0xfe
 80029fe:	0e1b      	lsrs	r3, r3, #24
 8002a00:	1c59      	adds	r1, r3, #1
 8002a02:	0a55      	lsrs	r5, r2, #9
 8002a04:	4208      	tst	r0, r1
 8002a06:	d00c      	beq.n	8002a22 <__aeabi_f2d+0x2e>
 8002a08:	21e0      	movs	r1, #224	@ 0xe0
 8002a0a:	0089      	lsls	r1, r1, #2
 8002a0c:	468c      	mov	ip, r1
 8002a0e:	076d      	lsls	r5, r5, #29
 8002a10:	0b12      	lsrs	r2, r2, #12
 8002a12:	4463      	add	r3, ip
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4313      	orrs	r3, r2
 8002a18:	07e4      	lsls	r4, r4, #31
 8002a1a:	4323      	orrs	r3, r4
 8002a1c:	0028      	movs	r0, r5
 8002a1e:	0019      	movs	r1, r3
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d114      	bne.n	8002a50 <__aeabi_f2d+0x5c>
 8002a26:	2d00      	cmp	r5, #0
 8002a28:	d01b      	beq.n	8002a62 <__aeabi_f2d+0x6e>
 8002a2a:	0028      	movs	r0, r5
 8002a2c:	f000 f8ac 	bl	8002b88 <__clzsi2>
 8002a30:	280a      	cmp	r0, #10
 8002a32:	dc1c      	bgt.n	8002a6e <__aeabi_f2d+0x7a>
 8002a34:	230b      	movs	r3, #11
 8002a36:	002a      	movs	r2, r5
 8002a38:	1a1b      	subs	r3, r3, r0
 8002a3a:	40da      	lsrs	r2, r3
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	3315      	adds	r3, #21
 8002a40:	409d      	lsls	r5, r3
 8002a42:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <__aeabi_f2d+0x88>)
 8002a44:	0312      	lsls	r2, r2, #12
 8002a46:	1a1b      	subs	r3, r3, r0
 8002a48:	055b      	lsls	r3, r3, #21
 8002a4a:	0b12      	lsrs	r2, r2, #12
 8002a4c:	0d5b      	lsrs	r3, r3, #21
 8002a4e:	e7e1      	b.n	8002a14 <__aeabi_f2d+0x20>
 8002a50:	2d00      	cmp	r5, #0
 8002a52:	d009      	beq.n	8002a68 <__aeabi_f2d+0x74>
 8002a54:	0b13      	lsrs	r3, r2, #12
 8002a56:	2280      	movs	r2, #128	@ 0x80
 8002a58:	0312      	lsls	r2, r2, #12
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	076d      	lsls	r5, r5, #29
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <__aeabi_f2d+0x8c>)
 8002a60:	e7d8      	b.n	8002a14 <__aeabi_f2d+0x20>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2200      	movs	r2, #0
 8002a66:	e7d5      	b.n	8002a14 <__aeabi_f2d+0x20>
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <__aeabi_f2d+0x8c>)
 8002a6c:	e7d2      	b.n	8002a14 <__aeabi_f2d+0x20>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	002a      	movs	r2, r5
 8002a72:	3b0b      	subs	r3, #11
 8002a74:	409a      	lsls	r2, r3
 8002a76:	2500      	movs	r5, #0
 8002a78:	e7e3      	b.n	8002a42 <__aeabi_f2d+0x4e>
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	00000389 	.word	0x00000389
 8002a80:	000007ff 	.word	0x000007ff

08002a84 <__aeabi_d2f>:
 8002a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a86:	004b      	lsls	r3, r1, #1
 8002a88:	030f      	lsls	r7, r1, #12
 8002a8a:	0d5b      	lsrs	r3, r3, #21
 8002a8c:	4c3a      	ldr	r4, [pc, #232]	@ (8002b78 <__aeabi_d2f+0xf4>)
 8002a8e:	0f45      	lsrs	r5, r0, #29
 8002a90:	b083      	sub	sp, #12
 8002a92:	0a7f      	lsrs	r7, r7, #9
 8002a94:	1c5e      	adds	r6, r3, #1
 8002a96:	432f      	orrs	r7, r5
 8002a98:	9000      	str	r0, [sp, #0]
 8002a9a:	9101      	str	r1, [sp, #4]
 8002a9c:	0fca      	lsrs	r2, r1, #31
 8002a9e:	00c5      	lsls	r5, r0, #3
 8002aa0:	4226      	tst	r6, r4
 8002aa2:	d00b      	beq.n	8002abc <__aeabi_d2f+0x38>
 8002aa4:	4935      	ldr	r1, [pc, #212]	@ (8002b7c <__aeabi_d2f+0xf8>)
 8002aa6:	185c      	adds	r4, r3, r1
 8002aa8:	2cfe      	cmp	r4, #254	@ 0xfe
 8002aaa:	dd13      	ble.n	8002ad4 <__aeabi_d2f+0x50>
 8002aac:	20ff      	movs	r0, #255	@ 0xff
 8002aae:	2300      	movs	r3, #0
 8002ab0:	05c0      	lsls	r0, r0, #23
 8002ab2:	4318      	orrs	r0, r3
 8002ab4:	07d2      	lsls	r2, r2, #31
 8002ab6:	4310      	orrs	r0, r2
 8002ab8:	b003      	add	sp, #12
 8002aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002abc:	433d      	orrs	r5, r7
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <__aeabi_d2f+0x42>
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	e7f4      	b.n	8002ab0 <__aeabi_d2f+0x2c>
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	d0f0      	beq.n	8002aac <__aeabi_d2f+0x28>
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	03db      	lsls	r3, r3, #15
 8002ace:	20ff      	movs	r0, #255	@ 0xff
 8002ad0:	433b      	orrs	r3, r7
 8002ad2:	e7ed      	b.n	8002ab0 <__aeabi_d2f+0x2c>
 8002ad4:	2c00      	cmp	r4, #0
 8002ad6:	dd0c      	ble.n	8002af2 <__aeabi_d2f+0x6e>
 8002ad8:	9b00      	ldr	r3, [sp, #0]
 8002ada:	00ff      	lsls	r7, r7, #3
 8002adc:	019b      	lsls	r3, r3, #6
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	4183      	sbcs	r3, r0
 8002ae2:	0f69      	lsrs	r1, r5, #29
 8002ae4:	433b      	orrs	r3, r7
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	0759      	lsls	r1, r3, #29
 8002aea:	d127      	bne.n	8002b3c <__aeabi_d2f+0xb8>
 8002aec:	08db      	lsrs	r3, r3, #3
 8002aee:	b2e0      	uxtb	r0, r4
 8002af0:	e7de      	b.n	8002ab0 <__aeabi_d2f+0x2c>
 8002af2:	0021      	movs	r1, r4
 8002af4:	3117      	adds	r1, #23
 8002af6:	db31      	blt.n	8002b5c <__aeabi_d2f+0xd8>
 8002af8:	2180      	movs	r1, #128	@ 0x80
 8002afa:	201e      	movs	r0, #30
 8002afc:	0409      	lsls	r1, r1, #16
 8002afe:	4339      	orrs	r1, r7
 8002b00:	1b00      	subs	r0, r0, r4
 8002b02:	281f      	cmp	r0, #31
 8002b04:	dd2d      	ble.n	8002b62 <__aeabi_d2f+0xde>
 8002b06:	2602      	movs	r6, #2
 8002b08:	4276      	negs	r6, r6
 8002b0a:	1b34      	subs	r4, r6, r4
 8002b0c:	000e      	movs	r6, r1
 8002b0e:	40e6      	lsrs	r6, r4
 8002b10:	0034      	movs	r4, r6
 8002b12:	2820      	cmp	r0, #32
 8002b14:	d004      	beq.n	8002b20 <__aeabi_d2f+0x9c>
 8002b16:	481a      	ldr	r0, [pc, #104]	@ (8002b80 <__aeabi_d2f+0xfc>)
 8002b18:	4684      	mov	ip, r0
 8002b1a:	4463      	add	r3, ip
 8002b1c:	4099      	lsls	r1, r3
 8002b1e:	430d      	orrs	r5, r1
 8002b20:	002b      	movs	r3, r5
 8002b22:	1e59      	subs	r1, r3, #1
 8002b24:	418b      	sbcs	r3, r1
 8002b26:	4323      	orrs	r3, r4
 8002b28:	0759      	lsls	r1, r3, #29
 8002b2a:	d003      	beq.n	8002b34 <__aeabi_d2f+0xb0>
 8002b2c:	210f      	movs	r1, #15
 8002b2e:	4019      	ands	r1, r3
 8002b30:	2904      	cmp	r1, #4
 8002b32:	d10b      	bne.n	8002b4c <__aeabi_d2f+0xc8>
 8002b34:	019b      	lsls	r3, r3, #6
 8002b36:	2000      	movs	r0, #0
 8002b38:	0a5b      	lsrs	r3, r3, #9
 8002b3a:	e7b9      	b.n	8002ab0 <__aeabi_d2f+0x2c>
 8002b3c:	210f      	movs	r1, #15
 8002b3e:	4019      	ands	r1, r3
 8002b40:	2904      	cmp	r1, #4
 8002b42:	d104      	bne.n	8002b4e <__aeabi_d2f+0xca>
 8002b44:	019b      	lsls	r3, r3, #6
 8002b46:	0a5b      	lsrs	r3, r3, #9
 8002b48:	b2e0      	uxtb	r0, r4
 8002b4a:	e7b1      	b.n	8002ab0 <__aeabi_d2f+0x2c>
 8002b4c:	2400      	movs	r4, #0
 8002b4e:	3304      	adds	r3, #4
 8002b50:	0159      	lsls	r1, r3, #5
 8002b52:	d5f7      	bpl.n	8002b44 <__aeabi_d2f+0xc0>
 8002b54:	3401      	adds	r4, #1
 8002b56:	2300      	movs	r3, #0
 8002b58:	b2e0      	uxtb	r0, r4
 8002b5a:	e7a9      	b.n	8002ab0 <__aeabi_d2f+0x2c>
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e7a6      	b.n	8002ab0 <__aeabi_d2f+0x2c>
 8002b62:	4c08      	ldr	r4, [pc, #32]	@ (8002b84 <__aeabi_d2f+0x100>)
 8002b64:	191c      	adds	r4, r3, r4
 8002b66:	002b      	movs	r3, r5
 8002b68:	40a5      	lsls	r5, r4
 8002b6a:	40c3      	lsrs	r3, r0
 8002b6c:	40a1      	lsls	r1, r4
 8002b6e:	1e68      	subs	r0, r5, #1
 8002b70:	4185      	sbcs	r5, r0
 8002b72:	4329      	orrs	r1, r5
 8002b74:	430b      	orrs	r3, r1
 8002b76:	e7d7      	b.n	8002b28 <__aeabi_d2f+0xa4>
 8002b78:	000007fe 	.word	0x000007fe
 8002b7c:	fffffc80 	.word	0xfffffc80
 8002b80:	fffffca2 	.word	0xfffffca2
 8002b84:	fffffc82 	.word	0xfffffc82

08002b88 <__clzsi2>:
 8002b88:	211c      	movs	r1, #28
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	4298      	cmp	r0, r3
 8002b90:	d301      	bcc.n	8002b96 <__clzsi2+0xe>
 8002b92:	0c00      	lsrs	r0, r0, #16
 8002b94:	3910      	subs	r1, #16
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	4298      	cmp	r0, r3
 8002b9a:	d301      	bcc.n	8002ba0 <__clzsi2+0x18>
 8002b9c:	0a00      	lsrs	r0, r0, #8
 8002b9e:	3908      	subs	r1, #8
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	4298      	cmp	r0, r3
 8002ba4:	d301      	bcc.n	8002baa <__clzsi2+0x22>
 8002ba6:	0900      	lsrs	r0, r0, #4
 8002ba8:	3904      	subs	r1, #4
 8002baa:	a202      	add	r2, pc, #8	@ (adr r2, 8002bb4 <__clzsi2+0x2c>)
 8002bac:	5c10      	ldrb	r0, [r2, r0]
 8002bae:	1840      	adds	r0, r0, r1
 8002bb0:	4770      	bx	lr
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	02020304 	.word	0x02020304
 8002bb8:	01010101 	.word	0x01010101
	...

08002bc4 <ProcessCANMessage>:
      0x18F101F4, 0x18F110F4, 0x18F1E2F4, 0x18FF28F4, 0x18FFA2F4, //JBD_BMS_ID
  };

  // Function to process and store the received CAN message
  void ProcessCANMessage(FDCAN_RxHeaderTypeDef *RxHeader, uint8_t *RxData)
  {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
      for (int i = 0; i < TOTAL_IDS; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e020      	b.n	8002c16 <ProcessCANMessage+0x52>
      {
          if ((RxHeader->Identifier == BMS_CAN_IDS[i]) &&
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <ProcessCANMessage+0x64>)
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	0089      	lsls	r1, r1, #2
 8002bde:	58cb      	ldr	r3, [r1, r3]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d115      	bne.n	8002c10 <ProcessCANMessage+0x4c>
              (RxHeader->IdType == FDCAN_EXTENDED_ID) &&
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
          if ((RxHeader->Identifier == BMS_CAN_IDS[i]) &&
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	05db      	lsls	r3, r3, #23
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d10f      	bne.n	8002c10 <ProcessCANMessage+0x4c>
              (RxHeader->DataLength == FDCAN_DLC_BYTES_8))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68da      	ldr	r2, [r3, #12]
              (RxHeader->IdType == FDCAN_EXTENDED_ID) &&
 8002bf4:	2380      	movs	r3, #128	@ 0x80
 8002bf6:	031b      	lsls	r3, r3, #12
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d109      	bne.n	8002c10 <ProcessCANMessage+0x4c>
          {
            //  memcpy(canIdMap[i].dataPtr, RxData, 8);  // Copy data into the corresponding array

              switchfuntion(BMS_CAN_IDS[i], RxData);
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <ProcessCANMessage+0x64>)
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	58d3      	ldr	r3, [r2, r3]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	0011      	movs	r1, r2
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 f80f 	bl	8002c2c <switchfuntion>
              break;  // Stop searching once the matching ID is found
 8002c0e:	e006      	b.n	8002c1e <ProcessCANMessage+0x5a>
      for (int i = 0; i < TOTAL_IDS; i++)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b31      	cmp	r3, #49	@ 0x31
 8002c1a:	dddb      	ble.n	8002bd4 <ProcessCANMessage+0x10>
          }
      }
  }
 8002c1c:	46c0      	nop			@ (mov r8, r8)
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b004      	add	sp, #16
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	080098e0 	.word	0x080098e0

08002c2c <switchfuntion>:
  /* 280225                                                           */
  void switchfuntion(uint32_t can_id, uint8_t *RxData) {
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]


      switch (can_id) {
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4ae3      	ldr	r2, [pc, #908]	@ (8002fc8 <switchfuntion+0x39c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d100      	bne.n	8002c40 <switchfuntion+0x14>
 8002c3e:	e2e3      	b.n	8003208 <switchfuntion+0x5dc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4ae1      	ldr	r2, [pc, #900]	@ (8002fc8 <switchfuntion+0x39c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d900      	bls.n	8002c4a <switchfuntion+0x1e>
 8002c48:	e2e5      	b.n	8003216 <switchfuntion+0x5ea>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4adf      	ldr	r2, [pc, #892]	@ (8002fcc <switchfuntion+0x3a0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d100      	bne.n	8002c54 <switchfuntion+0x28>
 8002c52:	e292      	b.n	800317a <switchfuntion+0x54e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4add      	ldr	r2, [pc, #884]	@ (8002fcc <switchfuntion+0x3a0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d900      	bls.n	8002c5e <switchfuntion+0x32>
 8002c5c:	e2db      	b.n	8003216 <switchfuntion+0x5ea>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4adb      	ldr	r2, [pc, #876]	@ (8002fd0 <switchfuntion+0x3a4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d100      	bne.n	8002c68 <switchfuntion+0x3c>
 8002c66:	e27e      	b.n	8003166 <switchfuntion+0x53a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4ad9      	ldr	r2, [pc, #868]	@ (8002fd0 <switchfuntion+0x3a4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d900      	bls.n	8002c72 <switchfuntion+0x46>
 8002c70:	e2d1      	b.n	8003216 <switchfuntion+0x5ea>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4ad7      	ldr	r2, [pc, #860]	@ (8002fd4 <switchfuntion+0x3a8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d100      	bne.n	8002c7c <switchfuntion+0x50>
 8002c7a:	e246      	b.n	800310a <switchfuntion+0x4de>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4ad5      	ldr	r2, [pc, #852]	@ (8002fd4 <switchfuntion+0x3a8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d900      	bls.n	8002c86 <switchfuntion+0x5a>
 8002c84:	e2c7      	b.n	8003216 <switchfuntion+0x5ea>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4ad3      	ldr	r2, [pc, #844]	@ (8002fd8 <switchfuntion+0x3ac>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d100      	bne.n	8002c90 <switchfuntion+0x64>
 8002c8e:	e22d      	b.n	80030ec <switchfuntion+0x4c0>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4ad1      	ldr	r2, [pc, #836]	@ (8002fd8 <switchfuntion+0x3ac>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d900      	bls.n	8002c9a <switchfuntion+0x6e>
 8002c98:	e2bd      	b.n	8003216 <switchfuntion+0x5ea>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4acf      	ldr	r2, [pc, #828]	@ (8002fdc <switchfuntion+0x3b0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d100      	bne.n	8002ca4 <switchfuntion+0x78>
 8002ca2:	e1f3      	b.n	800308c <switchfuntion+0x460>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4acd      	ldr	r2, [pc, #820]	@ (8002fdc <switchfuntion+0x3b0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d900      	bls.n	8002cae <switchfuntion+0x82>
 8002cac:	e2b3      	b.n	8003216 <switchfuntion+0x5ea>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4acb      	ldr	r2, [pc, #812]	@ (8002fe0 <switchfuntion+0x3b4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d100      	bne.n	8002cb8 <switchfuntion+0x8c>
 8002cb6:	e157      	b.n	8002f68 <switchfuntion+0x33c>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4ac9      	ldr	r2, [pc, #804]	@ (8002fe0 <switchfuntion+0x3b4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d900      	bls.n	8002cc2 <switchfuntion+0x96>
 8002cc0:	e2a9      	b.n	8003216 <switchfuntion+0x5ea>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4ac7      	ldr	r2, [pc, #796]	@ (8002fe4 <switchfuntion+0x3b8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d100      	bne.n	8002ccc <switchfuntion+0xa0>
 8002cca:	e0f5      	b.n	8002eb8 <switchfuntion+0x28c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4ac5      	ldr	r2, [pc, #788]	@ (8002fe4 <switchfuntion+0x3b8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d900      	bls.n	8002cd6 <switchfuntion+0xaa>
 8002cd4:	e29f      	b.n	8003216 <switchfuntion+0x5ea>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4ac3      	ldr	r2, [pc, #780]	@ (8002fe8 <switchfuntion+0x3bc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d005      	beq.n	8002cea <switchfuntion+0xbe>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4ac2      	ldr	r2, [pc, #776]	@ (8002fec <switchfuntion+0x3c0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d100      	bne.n	8002ce8 <switchfuntion+0xbc>
 8002ce6:	e08c      	b.n	8002e02 <switchfuntion+0x1d6>
          {
        	  percentage_remaining_chg_capacity_soc = RxData[4];
        	  //byte 5 -7 reserved
          }  break;
      }
  }
 8002ce8:	e295      	b.n	8003216 <switchfuntion+0x5ea>
              data10 = RxData[0]<<8;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	4bbf      	ldr	r3, [pc, #764]	@ (8002ff0 <switchfuntion+0x3c4>)
 8002cf4:	801a      	strh	r2, [r3, #0]
              data11 = RxData[1];
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	001a      	movs	r2, r3
 8002cfe:	4bbd      	ldr	r3, [pc, #756]	@ (8002ff4 <switchfuntion+0x3c8>)
 8002d00:	801a      	strh	r2, [r3, #0]
              max_cell_voltage = (data10+data11)*0.001;
 8002d02:	4bbb      	ldr	r3, [pc, #748]	@ (8002ff0 <switchfuntion+0x3c4>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	001a      	movs	r2, r3
 8002d08:	4bba      	ldr	r3, [pc, #744]	@ (8002ff4 <switchfuntion+0x3c8>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	18d3      	adds	r3, r2, r3
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7ff fe1e 	bl	8002950 <__aeabi_i2d>
 8002d14:	4ab8      	ldr	r2, [pc, #736]	@ (8002ff8 <switchfuntion+0x3cc>)
 8002d16:	4bb9      	ldr	r3, [pc, #740]	@ (8002ffc <switchfuntion+0x3d0>)
 8002d18:	f7fe fecc 	bl	8001ab4 <__aeabi_dmul>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	000b      	movs	r3, r1
 8002d20:	0010      	movs	r0, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	f7ff feae 	bl	8002a84 <__aeabi_d2f>
 8002d28:	1c02      	adds	r2, r0, #0
 8002d2a:	4bb5      	ldr	r3, [pc, #724]	@ (8003000 <switchfuntion+0x3d4>)
 8002d2c:	601a      	str	r2, [r3, #0]
              temp = RxData[2] << 8;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	3302      	adds	r3, #2
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	001a      	movs	r2, r3
 8002d36:	240c      	movs	r4, #12
 8002d38:	193b      	adds	r3, r7, r4
 8002d3a:	0212      	lsls	r2, r2, #8
 8002d3c:	801a      	strh	r2, [r3, #0]
              temp |= RxData[3];
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	3303      	adds	r3, #3
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	0019      	movs	r1, r3
 8002d46:	193b      	adds	r3, r7, r4
 8002d48:	193a      	adds	r2, r7, r4
 8002d4a:	8812      	ldrh	r2, [r2, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	801a      	strh	r2, [r3, #0]
              min_cell_voltage = temp * 0.001;  // Convert to volts
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff fdfb 	bl	8002950 <__aeabi_i2d>
 8002d5a:	4aa7      	ldr	r2, [pc, #668]	@ (8002ff8 <switchfuntion+0x3cc>)
 8002d5c:	4ba7      	ldr	r3, [pc, #668]	@ (8002ffc <switchfuntion+0x3d0>)
 8002d5e:	f7fe fea9 	bl	8001ab4 <__aeabi_dmul>
 8002d62:	0002      	movs	r2, r0
 8002d64:	000b      	movs	r3, r1
 8002d66:	0010      	movs	r0, r2
 8002d68:	0019      	movs	r1, r3
 8002d6a:	f7ff fe8b 	bl	8002a84 <__aeabi_d2f>
 8002d6e:	1c02      	adds	r2, r0, #0
 8002d70:	4ba4      	ldr	r3, [pc, #656]	@ (8003004 <switchfuntion+0x3d8>)
 8002d72:	601a      	str	r2, [r3, #0]
              temp = RxData[4];
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	3304      	adds	r3, #4
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	801a      	strh	r2, [r3, #0]
              soc = (temp * 0.4);  // Example scaling factor
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff fde4 	bl	8002950 <__aeabi_i2d>
 8002d88:	4a9f      	ldr	r2, [pc, #636]	@ (8003008 <switchfuntion+0x3dc>)
 8002d8a:	4ba0      	ldr	r3, [pc, #640]	@ (800300c <switchfuntion+0x3e0>)
 8002d8c:	f7fe fe92 	bl	8001ab4 <__aeabi_dmul>
 8002d90:	0002      	movs	r2, r0
 8002d92:	000b      	movs	r3, r1
 8002d94:	0010      	movs	r0, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	f7ff fe74 	bl	8002a84 <__aeabi_d2f>
 8002d9c:	1c02      	adds	r2, r0, #0
 8002d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8003010 <switchfuntion+0x3e4>)
 8002da0:	601a      	str	r2, [r3, #0]
              temp = RxData[5];
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	3305      	adds	r3, #5
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	801a      	strh	r2, [r3, #0]
              max_tempbms = temp;  // Assuming a 1:1 scale
 8002dac:	193b      	adds	r3, r7, r4
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fd fe39 	bl	8000a28 <__aeabi_ui2f>
 8002db6:	1c02      	adds	r2, r0, #0
 8002db8:	4b96      	ldr	r3, [pc, #600]	@ (8003014 <switchfuntion+0x3e8>)
 8002dba:	601a      	str	r2, [r3, #0]
              temp = RxData[6] << 8;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	3306      	adds	r3, #6
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	001a      	movs	r2, r3
 8002dc4:	193b      	adds	r3, r7, r4
 8002dc6:	0212      	lsls	r2, r2, #8
 8002dc8:	801a      	strh	r2, [r3, #0]
              temp |= RxData[7];
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	3307      	adds	r3, #7
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	193b      	adds	r3, r7, r4
 8002dd4:	193a      	adds	r2, r7, r4
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	801a      	strh	r2, [r3, #0]
              total_battery_voltage = temp * 0.1;  // Example scaling factor //57.6   chg o/p 57.4+-1
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff fdb5 	bl	8002950 <__aeabi_i2d>
 8002de6:	4a88      	ldr	r2, [pc, #544]	@ (8003008 <switchfuntion+0x3dc>)
 8002de8:	4b8b      	ldr	r3, [pc, #556]	@ (8003018 <switchfuntion+0x3ec>)
 8002dea:	f7fe fe63 	bl	8001ab4 <__aeabi_dmul>
 8002dee:	0002      	movs	r2, r0
 8002df0:	000b      	movs	r3, r1
 8002df2:	0010      	movs	r0, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	f7ff fe45 	bl	8002a84 <__aeabi_d2f>
 8002dfa:	1c02      	adds	r2, r0, #0
 8002dfc:	4b87      	ldr	r3, [pc, #540]	@ (800301c <switchfuntion+0x3f0>)
 8002dfe:	601a      	str	r2, [r3, #0]
          }break;
 8002e00:	e209      	b.n	8003216 <switchfuntion+0x5ea>
              data20 = RxData[0] << 8; // Shift first byte
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b85      	ldr	r3, [pc, #532]	@ (8003020 <switchfuntion+0x3f4>)
 8002e0c:	801a      	strh	r2, [r3, #0]
              data21 = RxData[1];      // Second byte
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	001a      	movs	r2, r3
 8002e16:	4b83      	ldr	r3, [pc, #524]	@ (8003024 <switchfuntion+0x3f8>)
 8002e18:	801a      	strh	r2, [r3, #0]
              max_allow_chg_terminal_voltage = (data20 + data21) * 0.1;
 8002e1a:	4b81      	ldr	r3, [pc, #516]	@ (8003020 <switchfuntion+0x3f4>)
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	001a      	movs	r2, r3
 8002e20:	4b80      	ldr	r3, [pc, #512]	@ (8003024 <switchfuntion+0x3f8>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	18d3      	adds	r3, r2, r3
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7ff fd92 	bl	8002950 <__aeabi_i2d>
 8002e2c:	4a76      	ldr	r2, [pc, #472]	@ (8003008 <switchfuntion+0x3dc>)
 8002e2e:	4b7a      	ldr	r3, [pc, #488]	@ (8003018 <switchfuntion+0x3ec>)
 8002e30:	f7fe fe40 	bl	8001ab4 <__aeabi_dmul>
 8002e34:	0002      	movs	r2, r0
 8002e36:	000b      	movs	r3, r1
 8002e38:	0010      	movs	r0, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	f7ff fe22 	bl	8002a84 <__aeabi_d2f>
 8002e40:	1c02      	adds	r2, r0, #0
 8002e42:	4b79      	ldr	r3, [pc, #484]	@ (8003028 <switchfuntion+0x3fc>)
 8002e44:	601a      	str	r2, [r3, #0]
              data22 = RxData[2] << 8;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3302      	adds	r3, #2
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	4b76      	ldr	r3, [pc, #472]	@ (800302c <switchfuntion+0x400>)
 8002e52:	801a      	strh	r2, [r3, #0]
              data23 = RxData[3];
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3303      	adds	r3, #3
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	001a      	movs	r2, r3
 8002e5c:	4b74      	ldr	r3, [pc, #464]	@ (8003030 <switchfuntion+0x404>)
 8002e5e:	801a      	strh	r2, [r3, #0]
              max_allow_chg_current = (data22 + data23) * 0.1;
 8002e60:	4b72      	ldr	r3, [pc, #456]	@ (800302c <switchfuntion+0x400>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	001a      	movs	r2, r3
 8002e66:	4b72      	ldr	r3, [pc, #456]	@ (8003030 <switchfuntion+0x404>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	18d3      	adds	r3, r2, r3
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff fd6f 	bl	8002950 <__aeabi_i2d>
 8002e72:	4a65      	ldr	r2, [pc, #404]	@ (8003008 <switchfuntion+0x3dc>)
 8002e74:	4b68      	ldr	r3, [pc, #416]	@ (8003018 <switchfuntion+0x3ec>)
 8002e76:	f7fe fe1d 	bl	8001ab4 <__aeabi_dmul>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	000b      	movs	r3, r1
 8002e7e:	0010      	movs	r0, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	f7ff fdff 	bl	8002a84 <__aeabi_d2f>
 8002e86:	1c02      	adds	r2, r0, #0
 8002e88:	4b6a      	ldr	r3, [pc, #424]	@ (8003034 <switchfuntion+0x408>)
 8002e8a:	601a      	str	r2, [r3, #0]
              data24 = RxData[4] << 8;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b68      	ldr	r3, [pc, #416]	@ (8003038 <switchfuntion+0x40c>)
 8002e98:	801a      	strh	r2, [r3, #0]
              data25 = RxData[5];
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	3305      	adds	r3, #5
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	4b66      	ldr	r3, [pc, #408]	@ (800303c <switchfuntion+0x410>)
 8002ea4:	801a      	strh	r2, [r3, #0]
              chg_start_stop = (data24 + data25); /* 0 start charging and 1 stop charging battery proteciton*/
 8002ea6:	4b64      	ldr	r3, [pc, #400]	@ (8003038 <switchfuntion+0x40c>)
 8002ea8:	881a      	ldrh	r2, [r3, #0]
 8002eaa:	4b64      	ldr	r3, [pc, #400]	@ (800303c <switchfuntion+0x410>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	18d3      	adds	r3, r2, r3
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	4b63      	ldr	r3, [pc, #396]	@ (8003040 <switchfuntion+0x414>)
 8002eb4:	801a      	strh	r2, [r3, #0]
          }break;
 8002eb6:	e1ae      	b.n	8003216 <switchfuntion+0x5ea>
        	  data30 = RxData[0];
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	4b61      	ldr	r3, [pc, #388]	@ (8003044 <switchfuntion+0x418>)
 8002ec0:	801a      	strh	r2, [r3, #0]
        	  max_cell_temp = data30; // unit degree c
 8002ec2:	4b60      	ldr	r3, [pc, #384]	@ (8003044 <switchfuntion+0x418>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f7fd fdae 	bl	8000a28 <__aeabi_ui2f>
 8002ecc:	1c02      	adds	r2, r0, #0
 8002ece:	4b5e      	ldr	r3, [pc, #376]	@ (8003048 <switchfuntion+0x41c>)
 8002ed0:	601a      	str	r2, [r3, #0]
        	  data31 = RxData[1];
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	001a      	movs	r2, r3
 8002eda:	4b5c      	ldr	r3, [pc, #368]	@ (800304c <switchfuntion+0x420>)
 8002edc:	801a      	strh	r2, [r3, #0]
        	  min_cell_temp = data31;
 8002ede:	4b5b      	ldr	r3, [pc, #364]	@ (800304c <switchfuntion+0x420>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7fd fda0 	bl	8000a28 <__aeabi_ui2f>
 8002ee8:	1c02      	adds	r2, r0, #0
 8002eea:	4b59      	ldr	r3, [pc, #356]	@ (8003050 <switchfuntion+0x424>)
 8002eec:	601a      	str	r2, [r3, #0]
        	  data32 = RxData[2];
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	001a      	movs	r2, r3
 8002ef6:	4b57      	ldr	r3, [pc, #348]	@ (8003054 <switchfuntion+0x428>)
 8002ef8:	801a      	strh	r2, [r3, #0]
        	  data32 = data32<<8;
 8002efa:	4b56      	ldr	r3, [pc, #344]	@ (8003054 <switchfuntion+0x428>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	4b54      	ldr	r3, [pc, #336]	@ (8003054 <switchfuntion+0x428>)
 8002f04:	801a      	strh	r2, [r3, #0]
        	  data33 = RxData[3];
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	3303      	adds	r3, #3
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	001a      	movs	r2, r3
 8002f0e:	4b52      	ldr	r3, [pc, #328]	@ (8003058 <switchfuntion+0x42c>)
 8002f10:	801a      	strh	r2, [r3, #0]
        	  highest_unit_voltage_mv = (data32 + data33); //voltage in Mv
 8002f12:	4b50      	ldr	r3, [pc, #320]	@ (8003054 <switchfuntion+0x428>)
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	001a      	movs	r2, r3
 8002f18:	4b4f      	ldr	r3, [pc, #316]	@ (8003058 <switchfuntion+0x42c>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f7fd fd32 	bl	8000988 <__aeabi_i2f>
 8002f24:	1c02      	adds	r2, r0, #0
 8002f26:	4b4d      	ldr	r3, [pc, #308]	@ (800305c <switchfuntion+0x430>)
 8002f28:	601a      	str	r2, [r3, #0]
        	  data34 = RxData[4];
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	001a      	movs	r2, r3
 8002f32:	4b4b      	ldr	r3, [pc, #300]	@ (8003060 <switchfuntion+0x434>)
 8002f34:	801a      	strh	r2, [r3, #0]
        	  data34 = data34<<8;
 8002f36:	4b4a      	ldr	r3, [pc, #296]	@ (8003060 <switchfuntion+0x434>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	4b48      	ldr	r3, [pc, #288]	@ (8003060 <switchfuntion+0x434>)
 8002f40:	801a      	strh	r2, [r3, #0]
        	  data35 = RxData[5];
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	3305      	adds	r3, #5
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	001a      	movs	r2, r3
 8002f4a:	4b46      	ldr	r3, [pc, #280]	@ (8003064 <switchfuntion+0x438>)
 8002f4c:	801a      	strh	r2, [r3, #0]
        	  minimum_unit_voltage_mv = (data34 + data35); //voltage in Mv
 8002f4e:	4b44      	ldr	r3, [pc, #272]	@ (8003060 <switchfuntion+0x434>)
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	001a      	movs	r2, r3
 8002f54:	4b43      	ldr	r3, [pc, #268]	@ (8003064 <switchfuntion+0x438>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7fd fd14 	bl	8000988 <__aeabi_i2f>
 8002f60:	1c02      	adds	r2, r0, #0
 8002f62:	4b41      	ldr	r3, [pc, #260]	@ (8003068 <switchfuntion+0x43c>)
 8002f64:	601a      	str	r2, [r3, #0]
          }break;
 8002f66:	e156      	b.n	8003216 <switchfuntion+0x5ea>
        	  data40 = RxData[0]; // byte 0 indicate the frame number and 1-7 BAR_CODE content
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800306c <switchfuntion+0x440>)
 8002f70:	801a      	strh	r2, [r3, #0]
        	  data41 = RxData[1];
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	001a      	movs	r2, r3
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003070 <switchfuntion+0x444>)
 8002f7c:	801a      	strh	r2, [r3, #0]
        	  data42 = RxData[2];
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	3302      	adds	r3, #2
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	001a      	movs	r2, r3
 8002f86:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <switchfuntion+0x448>)
 8002f88:	801a      	strh	r2, [r3, #0]
        	  data43 = RxData[3];
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	3303      	adds	r3, #3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	001a      	movs	r2, r3
 8002f92:	4b39      	ldr	r3, [pc, #228]	@ (8003078 <switchfuntion+0x44c>)
 8002f94:	801a      	strh	r2, [r3, #0]
        	  data44 = RxData[4];
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	4b37      	ldr	r3, [pc, #220]	@ (800307c <switchfuntion+0x450>)
 8002fa0:	801a      	strh	r2, [r3, #0]
        	  data45 = RxData[5];
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	3305      	adds	r3, #5
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <switchfuntion+0x454>)
 8002fac:	801a      	strh	r2, [r3, #0]
        	  data46 = RxData[6];
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	3306      	adds	r3, #6
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	4b33      	ldr	r3, [pc, #204]	@ (8003084 <switchfuntion+0x458>)
 8002fb8:	801a      	strh	r2, [r3, #0]
        	  data47 = RxData[7];
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	3307      	adds	r3, #7
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	4b31      	ldr	r3, [pc, #196]	@ (8003088 <switchfuntion+0x45c>)
 8002fc4:	801a      	strh	r2, [r3, #0]
          }break;
 8002fc6:	e126      	b.n	8003216 <switchfuntion+0x5ea>
 8002fc8:	18ffa2f4 	.word	0x18ffa2f4
 8002fcc:	18ff28f4 	.word	0x18ff28f4
 8002fd0:	18f1e2f4 	.word	0x18f1e2f4
 8002fd4:	18f110f4 	.word	0x18f110f4
 8002fd8:	18f101f4 	.word	0x18f101f4
 8002fdc:	18f0fef4 	.word	0x18f0fef4
 8002fe0:	18f0fdf4 	.word	0x18f0fdf4
 8002fe4:	1814eff4 	.word	0x1814eff4
 8002fe8:	1800fff4 	.word	0x1800fff4
 8002fec:	1806e5f4 	.word	0x1806e5f4
 8002ff0:	2000031c 	.word	0x2000031c
 8002ff4:	2000031e 	.word	0x2000031e
 8002ff8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ffc:	3f50624d 	.word	0x3f50624d
 8003000:	20000320 	.word	0x20000320
 8003004:	20000324 	.word	0x20000324
 8003008:	9999999a 	.word	0x9999999a
 800300c:	3fd99999 	.word	0x3fd99999
 8003010:	20000328 	.word	0x20000328
 8003014:	2000032c 	.word	0x2000032c
 8003018:	3fb99999 	.word	0x3fb99999
 800301c:	20000330 	.word	0x20000330
 8003020:	20000334 	.word	0x20000334
 8003024:	20000336 	.word	0x20000336
 8003028:	20000344 	.word	0x20000344
 800302c:	20000338 	.word	0x20000338
 8003030:	2000033a 	.word	0x2000033a
 8003034:	20000348 	.word	0x20000348
 8003038:	2000033c 	.word	0x2000033c
 800303c:	2000033e 	.word	0x2000033e
 8003040:	20000340 	.word	0x20000340
 8003044:	2000034c 	.word	0x2000034c
 8003048:	20000358 	.word	0x20000358
 800304c:	2000034e 	.word	0x2000034e
 8003050:	2000035c 	.word	0x2000035c
 8003054:	20000350 	.word	0x20000350
 8003058:	20000352 	.word	0x20000352
 800305c:	20000360 	.word	0x20000360
 8003060:	20000354 	.word	0x20000354
 8003064:	20000356 	.word	0x20000356
 8003068:	20000364 	.word	0x20000364
 800306c:	20000368 	.word	0x20000368
 8003070:	2000036a 	.word	0x2000036a
 8003074:	2000036c 	.word	0x2000036c
 8003078:	2000036e 	.word	0x2000036e
 800307c:	20000370 	.word	0x20000370
 8003080:	20000372 	.word	0x20000372
 8003084:	20000374 	.word	0x20000374
 8003088:	20000376 	.word	0x20000376
        	  data50 = RxData[0]; // byte 0 indicate the frame number and 1-7 BMS_SN
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	001a      	movs	r2, r3
 8003092:	4b63      	ldr	r3, [pc, #396]	@ (8003220 <switchfuntion+0x5f4>)
 8003094:	801a      	strh	r2, [r3, #0]
        	  data51 = RxData[1];
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	001a      	movs	r2, r3
 800309e:	4b61      	ldr	r3, [pc, #388]	@ (8003224 <switchfuntion+0x5f8>)
 80030a0:	801a      	strh	r2, [r3, #0]
        	  data52 = RxData[2];
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	3302      	adds	r3, #2
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	001a      	movs	r2, r3
 80030aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003228 <switchfuntion+0x5fc>)
 80030ac:	801a      	strh	r2, [r3, #0]
        	  data53 = RxData[3];
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	3303      	adds	r3, #3
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	001a      	movs	r2, r3
 80030b6:	4b5d      	ldr	r3, [pc, #372]	@ (800322c <switchfuntion+0x600>)
 80030b8:	801a      	strh	r2, [r3, #0]
        	  data54 = RxData[4];
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	3304      	adds	r3, #4
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	001a      	movs	r2, r3
 80030c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003230 <switchfuntion+0x604>)
 80030c4:	801a      	strh	r2, [r3, #0]
        	  data55 = RxData[5];
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	3305      	adds	r3, #5
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	001a      	movs	r2, r3
 80030ce:	4b59      	ldr	r3, [pc, #356]	@ (8003234 <switchfuntion+0x608>)
 80030d0:	801a      	strh	r2, [r3, #0]
        	  data56 = RxData[6];
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	3306      	adds	r3, #6
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	001a      	movs	r2, r3
 80030da:	4b57      	ldr	r3, [pc, #348]	@ (8003238 <switchfuntion+0x60c>)
 80030dc:	801a      	strh	r2, [r3, #0]
        	  data57 = RxData[7];
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	3307      	adds	r3, #7
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	001a      	movs	r2, r3
 80030e6:	4b55      	ldr	r3, [pc, #340]	@ (800323c <switchfuntion+0x610>)
 80030e8:	801a      	strh	r2, [r3, #0]
          }break;
 80030ea:	e094      	b.n	8003216 <switchfuntion+0x5ea>
        	  data64 = RxData[4];
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	3304      	adds	r3, #4
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	001a      	movs	r2, r3
 80030f4:	4b52      	ldr	r3, [pc, #328]	@ (8003240 <switchfuntion+0x614>)
 80030f6:	801a      	strh	r2, [r3, #0]
        	  battery_health_soh = data64;
 80030f8:	4b51      	ldr	r3, [pc, #324]	@ (8003240 <switchfuntion+0x614>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7fd fc93 	bl	8000a28 <__aeabi_ui2f>
 8003102:	1c02      	adds	r2, r0, #0
 8003104:	4b4f      	ldr	r3, [pc, #316]	@ (8003244 <switchfuntion+0x618>)
 8003106:	601a      	str	r2, [r3, #0]
          }break;
 8003108:	e085      	b.n	8003216 <switchfuntion+0x5ea>
        	  alarm  = RxData[0];  // byte0 alram 0->normal 1->alarm
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	001a      	movs	r2, r3
 8003110:	4b4d      	ldr	r3, [pc, #308]	@ (8003248 <switchfuntion+0x61c>)
 8003112:	801a      	strh	r2, [r3, #0]
        	  data71 = RxData[1];
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	001a      	movs	r2, r3
 800311c:	4b4b      	ldr	r3, [pc, #300]	@ (800324c <switchfuntion+0x620>)
 800311e:	801a      	strh	r2, [r3, #0]
        	  data71 = data71<<8;
 8003120:	4b4a      	ldr	r3, [pc, #296]	@ (800324c <switchfuntion+0x620>)
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b29a      	uxth	r2, r3
 8003128:	4b48      	ldr	r3, [pc, #288]	@ (800324c <switchfuntion+0x620>)
 800312a:	801a      	strh	r2, [r3, #0]
        	  data72 = RxData[2];
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	3302      	adds	r3, #2
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	001a      	movs	r2, r3
 8003134:	4b46      	ldr	r3, [pc, #280]	@ (8003250 <switchfuntion+0x624>)
 8003136:	801a      	strh	r2, [r3, #0]
        	  power_w = (data71 + data72);
 8003138:	4b44      	ldr	r3, [pc, #272]	@ (800324c <switchfuntion+0x620>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	001a      	movs	r2, r3
 800313e:	4b44      	ldr	r3, [pc, #272]	@ (8003250 <switchfuntion+0x624>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	18d3      	adds	r3, r2, r3
 8003144:	0018      	movs	r0, r3
 8003146:	f7fd fc1f 	bl	8000988 <__aeabi_i2f>
 800314a:	1c02      	adds	r2, r0, #0
 800314c:	4b41      	ldr	r3, [pc, #260]	@ (8003254 <switchfuntion+0x628>)
 800314e:	601a      	str	r2, [r3, #0]
        	  data73 = RxData[3];
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	3303      	adds	r3, #3
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	001a      	movs	r2, r3
 8003158:	4b3f      	ldr	r3, [pc, #252]	@ (8003258 <switchfuntion+0x62c>)
 800315a:	801a      	strh	r2, [r3, #0]
        	  battery_status = data73; // 0 leisure, 1 charging, 2discharge
 800315c:	4b3e      	ldr	r3, [pc, #248]	@ (8003258 <switchfuntion+0x62c>)
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	4b3e      	ldr	r3, [pc, #248]	@ (800325c <switchfuntion+0x630>)
 8003162:	801a      	strh	r2, [r3, #0]
          } break;
 8003164:	e057      	b.n	8003216 <switchfuntion+0x5ea>
        	  data80 = RxData[0];
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	001a      	movs	r2, r3
 800316c:	4b3c      	ldr	r3, [pc, #240]	@ (8003260 <switchfuntion+0x634>)
 800316e:	801a      	strh	r2, [r3, #0]
        	  battery_type = data80; // 1.LFP, 2.NMC
 8003170:	4b3b      	ldr	r3, [pc, #236]	@ (8003260 <switchfuntion+0x634>)
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	4b3b      	ldr	r3, [pc, #236]	@ (8003264 <switchfuntion+0x638>)
 8003176:	801a      	strh	r2, [r3, #0]
          }break;
 8003178:	e04d      	b.n	8003216 <switchfuntion+0x5ea>
        	  data90 = RxData[0];
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	001a      	movs	r2, r3
 8003180:	4b39      	ldr	r3, [pc, #228]	@ (8003268 <switchfuntion+0x63c>)
 8003182:	801a      	strh	r2, [r3, #0]
        	  mos_temp = data90;
 8003184:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <switchfuntion+0x63c>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	0018      	movs	r0, r3
 800318a:	f7fd fc4d 	bl	8000a28 <__aeabi_ui2f>
 800318e:	1c02      	adds	r2, r0, #0
 8003190:	4b36      	ldr	r3, [pc, #216]	@ (800326c <switchfuntion+0x640>)
 8003192:	601a      	str	r2, [r3, #0]
        	  temp = RxData[1]<<8;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	001a      	movs	r2, r3
 800319c:	240e      	movs	r4, #14
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	0212      	lsls	r2, r2, #8
 80031a2:	801a      	strh	r2, [r3, #0]
        	  temp |=RxData[2];
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	3302      	adds	r3, #2
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	0019      	movs	r1, r3
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	193a      	adds	r2, r7, r4
 80031b0:	8812      	ldrh	r2, [r2, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	801a      	strh	r2, [r3, #0]
        	  cell_pressure_difference_mv = temp;
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7fd fc34 	bl	8000a28 <__aeabi_ui2f>
 80031c0:	1c02      	adds	r2, r0, #0
 80031c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003270 <switchfuntion+0x644>)
 80031c4:	601a      	str	r2, [r3, #0]
        	  production_date = RxData[3];
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	3303      	adds	r3, #3
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	001a      	movs	r2, r3
 80031ce:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <switchfuntion+0x648>)
 80031d0:	801a      	strh	r2, [r3, #0]
        	  production_month = RxData[4];
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	3304      	adds	r3, #4
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	001a      	movs	r2, r3
 80031da:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <switchfuntion+0x64c>)
 80031dc:	801a      	strh	r2, [r3, #0]
        	  temp = RxData[5]<<8;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	3305      	adds	r3, #5
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	001a      	movs	r2, r3
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	0212      	lsls	r2, r2, #8
 80031ea:	801a      	strh	r2, [r3, #0]
        	  temp |= RxData[6];
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	3306      	adds	r3, #6
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	0019      	movs	r1, r3
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	193a      	adds	r2, r7, r4
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	801a      	strh	r2, [r3, #0]
        	  production_year = temp;
 80031fe:	4b1f      	ldr	r3, [pc, #124]	@ (800327c <switchfuntion+0x650>)
 8003200:	193a      	adds	r2, r7, r4
 8003202:	8812      	ldrh	r2, [r2, #0]
 8003204:	801a      	strh	r2, [r3, #0]
          }break;
 8003206:	e006      	b.n	8003216 <switchfuntion+0x5ea>
        	  percentage_remaining_chg_capacity_soc = RxData[4];
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	3304      	adds	r3, #4
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	001a      	movs	r2, r3
 8003210:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <switchfuntion+0x654>)
 8003212:	801a      	strh	r2, [r3, #0]
          }  break;
 8003214:	46c0      	nop			@ (mov r8, r8)
  }
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	b005      	add	sp, #20
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	20000378 	.word	0x20000378
 8003224:	2000037a 	.word	0x2000037a
 8003228:	2000037c 	.word	0x2000037c
 800322c:	2000037e 	.word	0x2000037e
 8003230:	20000380 	.word	0x20000380
 8003234:	20000382 	.word	0x20000382
 8003238:	20000384 	.word	0x20000384
 800323c:	20000386 	.word	0x20000386
 8003240:	20000388 	.word	0x20000388
 8003244:	2000038c 	.word	0x2000038c
 8003248:	20000390 	.word	0x20000390
 800324c:	20000392 	.word	0x20000392
 8003250:	20000394 	.word	0x20000394
 8003254:	2000039c 	.word	0x2000039c
 8003258:	20000396 	.word	0x20000396
 800325c:	20000398 	.word	0x20000398
 8003260:	200003a0 	.word	0x200003a0
 8003264:	200003a2 	.word	0x200003a2
 8003268:	200003a4 	.word	0x200003a4
 800326c:	200003ac 	.word	0x200003ac
 8003270:	200003b0 	.word	0x200003b0
 8003274:	200003a6 	.word	0x200003a6
 8003278:	200003a8 	.word	0x200003a8
 800327c:	200003aa 	.word	0x200003aa
 8003280:	200003b4 	.word	0x200003b4

08003284 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 250us = psc+1 * arr+1 / clock 32Mhz
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	static uint8_t l_count=0;
	l_count++;
 800328c:	4b04      	ldr	r3, [pc, #16]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	b2da      	uxtb	r2, r3
 8003294:	4b02      	ldr	r3, [pc, #8]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003296:	701a      	strb	r2, [r3, #0]

}
 8003298:	46c0      	nop			@ (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000425 	.word	0x20000425

080032a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
	HAL_Init();
 80032a8:	f001 f9aa 	bl	8004600 <HAL_Init>

	SystemClock_Config();
 80032ac:	f000 fbc8 	bl	8003a40 <SystemClock_Config>

	App_PherpheralInit();
 80032b0:	f000 f8f2 	bl	8003498 <App_PherpheralInit>

	chgState = START_STATE;
 80032b4:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <main+0x38>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		App_GetAllAdcValues();
 80032ba:	f000 f96d 	bl	8003598 <App_GetAllAdcValues>

		App_AdcConvertBattVoltage();
 80032be:	f000 f9e7 	bl	8003690 <App_AdcConvertBattVoltage>

		App_AdcConvertACMains();
 80032c2:	f000 fa3f 	bl	8003744 <App_AdcConvertACMains>

		App_AdcConvertChgCurrent();
 80032c6:	f000 faa7 	bl	8003818 <App_AdcConvertChgCurrent>

		App_AdcConvertTemperature();
 80032ca:	f000 fafb 	bl	80038c4 <App_AdcConvertTemperature>

		App_ChgStateMachine();
 80032ce:	f000 f807 	bl	80032e0 <App_ChgStateMachine>

		HAL_Delay(100);
 80032d2:	2064      	movs	r0, #100	@ 0x64
 80032d4:	f001 fa1a 	bl	800470c <HAL_Delay>
		App_GetAllAdcValues();
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	e7ee      	b.n	80032ba <main+0x16>
 80032dc:	20000424 	.word	0x20000424

080032e0 <App_ChgStateMachine>:

	/* USER CODE END 3 */
}

void App_ChgStateMachine(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
	if(chgState == START_STATE)
 80032e4:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <App_ChgStateMachine+0x90>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d130      	bne.n	800334e <App_ChgStateMachine+0x6e>
	{
		if(uwTick < 4000)
 80032ec:	4b21      	ldr	r3, [pc, #132]	@ (8003374 <App_ChgStateMachine+0x94>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	23fa      	movs	r3, #250	@ 0xfa
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d205      	bcs.n	8003304 <App_ChgStateMachine+0x24>
		{
			App_PwmDutyCtrl(g_pwm_gain);  // Ensure PWM is zero at entry
 80032f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003378 <App_ChgStateMachine+0x98>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 f8ef 	bl	80034e0 <App_PwmDutyCtrl>
 8003302:	e01d      	b.n	8003340 <App_ChgStateMachine+0x60>
		}
		else if(uwTick > 4000 && uwTick < 8000)
 8003304:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <App_ChgStateMachine+0x94>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	23fa      	movs	r3, #250	@ 0xfa
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	429a      	cmp	r2, r3
 800330e:	d90e      	bls.n	800332e <App_ChgStateMachine+0x4e>
 8003310:	4b18      	ldr	r3, [pc, #96]	@ (8003374 <App_ChgStateMachine+0x94>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	23fa      	movs	r3, #250	@ 0xfa
 8003316:	015b      	lsls	r3, r3, #5
 8003318:	429a      	cmp	r2, r3
 800331a:	d208      	bcs.n	800332e <App_ChgStateMachine+0x4e>
		{
			g_pwm_gain = 200;
 800331c:	4b16      	ldr	r3, [pc, #88]	@ (8003378 <App_ChgStateMachine+0x98>)
 800331e:	22c8      	movs	r2, #200	@ 0xc8
 8003320:	601a      	str	r2, [r3, #0]
			App_PwmDutyCtrl(g_pwm_gain);  // Apply PWM while waiting
 8003322:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <App_ChgStateMachine+0x98>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f8da 	bl	80034e0 <App_PwmDutyCtrl>
 800332c:	e008      	b.n	8003340 <App_ChgStateMachine+0x60>
		}
		else
		{
			RELAY_ON;
 800332e:	4b13      	ldr	r3, [pc, #76]	@ (800337c <App_ChgStateMachine+0x9c>)
 8003330:	2201      	movs	r2, #1
 8003332:	2101      	movs	r1, #1
 8003334:	0018      	movs	r0, r3
 8003336:	f003 fa33 	bl	80067a0 <HAL_GPIO_WritePin>
			chgState = SELF_CHECK;
 800333a:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <App_ChgStateMachine+0x90>)
 800333c:	2203      	movs	r2, #3
 800333e:	701a      	strb	r2, [r3, #0]
		}

		App_Delay(App_FaultLedToggle,400);
 8003340:	23c8      	movs	r3, #200	@ 0xc8
 8003342:	005a      	lsls	r2, r3, #1
 8003344:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <App_ChgStateMachine+0xa0>)
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f000 f8e3 	bl	8003514 <App_Delay>
	}

	switch (chgState)
 800334e:	4b08      	ldr	r3, [pc, #32]	@ (8003370 <App_ChgStateMachine+0x90>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d002      	beq.n	800335c <App_ChgStateMachine+0x7c>
 8003356:	2b04      	cmp	r3, #4
 8003358:	d003      	beq.n	8003362 <App_ChgStateMachine+0x82>
	   break;

      case NO_DECISION:
	    default:

		break;
 800335a:	e005      	b.n	8003368 <App_ChgStateMachine+0x88>
		  App_PulseGeneration();
 800335c:	f000 f812 	bl	8003384 <App_PulseGeneration>
	   break;
 8003360:	e002      	b.n	8003368 <App_ChgStateMachine+0x88>
    	  App_ChargingState();
 8003362:	f000 f877 	bl	8003454 <App_ChargingState>
	   break;
 8003366:	46c0      	nop			@ (mov r8, r8)
	}

}
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	20000424 	.word	0x20000424
 8003374:	2000042c 	.word	0x2000042c
 8003378:	20000420 	.word	0x20000420
 800337c:	50000400 	.word	0x50000400
 8003380:	080034fd 	.word	0x080034fd

08003384 <App_PulseGeneration>:


void App_PulseGeneration(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
    static uint8_t pulse_count = 0;
//    static uint32_t last_pulse_time = 0;
//
    //1) Apply PWl_countM pulse

     while(g_pwm_gain >= 1)
 8003388:	e00c      	b.n	80033a4 <App_PulseGeneration+0x20>
     {
    	 g_pwm_gain -= 1;
 800338a:	4b2b      	ldr	r3, [pc, #172]	@ (8003438 <App_PulseGeneration+0xb4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1e5a      	subs	r2, r3, #1
 8003390:	4b29      	ldr	r3, [pc, #164]	@ (8003438 <App_PulseGeneration+0xb4>)
 8003392:	601a      	str	r2, [r3, #0]
    	 App_PwmDutyCtrl(g_pwm_gain);
 8003394:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <App_PulseGeneration+0xb4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 f8a1 	bl	80034e0 <App_PwmDutyCtrl>
    	 HAL_Delay(150);
 800339e:	2096      	movs	r0, #150	@ 0x96
 80033a0:	f001 f9b4 	bl	800470c <HAL_Delay>
     while(g_pwm_gain >= 1)
 80033a4:	4b24      	ldr	r3, [pc, #144]	@ (8003438 <App_PulseGeneration+0xb4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ee      	bne.n	800338a <App_PulseGeneration+0x6>
     }

      HAL_Delay(10000);
 80033ac:	4b23      	ldr	r3, [pc, #140]	@ (800343c <App_PulseGeneration+0xb8>)
 80033ae:	0018      	movs	r0, r3
 80033b0:	f001 f9ac 	bl	800470c <HAL_Delay>

    // 2) Turn off relay
      RELAY_OFF;
 80033b4:	4b22      	ldr	r3, [pc, #136]	@ (8003440 <App_PulseGeneration+0xbc>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	2101      	movs	r1, #1
 80033ba:	0018      	movs	r0, r3
 80033bc:	f003 f9f0 	bl	80067a0 <HAL_GPIO_WritePin>
      g_pwm_gain = 200;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <App_PulseGeneration+0xb4>)
 80033c2:	22c8      	movs	r2, #200	@ 0xc8
 80033c4:	601a      	str	r2, [r3, #0]
      App_PwmDutyCtrl(g_pwm_gain);  // off voc
 80033c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <App_PulseGeneration+0xb4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f888 	bl	80034e0 <App_PwmDutyCtrl>
//
     // 3) Read battery voltage
		App_GetAllAdcValues();
 80033d0:	f000 f8e2 	bl	8003598 <App_GetAllAdcValues>
		App_AdcConvertBattVoltage();
 80033d4:	f000 f95c 	bl	8003690 <App_AdcConvertBattVoltage>
		App_AdcConvertACMains();
 80033d8:	f000 f9b4 	bl	8003744 <App_AdcConvertACMains>
     if (g_batt_voltage >= MIN_PACK_VOLT)
 80033dc:	4b19      	ldr	r3, [pc, #100]	@ (8003444 <App_PulseGeneration+0xc0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <App_PulseGeneration+0xc4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d906      	bls.n	80033f4 <App_PulseGeneration+0x70>
     {
        chgState = CC_STATE;
 80033e6:	4b19      	ldr	r3, [pc, #100]	@ (800344c <App_PulseGeneration+0xc8>)
 80033e8:	2204      	movs	r2, #4
 80033ea:	701a      	strb	r2, [r3, #0]
        pulse_count = 0;
 80033ec:	4b18      	ldr	r3, [pc, #96]	@ (8003450 <App_PulseGeneration+0xcc>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
        return;
 80033f2:	e01f      	b.n	8003434 <App_PulseGeneration+0xb0>
    }

////    HAL_Delay(700);
     HAL_Delay(10000);
 80033f4:	4b11      	ldr	r3, [pc, #68]	@ (800343c <App_PulseGeneration+0xb8>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f001 f988 	bl	800470c <HAL_Delay>
  // 4) Turn relay back on
      RELAY_ON;
 80033fc:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <App_PulseGeneration+0xbc>)
 80033fe:	2201      	movs	r2, #1
 8003400:	2101      	movs	r1, #1
 8003402:	0018      	movs	r0, r3
 8003404:	f003 f9cc 	bl	80067a0 <HAL_GPIO_WritePin>
//    g_pwm_gain = 200;
////    HAL_Delay(700);
//
     // 5) Increment pulse count
     pulse_count++;
 8003408:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <App_PulseGeneration+0xcc>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b0f      	ldr	r3, [pc, #60]	@ (8003450 <App_PulseGeneration+0xcc>)
 8003412:	701a      	strb	r2, [r3, #0]

    if (pulse_count >= 10)
 8003414:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <App_PulseGeneration+0xcc>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b09      	cmp	r3, #9
 800341a:	d90b      	bls.n	8003434 <App_PulseGeneration+0xb0>
     {
     	 RELAY_OFF;
 800341c:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <App_PulseGeneration+0xbc>)
 800341e:	2200      	movs	r2, #0
 8003420:	2101      	movs	r1, #1
 8003422:	0018      	movs	r0, r3
 8003424:	f003 f9bc 	bl	80067a0 <HAL_GPIO_WritePin>
         chgState = ERROR_STATE;
 8003428:	4b08      	ldr	r3, [pc, #32]	@ (800344c <App_PulseGeneration+0xc8>)
 800342a:	2207      	movs	r2, #7
 800342c:	701a      	strb	r2, [r3, #0]
         pulse_count = 0;
 800342e:	4b08      	ldr	r3, [pc, #32]	@ (8003450 <App_PulseGeneration+0xcc>)
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
    }

}
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000420 	.word	0x20000420
 800343c:	00002710 	.word	0x00002710
 8003440:	50000400 	.word	0x50000400
 8003444:	20000410 	.word	0x20000410
 8003448:	0000752f 	.word	0x0000752f
 800344c:	20000424 	.word	0x20000424
 8003450:	20000426 	.word	0x20000426

08003454 <App_ChargingState>:


void App_ChargingState(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	RELAY_ON;
 8003458:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <App_ChargingState+0x3c>)
 800345a:	2201      	movs	r2, #1
 800345c:	2101      	movs	r1, #1
 800345e:	0018      	movs	r0, r3
 8003460:	f003 f99e 	bl	80067a0 <HAL_GPIO_WritePin>
	while(g_pwm_gain >= 1)
 8003464:	e00c      	b.n	8003480 <App_ChargingState+0x2c>
	{
		g_pwm_gain -= 1;
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <App_ChargingState+0x40>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1e5a      	subs	r2, r3, #1
 800346c:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <App_ChargingState+0x40>)
 800346e:	601a      	str	r2, [r3, #0]
		App_PwmDutyCtrl(g_pwm_gain);
 8003470:	4b08      	ldr	r3, [pc, #32]	@ (8003494 <App_ChargingState+0x40>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 f833 	bl	80034e0 <App_PwmDutyCtrl>
		HAL_Delay(150);
 800347a:	2096      	movs	r0, #150	@ 0x96
 800347c:	f001 f946 	bl	800470c <HAL_Delay>
	while(g_pwm_gain >= 1)
 8003480:	4b04      	ldr	r3, [pc, #16]	@ (8003494 <App_ChargingState+0x40>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1ee      	bne.n	8003466 <App_ChargingState+0x12>
	}
}
 8003488:	46c0      	nop			@ (mov r8, r8)
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	50000400 	.word	0x50000400
 8003494:	20000420 	.word	0x20000420

08003498 <App_PherpheralInit>:

void App_PherpheralInit(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800349c:	f000 fd0c 	bl	8003eb8 <MX_GPIO_Init>
	MX_ADC1_Init();
 80034a0:	f000 fb2e 	bl	8003b00 <MX_ADC1_Init>

	MX_FDCAN1_Init();
 80034a4:	f000 fb78 	bl	8003b98 <MX_FDCAN1_Init>
	FDCAN_Config();
 80034a8:	f000 fda6 	bl	8003ff8 <FDCAN_Config>
	HAL_FDCAN_Start(&hfdcan1);
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <App_PherpheralInit+0x3c>)
 80034ae:	0018      	movs	r0, r3
 80034b0:	f002 fc23 	bl	8005cfa <HAL_FDCAN_Start>
	MX_TIM3_Init();
 80034b4:	f000 fc82 	bl	8003dbc <MX_TIM3_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 80034b8:	4b07      	ldr	r3, [pc, #28]	@ (80034d8 <App_PherpheralInit+0x40>)
 80034ba:	0018      	movs	r0, r3
 80034bc:	f004 f966 	bl	800778c <HAL_TIM_Base_Start_IT>

	MX_TIM1_Init();
 80034c0:	f000 fbb2 	bl	8003c28 <MX_TIM1_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <App_PherpheralInit+0x44>)
 80034c6:	2100      	movs	r1, #0
 80034c8:	0018      	movs	r0, r3
 80034ca:	f004 fa21 	bl	8007910 <HAL_TIM_PWM_Start>
}
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	200000ec 	.word	0x200000ec
 80034d8:	2000019c 	.word	0x2000019c
 80034dc:	20000150 	.word	0x20000150

080034e0 <App_PwmDutyCtrl>:

void App_PwmDutyCtrl(uint32_t duty_ctrl)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	TIM1->CCR1 =  duty_ctrl;
 80034e8:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <App_PwmDutyCtrl+0x18>)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b002      	add	sp, #8
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	40012c00 	.word	0x40012c00

080034fc <App_FaultLedToggle>:

void App_FaultLedToggle(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
	LED_FAULT_TOGGLE;
 8003500:	4b03      	ldr	r3, [pc, #12]	@ (8003510 <App_FaultLedToggle+0x14>)
 8003502:	2120      	movs	r1, #32
 8003504:	0018      	movs	r0, r3
 8003506:	f003 f968 	bl	80067da <HAL_GPIO_TogglePin>
}
 800350a:	46c0      	nop			@ (mov r8, r8)
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	50000400 	.word	0x50000400

08003514 <App_Delay>:

void App_Delay(void (*func)(void), uint32_t delay_ms)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
	uint32_t start = HAL_GetTick();
 800351e:	f001 f8eb 	bl	80046f8 <HAL_GetTick>
 8003522:	0003      	movs	r3, r0
 8003524:	60fb      	str	r3, [r7, #12]
	while ((HAL_GetTick() - start) < delay_ms)
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	f001 f8e6 	bl	80046f8 <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d8f7      	bhi.n	8003528 <App_Delay+0x14>
	{
		// wait
	}

	if (func != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <App_Delay+0x2e>
		func();
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4798      	blx	r3
}
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b004      	add	sp, #16
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <App_AdcChannelSel>:

void App_AdcChannelSel(uint32_t channel)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8003554:	240c      	movs	r4, #12
 8003556:	193b      	adds	r3, r7, r4
 8003558:	0018      	movs	r0, r3
 800355a:	230c      	movs	r3, #12
 800355c:	001a      	movs	r2, r3
 800355e:	2100      	movs	r1, #0
 8003560:	f005 ff33 	bl	80093ca <memset>
	sConfig.Channel = channel;
 8003564:	193b      	adds	r3, r7, r4
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800356a:	193b      	adds	r3, r7, r4
 800356c:	2200      	movs	r2, #0
 800356e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003570:	193b      	adds	r3, r7, r4
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003576:	193a      	adds	r2, r7, r4
 8003578:	4b06      	ldr	r3, [pc, #24]	@ (8003594 <App_AdcChannelSel+0x48>)
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f001 fd25 	bl	8004fcc <HAL_ADC_ConfigChannel>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d001      	beq.n	800358a <App_AdcChannelSel+0x3e>
	{
		Error_Handler();
 8003586:	f000 fdcb 	bl	8004120 <Error_Handler>
	}
}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b007      	add	sp, #28
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	20000088 	.word	0x20000088

08003598 <App_GetAllAdcValues>:

void App_GetAllAdcValues(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	App_AdcChannelSel(ADC_CHANNEL_0);
 800359c:	2001      	movs	r0, #1
 800359e:	f7ff ffd5 	bl	800354c <App_AdcChannelSel>
	HAL_ADC_Start(&hadc1);
 80035a2:	4b35      	ldr	r3, [pc, #212]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 80035a4:	0018      	movs	r0, r3
 80035a6:	f001 fbe7 	bl	8004d78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80035aa:	23fa      	movs	r3, #250	@ 0xfa
 80035ac:	009a      	lsls	r2, r3, #2
 80035ae:	4b32      	ldr	r3, [pc, #200]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 80035b0:	0011      	movs	r1, r2
 80035b2:	0018      	movs	r0, r3
 80035b4:	f001 fc6a 	bl	8004e8c <HAL_ADC_PollForConversion>
	g_AdcRaw[0] = HAL_ADC_GetValue(&hadc1);
 80035b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 80035ba:	0018      	movs	r0, r3
 80035bc:	f001 fcfa 	bl	8004fb4 <HAL_ADC_GetValue>
 80035c0:	0002      	movs	r2, r0
 80035c2:	4b2e      	ldr	r3, [pc, #184]	@ (800367c <App_GetAllAdcValues+0xe4>)
 80035c4:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80035c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 80035c8:	0018      	movs	r0, r3
 80035ca:	f001 fc23 	bl	8004e14 <HAL_ADC_Stop>

	App_AdcChannelSel(ADC_CHANNEL_1);
 80035ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <App_GetAllAdcValues+0xe8>)
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7ff ffbb 	bl	800354c <App_AdcChannelSel>
	HAL_ADC_Start(&hadc1);
 80035d6:	4b28      	ldr	r3, [pc, #160]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 80035d8:	0018      	movs	r0, r3
 80035da:	f001 fbcd 	bl	8004d78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80035de:	23fa      	movs	r3, #250	@ 0xfa
 80035e0:	009a      	lsls	r2, r3, #2
 80035e2:	4b25      	ldr	r3, [pc, #148]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 80035e4:	0011      	movs	r1, r2
 80035e6:	0018      	movs	r0, r3
 80035e8:	f001 fc50 	bl	8004e8c <HAL_ADC_PollForConversion>
	g_AdcRaw[1] = HAL_ADC_GetValue(&hadc1);   //PA1 Mains on ADC_VAL[1]
 80035ec:	4b22      	ldr	r3, [pc, #136]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 80035ee:	0018      	movs	r0, r3
 80035f0:	f001 fce0 	bl	8004fb4 <HAL_ADC_GetValue>
 80035f4:	0002      	movs	r2, r0
 80035f6:	4b21      	ldr	r3, [pc, #132]	@ (800367c <App_GetAllAdcValues+0xe4>)
 80035f8:	605a      	str	r2, [r3, #4]
	temp_adc_main=g_AdcRaw[1];
 80035fa:	4b20      	ldr	r3, [pc, #128]	@ (800367c <App_GetAllAdcValues+0xe4>)
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	4b21      	ldr	r3, [pc, #132]	@ (8003684 <App_GetAllAdcValues+0xec>)
 8003600:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8003602:	4b1d      	ldr	r3, [pc, #116]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 8003604:	0018      	movs	r0, r3
 8003606:	f001 fc05 	bl	8004e14 <HAL_ADC_Stop>


	App_AdcChannelSel(ADC_CHANNEL_2);
 800360a:	4b1f      	ldr	r3, [pc, #124]	@ (8003688 <App_GetAllAdcValues+0xf0>)
 800360c:	0018      	movs	r0, r3
 800360e:	f7ff ff9d 	bl	800354c <App_AdcChannelSel>
	HAL_ADC_Start(&hadc1);
 8003612:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 8003614:	0018      	movs	r0, r3
 8003616:	f001 fbaf 	bl	8004d78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800361a:	23fa      	movs	r3, #250	@ 0xfa
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	4b16      	ldr	r3, [pc, #88]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 8003620:	0011      	movs	r1, r2
 8003622:	0018      	movs	r0, r3
 8003624:	f001 fc32 	bl	8004e8c <HAL_ADC_PollForConversion>
	g_AdcRaw[2] = HAL_ADC_GetValue(&hadc1); //PA2 TEMPSENS
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 800362a:	0018      	movs	r0, r3
 800362c:	f001 fcc2 	bl	8004fb4 <HAL_ADC_GetValue>
 8003630:	0002      	movs	r2, r0
 8003632:	4b12      	ldr	r3, [pc, #72]	@ (800367c <App_GetAllAdcValues+0xe4>)
 8003634:	609a      	str	r2, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 8003638:	0018      	movs	r0, r3
 800363a:	f001 fbeb 	bl	8004e14 <HAL_ADC_Stop>


	App_AdcChannelSel(ADC_CHANNEL_3);
 800363e:	4b13      	ldr	r3, [pc, #76]	@ (800368c <App_GetAllAdcValues+0xf4>)
 8003640:	0018      	movs	r0, r3
 8003642:	f7ff ff83 	bl	800354c <App_AdcChannelSel>
	HAL_ADC_Start(&hadc1);
 8003646:	4b0c      	ldr	r3, [pc, #48]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 8003648:	0018      	movs	r0, r3
 800364a:	f001 fb95 	bl	8004d78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800364e:	23fa      	movs	r3, #250	@ 0xfa
 8003650:	009a      	lsls	r2, r3, #2
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 8003654:	0011      	movs	r1, r2
 8003656:	0018      	movs	r0, r3
 8003658:	f001 fc18 	bl	8004e8c <HAL_ADC_PollForConversion>
	g_AdcRaw[3] = HAL_ADC_GetValue(&hadc1);  //PA3 current on ADC_VAL[3]
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 800365e:	0018      	movs	r0, r3
 8003660:	f001 fca8 	bl	8004fb4 <HAL_ADC_GetValue>
 8003664:	0002      	movs	r2, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	@ (800367c <App_GetAllAdcValues+0xe4>)
 8003668:	60da      	str	r2, [r3, #12]
	HAL_ADC_Stop(&hadc1);
 800366a:	4b03      	ldr	r3, [pc, #12]	@ (8003678 <App_GetAllAdcValues+0xe0>)
 800366c:	0018      	movs	r0, r3
 800366e:	f001 fbd1 	bl	8004e14 <HAL_ADC_Stop>

}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000088 	.word	0x20000088
 800367c:	20000400 	.word	0x20000400
 8003680:	04000002 	.word	0x04000002
 8003684:	200003e0 	.word	0x200003e0
 8003688:	08000004 	.word	0x08000004
 800368c:	0c000008 	.word	0x0c000008

08003690 <App_AdcConvertBattVoltage>:

void App_AdcConvertBattVoltage(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
	static unsigned int temp_adc_data;

	temp_adc_data = g_AdcRaw[0];    //PA0 battery_voltage on  g_AdcRaw[0] BAT_V R5
 8003694:	4b24      	ldr	r3, [pc, #144]	@ (8003728 <App_AdcConvertBattVoltage+0x98>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b24      	ldr	r3, [pc, #144]	@ (800372c <App_AdcConvertBattVoltage+0x9c>)
 800369a:	601a      	str	r2, [r3, #0]
	temp_adc_data = LPF(2,temp_adc_data,&prev_batt_volt);
 800369c:	4b23      	ldr	r3, [pc, #140]	@ (800372c <App_AdcConvertBattVoltage+0x9c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a23      	ldr	r2, [pc, #140]	@ (8003730 <App_AdcConvertBattVoltage+0xa0>)
 80036a2:	0019      	movs	r1, r3
 80036a4:	2002      	movs	r0, #2
 80036a6:	f000 ff5a 	bl	800455e <LPF>
 80036aa:	0002      	movs	r2, r0
 80036ac:	4b1f      	ldr	r3, [pc, #124]	@ (800372c <App_AdcConvertBattVoltage+0x9c>)
 80036ae:	601a      	str	r2, [r3, #0]
	temp_adc_data = temp_adc_data*49.5;//10;//100;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	@ (800372c <App_AdcConvertBattVoltage+0x9c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7ff f979 	bl	80029ac <__aeabi_ui2d>
 80036ba:	2200      	movs	r2, #0
 80036bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <App_AdcConvertBattVoltage+0xa4>)
 80036be:	f7fe f9f9 	bl	8001ab4 <__aeabi_dmul>
 80036c2:	0002      	movs	r2, r0
 80036c4:	000b      	movs	r3, r1
 80036c6:	0010      	movs	r0, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	f7fc fecf 	bl	800046c <__aeabi_d2uiz>
 80036ce:	0002      	movs	r2, r0
 80036d0:	4b16      	ldr	r3, [pc, #88]	@ (800372c <App_AdcConvertBattVoltage+0x9c>)
 80036d2:	601a      	str	r2, [r3, #0]
	batt_voltavg += (unsigned int)(temp_adc_data/25);//362;batt_cal
 80036d4:	4b15      	ldr	r3, [pc, #84]	@ (800372c <App_AdcConvertBattVoltage+0x9c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2119      	movs	r1, #25
 80036da:	0018      	movs	r0, r3
 80036dc:	f7fc fd12 	bl	8000104 <__udivsi3>
 80036e0:	0003      	movs	r3, r0
 80036e2:	001a      	movs	r2, r3
 80036e4:	4b14      	ldr	r3, [pc, #80]	@ (8003738 <App_AdcConvertBattVoltage+0xa8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	18d3      	adds	r3, r2, r3
 80036ea:	001a      	movs	r2, r3
 80036ec:	4b12      	ldr	r3, [pc, #72]	@ (8003738 <App_AdcConvertBattVoltage+0xa8>)
 80036ee:	601a      	str	r2, [r3, #0]
	avgbattvolt_cnts++;
 80036f0:	4b12      	ldr	r3, [pc, #72]	@ (800373c <App_AdcConvertBattVoltage+0xac>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	4b11      	ldr	r3, [pc, #68]	@ (800373c <App_AdcConvertBattVoltage+0xac>)
 80036f8:	601a      	str	r2, [r3, #0]

	if (avgbattvolt_cnts > 30)
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <App_AdcConvertBattVoltage+0xac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b1e      	cmp	r3, #30
 8003700:	dd0f      	ble.n	8003722 <App_AdcConvertBattVoltage+0x92>
	{
		g_batt_voltage = (batt_voltavg)/30;   //calculated battery voltage
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <App_AdcConvertBattVoltage+0xa8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	211e      	movs	r1, #30
 8003708:	0018      	movs	r0, r3
 800370a:	f7fc fd85 	bl	8000218 <__divsi3>
 800370e:	0003      	movs	r3, r0
 8003710:	001a      	movs	r2, r3
 8003712:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <App_AdcConvertBattVoltage+0xb0>)
 8003714:	601a      	str	r2, [r3, #0]
		avgbattvolt_cnts =0;
 8003716:	4b09      	ldr	r3, [pc, #36]	@ (800373c <App_AdcConvertBattVoltage+0xac>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
		batt_voltavg =0;
 800371c:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <App_AdcConvertBattVoltage+0xa8>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
	}
}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000400 	.word	0x20000400
 800372c:	20000428 	.word	0x20000428
 8003730:	200003c0 	.word	0x200003c0
 8003734:	4048c000 	.word	0x4048c000
 8003738:	200003c4 	.word	0x200003c4
 800373c:	200003c8 	.word	0x200003c8
 8003740:	20000410 	.word	0x20000410

08003744 <App_AdcConvertACMains>:


void App_AdcConvertACMains(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
	if(temp_adc_main>1480)
 8003748:	4b2a      	ldr	r3, [pc, #168]	@ (80037f4 <App_AdcConvertACMains+0xb0>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	23b9      	movs	r3, #185	@ 0xb9
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	429a      	cmp	r2, r3
 8003752:	d912      	bls.n	800377a <App_AdcConvertACMains+0x36>
	{
		if(temp_adc_main>prev_mains_volt)
 8003754:	4b27      	ldr	r3, [pc, #156]	@ (80037f4 <App_AdcConvertACMains+0xb0>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <App_AdcConvertACMains+0xb4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d904      	bls.n	800376a <App_AdcConvertACMains+0x26>
		{
			prev_mains_volt=temp_adc_main;
 8003760:	4b24      	ldr	r3, [pc, #144]	@ (80037f4 <App_AdcConvertACMains+0xb0>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <App_AdcConvertACMains+0xb4>)
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e00a      	b.n	8003780 <App_AdcConvertACMains+0x3c>
		}

		else
		{
			mains_volt = prev_mains_volt-m_cal;//1480
 800376a:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <App_AdcConvertACMains+0xb4>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b23      	ldr	r3, [pc, #140]	@ (80037fc <App_AdcConvertACMains+0xb8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	1ad2      	subs	r2, r2, r3
 8003774:	4b22      	ldr	r3, [pc, #136]	@ (8003800 <App_AdcConvertACMains+0xbc>)
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e002      	b.n	8003780 <App_AdcConvertACMains+0x3c>
		}
	}
	else
	{
		prev_mains_volt=0;
 800377a:	4b1f      	ldr	r3, [pc, #124]	@ (80037f8 <App_AdcConvertACMains+0xb4>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
	}

	if(main_cnt > 50)
 8003780:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <App_AdcConvertACMains+0xc0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b32      	cmp	r3, #50	@ 0x32
 8003786:	d925      	bls.n	80037d4 <App_AdcConvertACMains+0x90>
	{
		mains_volt_avg = mains_volt_avg/main_cnt;
 8003788:	4b1f      	ldr	r3, [pc, #124]	@ (8003808 <App_AdcConvertACMains+0xc4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	001a      	movs	r2, r3
 800378e:	4b1d      	ldr	r3, [pc, #116]	@ (8003804 <App_AdcConvertACMains+0xc0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	0019      	movs	r1, r3
 8003794:	0010      	movs	r0, r2
 8003796:	f7fc fcb5 	bl	8000104 <__udivsi3>
 800379a:	0003      	movs	r3, r0
 800379c:	001a      	movs	r2, r3
 800379e:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <App_AdcConvertACMains+0xc4>)
 80037a0:	601a      	str	r2, [r3, #0]
		g_ac_voltage = mains_volt_avg*0.2253;
 80037a2:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <App_AdcConvertACMains+0xc4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7ff f8d2 	bl	8002950 <__aeabi_i2d>
 80037ac:	4a17      	ldr	r2, [pc, #92]	@ (800380c <App_AdcConvertACMains+0xc8>)
 80037ae:	4b18      	ldr	r3, [pc, #96]	@ (8003810 <App_AdcConvertACMains+0xcc>)
 80037b0:	f7fe f980 	bl	8001ab4 <__aeabi_dmul>
 80037b4:	0002      	movs	r2, r0
 80037b6:	000b      	movs	r3, r1
 80037b8:	0010      	movs	r0, r2
 80037ba:	0019      	movs	r1, r3
 80037bc:	f7fc fe56 	bl	800046c <__aeabi_d2uiz>
 80037c0:	0002      	movs	r2, r0
 80037c2:	4b14      	ldr	r3, [pc, #80]	@ (8003814 <App_AdcConvertACMains+0xd0>)
 80037c4:	601a      	str	r2, [r3, #0]
		mains_volt_avg = 0;main_cnt=0;
 80037c6:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <App_AdcConvertACMains+0xc4>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003804 <App_AdcConvertACMains+0xc0>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
	else
	{
		mains_volt_avg=mains_volt+mains_volt_avg;
		main_cnt++;
	}
}
 80037d2:	e00c      	b.n	80037ee <App_AdcConvertACMains+0xaa>
		mains_volt_avg=mains_volt+mains_volt_avg;
 80037d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003800 <App_AdcConvertACMains+0xbc>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <App_AdcConvertACMains+0xc4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	18d3      	adds	r3, r2, r3
 80037de:	001a      	movs	r2, r3
 80037e0:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <App_AdcConvertACMains+0xc4>)
 80037e2:	601a      	str	r2, [r3, #0]
		main_cnt++;
 80037e4:	4b07      	ldr	r3, [pc, #28]	@ (8003804 <App_AdcConvertACMains+0xc0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <App_AdcConvertACMains+0xc0>)
 80037ec:	601a      	str	r2, [r3, #0]
}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200003e0 	.word	0x200003e0
 80037f8:	200003d8 	.word	0x200003d8
 80037fc:	20000000 	.word	0x20000000
 8003800:	200003d4 	.word	0x200003d4
 8003804:	200003e4 	.word	0x200003e4
 8003808:	200003bc 	.word	0x200003bc
 800380c:	61e4f766 	.word	0x61e4f766
 8003810:	3fccd6a1 	.word	0x3fccd6a1
 8003814:	20000414 	.word	0x20000414

08003818 <App_AdcConvertChgCurrent>:



void App_AdcConvertChgCurrent(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
	if (chg_cnt>70)
 800381c:	4b22      	ldr	r3, [pc, #136]	@ (80038a8 <App_AdcConvertChgCurrent+0x90>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b46      	cmp	r3, #70	@ 0x46
 8003822:	d930      	bls.n	8003886 <App_AdcConvertChgCurrent+0x6e>
	{
		chg_current =  chg_current_avg/chg_cnt;
 8003824:	4b21      	ldr	r3, [pc, #132]	@ (80038ac <App_AdcConvertChgCurrent+0x94>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	001a      	movs	r2, r3
 800382a:	4b1f      	ldr	r3, [pc, #124]	@ (80038a8 <App_AdcConvertChgCurrent+0x90>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f7fc fc67 	bl	8000104 <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	001a      	movs	r2, r3
 800383a:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <App_AdcConvertChgCurrent+0x98>)
 800383c:	601a      	str	r2, [r3, #0]
		chg_current =  chg_current+prev_chg_crnt;
 800383e:	4b1c      	ldr	r3, [pc, #112]	@ (80038b0 <App_AdcConvertChgCurrent+0x98>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b1c      	ldr	r3, [pc, #112]	@ (80038b4 <App_AdcConvertChgCurrent+0x9c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	18d2      	adds	r2, r2, r3
 8003848:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <App_AdcConvertChgCurrent+0x98>)
 800384a:	601a      	str	r2, [r3, #0]
		chg_current =  chg_current/dis_cal;
 800384c:	4b18      	ldr	r3, [pc, #96]	@ (80038b0 <App_AdcConvertChgCurrent+0x98>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b19      	ldr	r3, [pc, #100]	@ (80038b8 <App_AdcConvertChgCurrent+0xa0>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	0019      	movs	r1, r3
 8003856:	0010      	movs	r0, r2
 8003858:	f7fc fc54 	bl	8000104 <__udivsi3>
 800385c:	0003      	movs	r3, r0
 800385e:	001a      	movs	r2, r3
 8003860:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <App_AdcConvertChgCurrent+0x98>)
 8003862:	601a      	str	r2, [r3, #0]
		prev_chg_crnt = chg_current;
 8003864:	4b12      	ldr	r3, [pc, #72]	@ (80038b0 <App_AdcConvertChgCurrent+0x98>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	001a      	movs	r2, r3
 800386a:	4b12      	ldr	r3, [pc, #72]	@ (80038b4 <App_AdcConvertChgCurrent+0x9c>)
 800386c:	601a      	str	r2, [r3, #0]
		g_chg_current =(chg_current*8);
 800386e:	4b10      	ldr	r3, [pc, #64]	@ (80038b0 <App_AdcConvertChgCurrent+0x98>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	00da      	lsls	r2, r3, #3
 8003874:	4b11      	ldr	r3, [pc, #68]	@ (80038bc <App_AdcConvertChgCurrent+0xa4>)
 8003876:	601a      	str	r2, [r3, #0]
		chg_current_avg = 0;
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <App_AdcConvertChgCurrent+0x94>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
		chg_cnt = 0;
 800387e:	4b0a      	ldr	r3, [pc, #40]	@ (80038a8 <App_AdcConvertChgCurrent+0x90>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
	else
	{
		chg_current_avg = chg_current_avg+ g_AdcRaw[3];
		chg_cnt++;
	}
}
 8003884:	e00c      	b.n	80038a0 <App_AdcConvertChgCurrent+0x88>
		chg_current_avg = chg_current_avg+ g_AdcRaw[3];
 8003886:	4b0e      	ldr	r3, [pc, #56]	@ (80038c0 <App_AdcConvertChgCurrent+0xa8>)
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <App_AdcConvertChgCurrent+0x94>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	18d3      	adds	r3, r2, r3
 8003890:	001a      	movs	r2, r3
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <App_AdcConvertChgCurrent+0x94>)
 8003894:	601a      	str	r2, [r3, #0]
		chg_cnt++;
 8003896:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <App_AdcConvertChgCurrent+0x90>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	4b02      	ldr	r3, [pc, #8]	@ (80038a8 <App_AdcConvertChgCurrent+0x90>)
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	200003dc 	.word	0x200003dc
 80038ac:	200003cc 	.word	0x200003cc
 80038b0:	200003e8 	.word	0x200003e8
 80038b4:	200003d0 	.word	0x200003d0
 80038b8:	20000004 	.word	0x20000004
 80038bc:	20000418 	.word	0x20000418
 80038c0:	20000400 	.word	0x20000400

080038c4 <App_AdcConvertTemperature>:


void App_AdcConvertTemperature(void)
{
 80038c4:	b5b0      	push	{r4, r5, r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
	Vi = g_AdcRaw[2] * (3.3 / 4096.0);
 80038ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003a00 <App_AdcConvertTemperature+0x13c>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7ff f86c 	bl	80029ac <__aeabi_ui2d>
 80038d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003a04 <App_AdcConvertTemperature+0x140>)
 80038d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003a08 <App_AdcConvertTemperature+0x144>)
 80038d8:	f7fe f8ec 	bl	8001ab4 <__aeabi_dmul>
 80038dc:	0002      	movs	r2, r0
 80038de:	000b      	movs	r3, r1
 80038e0:	0010      	movs	r0, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	f7ff f8ce 	bl	8002a84 <__aeabi_d2f>
 80038e8:	1c02      	adds	r2, r0, #0
 80038ea:	4b48      	ldr	r3, [pc, #288]	@ (8003a0c <App_AdcConvertTemperature+0x148>)
 80038ec:	601a      	str	r2, [r3, #0]
	R = (Vi *2000) / (3.3 - Vi);
 80038ee:	4b47      	ldr	r3, [pc, #284]	@ (8003a0c <App_AdcConvertTemperature+0x148>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4947      	ldr	r1, [pc, #284]	@ (8003a10 <App_AdcConvertTemperature+0x14c>)
 80038f4:	1c18      	adds	r0, r3, #0
 80038f6:	f7fc feed 	bl	80006d4 <__aeabi_fmul>
 80038fa:	1c03      	adds	r3, r0, #0
 80038fc:	1c18      	adds	r0, r3, #0
 80038fe:	f7ff f879 	bl	80029f4 <__aeabi_f2d>
 8003902:	0004      	movs	r4, r0
 8003904:	000d      	movs	r5, r1
 8003906:	4b41      	ldr	r3, [pc, #260]	@ (8003a0c <App_AdcConvertTemperature+0x148>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1c18      	adds	r0, r3, #0
 800390c:	f7ff f872 	bl	80029f4 <__aeabi_f2d>
 8003910:	0002      	movs	r2, r0
 8003912:	000b      	movs	r3, r1
 8003914:	483b      	ldr	r0, [pc, #236]	@ (8003a04 <App_AdcConvertTemperature+0x140>)
 8003916:	493f      	ldr	r1, [pc, #252]	@ (8003a14 <App_AdcConvertTemperature+0x150>)
 8003918:	f7fe fbb2 	bl	8002080 <__aeabi_dsub>
 800391c:	0002      	movs	r2, r0
 800391e:	000b      	movs	r3, r1
 8003920:	0020      	movs	r0, r4
 8003922:	0029      	movs	r1, r5
 8003924:	f7fd fc8c 	bl	8001240 <__aeabi_ddiv>
 8003928:	0002      	movs	r2, r0
 800392a:	000b      	movs	r3, r1
 800392c:	0010      	movs	r0, r2
 800392e:	0019      	movs	r1, r3
 8003930:	f7ff f8a8 	bl	8002a84 <__aeabi_d2f>
 8003934:	1c02      	adds	r2, r0, #0
 8003936:	4b38      	ldr	r3, [pc, #224]	@ (8003a18 <App_AdcConvertTemperature+0x154>)
 8003938:	601a      	str	r2, [r3, #0]

	r_long=R/10000;
 800393a:	4b37      	ldr	r3, [pc, #220]	@ (8003a18 <App_AdcConvertTemperature+0x154>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4937      	ldr	r1, [pc, #220]	@ (8003a1c <App_AdcConvertTemperature+0x158>)
 8003940:	1c18      	adds	r0, r3, #0
 8003942:	f7fc fdb1 	bl	80004a8 <__aeabi_fdiv>
 8003946:	1c03      	adds	r3, r0, #0
 8003948:	1c1a      	adds	r2, r3, #0
 800394a:	4b35      	ldr	r3, [pc, #212]	@ (8003a20 <App_AdcConvertTemperature+0x15c>)
 800394c:	601a      	str	r2, [r3, #0]

	T =  1 / ((1 / To) + ((log(r_long)) / B));
 800394e:	4b35      	ldr	r3, [pc, #212]	@ (8003a24 <App_AdcConvertTemperature+0x160>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	1c19      	adds	r1, r3, #0
 8003954:	20fe      	movs	r0, #254	@ 0xfe
 8003956:	0580      	lsls	r0, r0, #22
 8003958:	f7fc fda6 	bl	80004a8 <__aeabi_fdiv>
 800395c:	1c03      	adds	r3, r0, #0
 800395e:	1c18      	adds	r0, r3, #0
 8003960:	f7ff f848 	bl	80029f4 <__aeabi_f2d>
 8003964:	0004      	movs	r4, r0
 8003966:	000d      	movs	r5, r1
 8003968:	4b2d      	ldr	r3, [pc, #180]	@ (8003a20 <App_AdcConvertTemperature+0x15c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	1c18      	adds	r0, r3, #0
 800396e:	f7ff f841 	bl	80029f4 <__aeabi_f2d>
 8003972:	0002      	movs	r2, r0
 8003974:	000b      	movs	r3, r1
 8003976:	0010      	movs	r0, r2
 8003978:	0019      	movs	r1, r3
 800397a:	f005 fd59 	bl	8009430 <log>
 800397e:	6038      	str	r0, [r7, #0]
 8003980:	6079      	str	r1, [r7, #4]
 8003982:	4b29      	ldr	r3, [pc, #164]	@ (8003a28 <App_AdcConvertTemperature+0x164>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0018      	movs	r0, r3
 8003988:	f7ff f810 	bl	80029ac <__aeabi_ui2d>
 800398c:	0002      	movs	r2, r0
 800398e:	000b      	movs	r3, r1
 8003990:	6838      	ldr	r0, [r7, #0]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	f7fd fc54 	bl	8001240 <__aeabi_ddiv>
 8003998:	0002      	movs	r2, r0
 800399a:	000b      	movs	r3, r1
 800399c:	0020      	movs	r0, r4
 800399e:	0029      	movs	r1, r5
 80039a0:	f7fd f888 	bl	8000ab4 <__aeabi_dadd>
 80039a4:	0002      	movs	r2, r0
 80039a6:	000b      	movs	r3, r1
 80039a8:	2000      	movs	r0, #0
 80039aa:	4920      	ldr	r1, [pc, #128]	@ (8003a2c <App_AdcConvertTemperature+0x168>)
 80039ac:	f7fd fc48 	bl	8001240 <__aeabi_ddiv>
 80039b0:	0002      	movs	r2, r0
 80039b2:	000b      	movs	r3, r1
 80039b4:	0010      	movs	r0, r2
 80039b6:	0019      	movs	r1, r3
 80039b8:	f7fe ff8e 	bl	80028d8 <__aeabi_d2iz>
 80039bc:	0002      	movs	r2, r0
 80039be:	4b1c      	ldr	r3, [pc, #112]	@ (8003a30 <App_AdcConvertTemperature+0x16c>)
 80039c0:	601a      	str	r2, [r3, #0]

	g_temperature = T - 273.15+9;
 80039c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <App_AdcConvertTemperature+0x16c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7fe ffc2 	bl	8002950 <__aeabi_i2d>
 80039cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a04 <App_AdcConvertTemperature+0x140>)
 80039ce:	4b19      	ldr	r3, [pc, #100]	@ (8003a34 <App_AdcConvertTemperature+0x170>)
 80039d0:	f7fe fb56 	bl	8002080 <__aeabi_dsub>
 80039d4:	0002      	movs	r2, r0
 80039d6:	000b      	movs	r3, r1
 80039d8:	0010      	movs	r0, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	4b16      	ldr	r3, [pc, #88]	@ (8003a38 <App_AdcConvertTemperature+0x174>)
 80039e0:	f7fd f868 	bl	8000ab4 <__aeabi_dadd>
 80039e4:	0002      	movs	r2, r0
 80039e6:	000b      	movs	r3, r1
 80039e8:	0010      	movs	r0, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	f7fc fd3e 	bl	800046c <__aeabi_d2uiz>
 80039f0:	0002      	movs	r2, r0
 80039f2:	4b12      	ldr	r3, [pc, #72]	@ (8003a3c <App_AdcConvertTemperature+0x178>)
 80039f4:	601a      	str	r2, [r3, #0]
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b002      	add	sp, #8
 80039fc:	bdb0      	pop	{r4, r5, r7, pc}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	20000400 	.word	0x20000400
 8003a04:	66666666 	.word	0x66666666
 8003a08:	3f4a6666 	.word	0x3f4a6666
 8003a0c:	200003f0 	.word	0x200003f0
 8003a10:	44fa0000 	.word	0x44fa0000
 8003a14:	400a6666 	.word	0x400a6666
 8003a18:	200003ec 	.word	0x200003ec
 8003a1c:	461c4000 	.word	0x461c4000
 8003a20:	200003f8 	.word	0x200003f8
 8003a24:	2000000c 	.word	0x2000000c
 8003a28:	20000008 	.word	0x20000008
 8003a2c:	3ff00000 	.word	0x3ff00000
 8003a30:	200003f4 	.word	0x200003f4
 8003a34:	40711266 	.word	0x40711266
 8003a38:	40220000 	.word	0x40220000
 8003a3c:	2000041c 	.word	0x2000041c

08003a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b095      	sub	sp, #84	@ 0x54
 8003a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a46:	2414      	movs	r4, #20
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	233c      	movs	r3, #60	@ 0x3c
 8003a4e:	001a      	movs	r2, r3
 8003a50:	2100      	movs	r1, #0
 8003a52:	f005 fcba 	bl	80093ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	0018      	movs	r0, r3
 8003a5a:	2310      	movs	r3, #16
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f005 fcb3 	bl	80093ca <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a64:	2380      	movs	r3, #128	@ 0x80
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f002 fed1 	bl	8006810 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	2202      	movs	r2, #2
 8003a72:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	2280      	movs	r2, #128	@ 0x80
 8003a78:	0052      	lsls	r2, r2, #1
 8003a7a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003a7c:	0021      	movs	r1, r4
 8003a7e:	187b      	adds	r3, r7, r1
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	2240      	movs	r2, #64	@ 0x40
 8003a88:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	2202      	movs	r2, #2
 8003a94:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	2200      	movs	r2, #0
 8003a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	2280      	movs	r2, #128	@ 0x80
 8003aa6:	0292      	lsls	r2, r2, #10
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8003aaa:	187b      	adds	r3, r7, r1
 8003aac:	22c0      	movs	r2, #192	@ 0xc0
 8003aae:	04d2      	lsls	r2, r2, #19
 8003ab0:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ab2:	187b      	adds	r3, r7, r1
 8003ab4:	2280      	movs	r2, #128	@ 0x80
 8003ab6:	0592      	lsls	r2, r2, #22
 8003ab8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	0018      	movs	r0, r3
 8003abe:	f002 fee7 	bl	8006890 <HAL_RCC_OscConfig>
 8003ac2:	1e03      	subs	r3, r0, #0
 8003ac4:	d001      	beq.n	8003aca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003ac6:	f000 fb2b 	bl	8004120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	2207      	movs	r2, #7
 8003ace:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ad0:	1d3b      	adds	r3, r7, #4
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	2280      	movs	r2, #128	@ 0x80
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f003 fa31 	bl	8006f50 <HAL_RCC_ClockConfig>
 8003aee:	1e03      	subs	r3, r0, #0
 8003af0:	d001      	beq.n	8003af6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003af2:	f000 fb15 	bl	8004120 <Error_Handler>
  }
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b015      	add	sp, #84	@ 0x54
 8003afc:	bd90      	pop	{r4, r7, pc}
	...

08003b00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003b04:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b06:	4a23      	ldr	r2, [pc, #140]	@ (8003b94 <MX_ADC1_Init+0x94>)
 8003b08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003b0a:	4b21      	ldr	r3, [pc, #132]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b0c:	2280      	movs	r2, #128	@ 0x80
 8003b0e:	05d2      	lsls	r2, r2, #23
 8003b10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b12:	4b1f      	ldr	r3, [pc, #124]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b18:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b20:	2280      	movs	r2, #128	@ 0x80
 8003b22:	0392      	lsls	r2, r2, #14
 8003b24:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b26:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b28:	2204      	movs	r2, #4
 8003b2a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003b2c:	4b18      	ldr	r3, [pc, #96]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003b32:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003b38:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003b3e:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b44:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b52:	222c      	movs	r2, #44	@ 0x2c
 8003b54:	2100      	movs	r1, #0
 8003b56:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003b58:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b6c:	223c      	movs	r2, #60	@ 0x3c
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003b72:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b78:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <MX_ADC1_Init+0x90>)
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f000 ff54 	bl	8004a28 <HAL_ADC_Init>
 8003b80:	1e03      	subs	r3, r0, #0
 8003b82:	d001      	beq.n	8003b88 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8003b84:	f000 facc 	bl	8004120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	20000088 	.word	0x20000088
 8003b94:	40012400 	.word	0x40012400

08003b98 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003b9c:	4b20      	ldr	r3, [pc, #128]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003b9e:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <MX_FDCAN1_Init+0x8c>)
 8003ba0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003bae:	4b1c      	ldr	r3, [pc, #112]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8003bba:	4b19      	ldr	r3, [pc, #100]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003bc0:	4b17      	ldr	r3, [pc, #92]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8003bc6:	4b16      	ldr	r3, [pc, #88]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bc8:	2202      	movs	r2, #2
 8003bca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8003bcc:	4b14      	ldr	r3, [pc, #80]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bce:	2210      	movs	r2, #16
 8003bd0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 47;
 8003bd2:	4b13      	ldr	r3, [pc, #76]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bd4:	222f      	movs	r2, #47	@ 0x2f
 8003bd6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8003bd8:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bda:	2210      	movs	r2, #16
 8003bdc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003be4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003be6:	2204      	movs	r2, #4
 8003be8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bec:	2205      	movs	r2, #5
 8003bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8003bfc:	4b08      	ldr	r3, [pc, #32]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003c02:	4b07      	ldr	r3, [pc, #28]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003c08:	4b05      	ldr	r3, [pc, #20]	@ (8003c20 <MX_FDCAN1_Init+0x88>)
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f001 fe82 	bl	8005914 <HAL_FDCAN_Init>
 8003c10:	1e03      	subs	r3, r0, #0
 8003c12:	d001      	beq.n	8003c18 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003c14:	f000 fa84 	bl	8004120 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003c18:	46c0      	nop			@ (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	200000ec 	.word	0x200000ec
 8003c24:	40006400 	.word	0x40006400

08003c28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b09c      	sub	sp, #112	@ 0x70
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c2e:	2360      	movs	r3, #96	@ 0x60
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	0018      	movs	r0, r3
 8003c34:	2310      	movs	r3, #16
 8003c36:	001a      	movs	r2, r3
 8003c38:	2100      	movs	r1, #0
 8003c3a:	f005 fbc6 	bl	80093ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c3e:	2354      	movs	r3, #84	@ 0x54
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	0018      	movs	r0, r3
 8003c44:	230c      	movs	r3, #12
 8003c46:	001a      	movs	r2, r3
 8003c48:	2100      	movs	r1, #0
 8003c4a:	f005 fbbe 	bl	80093ca <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c4e:	2338      	movs	r3, #56	@ 0x38
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	0018      	movs	r0, r3
 8003c54:	231c      	movs	r3, #28
 8003c56:	001a      	movs	r2, r3
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f005 fbb6 	bl	80093ca <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	0018      	movs	r0, r3
 8003c62:	2334      	movs	r3, #52	@ 0x34
 8003c64:	001a      	movs	r2, r3
 8003c66:	2100      	movs	r1, #0
 8003c68:	f005 fbaf 	bl	80093ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c6c:	4b51      	ldr	r3, [pc, #324]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003c6e:	4a52      	ldr	r2, [pc, #328]	@ (8003db8 <MX_TIM1_Init+0x190>)
 8003c70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8003c72:	4b50      	ldr	r3, [pc, #320]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003c74:	2240      	movs	r2, #64	@ 0x40
 8003c76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c78:	4b4e      	ldr	r3, [pc, #312]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8003c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003c80:	22c8      	movs	r2, #200	@ 0xc8
 8003c82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c84:	4b4b      	ldr	r3, [pc, #300]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c90:	4b48      	ldr	r3, [pc, #288]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003c92:	2280      	movs	r2, #128	@ 0x80
 8003c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c96:	4b47      	ldr	r3, [pc, #284]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f003 fd1f 	bl	80076dc <HAL_TIM_Base_Init>
 8003c9e:	1e03      	subs	r3, r0, #0
 8003ca0:	d001      	beq.n	8003ca6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003ca2:	f000 fa3d 	bl	8004120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; //32MHZ
 8003ca6:	2160      	movs	r1, #96	@ 0x60
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	2280      	movs	r2, #128	@ 0x80
 8003cac:	0152      	lsls	r2, r2, #5
 8003cae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003cb0:	187a      	adds	r2, r7, r1
 8003cb2:	4b40      	ldr	r3, [pc, #256]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003cb4:	0011      	movs	r1, r2
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f004 f94c 	bl	8007f54 <HAL_TIM_ConfigClockSource>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003cc0:	f000 fa2e 	bl	8004120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f003 fdc2 	bl	8007850 <HAL_TIM_PWM_Init>
 8003ccc:	1e03      	subs	r3, r0, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003cd0:	f000 fa26 	bl	8004120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd4:	2154      	movs	r1, #84	@ 0x54
 8003cd6:	187b      	adds	r3, r7, r1
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003cdc:	187b      	adds	r3, r7, r1
 8003cde:	2200      	movs	r2, #0
 8003ce0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ce2:	187b      	adds	r3, r7, r1
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ce8:	187a      	adds	r2, r7, r1
 8003cea:	4b32      	ldr	r3, [pc, #200]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003cec:	0011      	movs	r1, r2
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f004 fe34 	bl	800895c <HAL_TIMEx_MasterConfigSynchronization>
 8003cf4:	1e03      	subs	r3, r0, #0
 8003cf6:	d001      	beq.n	8003cfc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8003cf8:	f000 fa12 	bl	8004120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cfc:	2138      	movs	r1, #56	@ 0x38
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2260      	movs	r2, #96	@ 0x60
 8003d02:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	2200      	movs	r2, #0
 8003d08:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	2200      	movs	r2, #0
 8003d14:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	2200      	movs	r2, #0
 8003d1a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	2200      	movs	r2, #0
 8003d20:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	2200      	movs	r2, #0
 8003d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) //PA8 voltage control
 8003d28:	1879      	adds	r1, r7, r1
 8003d2a:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f004 f810 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d001      	beq.n	8003d3c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8003d38:	f000 f9f2 	bl	8004120 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	2200      	movs	r2, #0
 8003d46:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	2200      	movs	r2, #0
 8003d52:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	2280      	movs	r2, #128	@ 0x80
 8003d5e:	0192      	lsls	r2, r2, #6
 8003d60:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003d62:	1d3b      	adds	r3, r7, #4
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	2200      	movs	r2, #0
 8003d72:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	2280      	movs	r2, #128	@ 0x80
 8003d78:	0492      	lsls	r2, r2, #18
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	2200      	movs	r2, #0
 8003d80:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	2200      	movs	r2, #0
 8003d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d8e:	1d3a      	adds	r2, r7, #4
 8003d90:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003d92:	0011      	movs	r1, r2
 8003d94:	0018      	movs	r0, r3
 8003d96:	f004 fe57 	bl	8008a48 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d9a:	1e03      	subs	r3, r0, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8003d9e:	f000 f9bf 	bl	8004120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003da2:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <MX_TIM1_Init+0x18c>)
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 fb1b 	bl	80043e0 <HAL_TIM_MspPostInit>

}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b01c      	add	sp, #112	@ 0x70
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	20000150 	.word	0x20000150
 8003db8:	40012c00 	.word	0x40012c00

08003dbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08e      	sub	sp, #56	@ 0x38
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc2:	2328      	movs	r3, #40	@ 0x28
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	2310      	movs	r3, #16
 8003dca:	001a      	movs	r2, r3
 8003dcc:	2100      	movs	r1, #0
 8003dce:	f005 fafc 	bl	80093ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd2:	231c      	movs	r3, #28
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	230c      	movs	r3, #12
 8003dda:	001a      	movs	r2, r3
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f005 faf4 	bl	80093ca <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de2:	003b      	movs	r3, r7
 8003de4:	0018      	movs	r0, r3
 8003de6:	231c      	movs	r3, #28
 8003de8:	001a      	movs	r2, r3
 8003dea:	2100      	movs	r1, #0
 8003dec:	f005 faed 	bl	80093ca <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003df0:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003df2:	4a30      	ldr	r2, [pc, #192]	@ (8003eb4 <MX_TIM3_Init+0xf8>)
 8003df4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24-1;
 8003df6:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003df8:	2217      	movs	r2, #23
 8003dfa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003e02:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003e04:	2263      	movs	r2, #99	@ 0x63
 8003e06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e08:	4b29      	ldr	r3, [pc, #164]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e0e:	4b28      	ldr	r3, [pc, #160]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003e10:	2280      	movs	r2, #128	@ 0x80
 8003e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e14:	4b26      	ldr	r3, [pc, #152]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003e16:	0018      	movs	r0, r3
 8003e18:	f003 fc60 	bl	80076dc <HAL_TIM_Base_Init>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003e20:	f000 f97e 	bl	8004120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e24:	2128      	movs	r1, #40	@ 0x28
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2280      	movs	r2, #128	@ 0x80
 8003e2a:	0152      	lsls	r2, r2, #5
 8003e2c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e2e:	187a      	adds	r2, r7, r1
 8003e30:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003e32:	0011      	movs	r1, r2
 8003e34:	0018      	movs	r0, r3
 8003e36:	f004 f88d 	bl	8007f54 <HAL_TIM_ConfigClockSource>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003e3e:	f000 f96f 	bl	8004120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e42:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003e44:	0018      	movs	r0, r3
 8003e46:	f003 fd03 	bl	8007850 <HAL_TIM_PWM_Init>
 8003e4a:	1e03      	subs	r3, r0, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003e4e:	f000 f967 	bl	8004120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e52:	211c      	movs	r1, #28
 8003e54:	187b      	adds	r3, r7, r1
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e60:	187a      	adds	r2, r7, r1
 8003e62:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003e64:	0011      	movs	r1, r2
 8003e66:	0018      	movs	r0, r3
 8003e68:	f004 fd78 	bl	800895c <HAL_TIMEx_MasterConfigSynchronization>
 8003e6c:	1e03      	subs	r3, r0, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003e70:	f000 f956 	bl	8004120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e74:	003b      	movs	r3, r7
 8003e76:	2260      	movs	r2, #96	@ 0x60
 8003e78:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003e7a:	003b      	movs	r3, r7
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e80:	003b      	movs	r3, r7
 8003e82:	2200      	movs	r2, #0
 8003e84:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e86:	003b      	movs	r3, r7
 8003e88:	2200      	movs	r2, #0
 8003e8a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e8c:	0039      	movs	r1, r7
 8003e8e:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003e90:	220c      	movs	r2, #12
 8003e92:	0018      	movs	r0, r3
 8003e94:	f003 ff5e 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8003e98:	1e03      	subs	r3, r0, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8003e9c:	f000 f940 	bl	8004120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ea0:	4b03      	ldr	r3, [pc, #12]	@ (8003eb0 <MX_TIM3_Init+0xf4>)
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fa9c 	bl	80043e0 <HAL_TIM_MspPostInit>

}
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b00e      	add	sp, #56	@ 0x38
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	2000019c 	.word	0x2000019c
 8003eb4:	40000400 	.word	0x40000400

08003eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b089      	sub	sp, #36	@ 0x24
 8003ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebe:	240c      	movs	r4, #12
 8003ec0:	193b      	adds	r3, r7, r4
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	2314      	movs	r3, #20
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	2100      	movs	r1, #0
 8003eca:	f005 fa7e 	bl	80093ca <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ece:	4b44      	ldr	r3, [pc, #272]	@ (8003fe0 <MX_GPIO_Init+0x128>)
 8003ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ed2:	4b43      	ldr	r3, [pc, #268]	@ (8003fe0 <MX_GPIO_Init+0x128>)
 8003ed4:	2104      	movs	r1, #4
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003eda:	4b41      	ldr	r3, [pc, #260]	@ (8003fe0 <MX_GPIO_Init+0x128>)
 8003edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ede:	2204      	movs	r2, #4
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8003fe0 <MX_GPIO_Init+0x128>)
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eea:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe0 <MX_GPIO_Init+0x128>)
 8003eec:	2101      	movs	r1, #1
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <MX_GPIO_Init+0x128>)
 8003ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	4013      	ands	r3, r2
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efe:	4b38      	ldr	r3, [pc, #224]	@ (8003fe0 <MX_GPIO_Init+0x128>)
 8003f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f02:	4b37      	ldr	r3, [pc, #220]	@ (8003fe0 <MX_GPIO_Init+0x128>)
 8003f04:	2102      	movs	r1, #2
 8003f06:	430a      	orrs	r2, r1
 8003f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f0a:	4b35      	ldr	r3, [pc, #212]	@ (8003fe0 <MX_GPIO_Init+0x128>)
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0e:	2202      	movs	r2, #2
 8003f10:	4013      	ands	r3, r2
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003f16:	23c0      	movs	r3, #192	@ 0xc0
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	4832      	ldr	r0, [pc, #200]	@ (8003fe4 <MX_GPIO_Init+0x12c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	0019      	movs	r1, r3
 8003f20:	f002 fc3e 	bl	80067a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15, GPIO_PIN_RESET);
 8003f24:	4930      	ldr	r1, [pc, #192]	@ (8003fe8 <MX_GPIO_Init+0x130>)
 8003f26:	23a0      	movs	r3, #160	@ 0xa0
 8003f28:	05db      	lsls	r3, r3, #23
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f002 fc37 	bl	80067a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003f32:	492e      	ldr	r1, [pc, #184]	@ (8003fec <MX_GPIO_Init+0x134>)
 8003f34:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff0 <MX_GPIO_Init+0x138>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f002 fc31 	bl	80067a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003f3e:	193b      	adds	r3, r7, r4
 8003f40:	22c0      	movs	r2, #192	@ 0xc0
 8003f42:	0212      	lsls	r2, r2, #8
 8003f44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	2201      	movs	r2, #1
 8003f4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f4c:	193b      	adds	r3, r7, r4
 8003f4e:	2201      	movs	r2, #1
 8003f50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f52:	193b      	adds	r3, r7, r4
 8003f54:	2200      	movs	r2, #0
 8003f56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f58:	193b      	adds	r3, r7, r4
 8003f5a:	4a22      	ldr	r2, [pc, #136]	@ (8003fe4 <MX_GPIO_Init+0x12c>)
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	0010      	movs	r0, r2
 8003f60:	f002 fab2 	bl	80064c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f64:	193b      	adds	r3, r7, r4
 8003f66:	2220      	movs	r2, #32
 8003f68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6a:	193b      	adds	r3, r7, r4
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	193b      	adds	r3, r7, r4
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	2200      	movs	r2, #0
 8003f7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7c:	193a      	adds	r2, r7, r4
 8003f7e:	23a0      	movs	r3, #160	@ 0xa0
 8003f80:	05db      	lsls	r3, r3, #23
 8003f82:	0011      	movs	r1, r2
 8003f84:	0018      	movs	r0, r3
 8003f86:	f002 fa9f 	bl	80064c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	4a19      	ldr	r2, [pc, #100]	@ (8003ff4 <MX_GPIO_Init+0x13c>)
 8003f8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f90:	193b      	adds	r3, r7, r4
 8003f92:	2201      	movs	r2, #1
 8003f94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f96:	193b      	adds	r3, r7, r4
 8003f98:	2201      	movs	r2, #1
 8003f9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	193b      	adds	r3, r7, r4
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa2:	193a      	adds	r2, r7, r4
 8003fa4:	23a0      	movs	r3, #160	@ 0xa0
 8003fa6:	05db      	lsls	r3, r3, #23
 8003fa8:	0011      	movs	r1, r2
 8003faa:	0018      	movs	r0, r3
 8003fac:	f002 fa8c 	bl	80064c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003fb0:	0021      	movs	r1, r4
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003fec <MX_GPIO_Init+0x134>)
 8003fb6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb8:	187b      	adds	r3, r7, r1
 8003fba:	2201      	movs	r2, #1
 8003fbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fbe:	187b      	adds	r3, r7, r1
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc4:	187b      	adds	r3, r7, r1
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	4a08      	ldr	r2, [pc, #32]	@ (8003ff0 <MX_GPIO_Init+0x138>)
 8003fce:	0019      	movs	r1, r3
 8003fd0:	0010      	movs	r0, r2
 8003fd2:	f002 fa79 	bl	80064c8 <HAL_GPIO_Init>


}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b009      	add	sp, #36	@ 0x24
 8003fdc:	bd90      	pop	{r4, r7, pc}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	50000800 	.word	0x50000800
 8003fe8:	000080a0 	.word	0x000080a0
 8003fec:	000003f1 	.word	0x000003f1
 8003ff0:	50000400 	.word	0x50000400
 8003ff4:	00008080 	.word	0x00008080

08003ff8 <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8
  FDCAN_FilterTypeDef sFilterConfig;

  /* Configure Rx filter */
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8003ffe:	003b      	movs	r3, r7
 8004000:	2280      	movs	r2, #128	@ 0x80
 8004002:	05d2      	lsls	r2, r2, #23
 8004004:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8004006:	003b      	movs	r3, r7
 8004008:	2200      	movs	r2, #0
 800400a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800400c:	003b      	movs	r3, r7
 800400e:	2202      	movs	r2, #2
 8004010:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8004012:	003b      	movs	r3, r7
 8004014:	2201      	movs	r2, #1
 8004016:	60da      	str	r2, [r3, #12]
//  sFilterConfig.FilterID1 =  0x1806E5F4; //90
//  sFilterConfig.FilterID2 = 0x18FF50E5;  //0x7ff

  sFilterConfig.FilterID1 = 0x00000000;          // No specific ID
 8004018:	003b      	movs	r3, r7
 800401a:	2200      	movs	r2, #0
 800401c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x00000000;          // Mask = 0 (ignores all bits)
 800401e:	003b      	movs	r3, r7
 8004020:	2200      	movs	r2, #0
 8004022:	615a      	str	r2, [r3, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8004024:	003a      	movs	r2, r7
 8004026:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <FDCAN_Config+0xc0>)
 8004028:	0011      	movs	r1, r2
 800402a:	0018      	movs	r0, r3
 800402c:	f001 fdd8 	bl	8005be0 <HAL_FDCAN_ConfigFilter>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d001      	beq.n	8004038 <FDCAN_Config+0x40>
  {
    Error_Handler();
 8004034:	f000 f874 	bl	8004120 <Error_Handler>
  }

  /* Configure global filter:
     Filter all remote frames with STD and EXT ID
     Reject non matching frames with STD ID and EXT ID */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8004038:	481f      	ldr	r0, [pc, #124]	@ (80040b8 <FDCAN_Config+0xc0>)
 800403a:	2300      	movs	r3, #0
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	2300      	movs	r3, #0
 8004040:	2202      	movs	r2, #2
 8004042:	2102      	movs	r1, #2
 8004044:	f001 fe29 	bl	8005c9a <HAL_FDCAN_ConfigGlobalFilter>
 8004048:	1e03      	subs	r3, r0, #0
 800404a:	d001      	beq.n	8004050 <FDCAN_Config+0x58>
  {
    Error_Handler();
 800404c:	f000 f868 	bl	8004120 <Error_Handler>
  }

  /* Start the FDCAN module */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8004050:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <FDCAN_Config+0xc0>)
 8004052:	0018      	movs	r0, r3
 8004054:	f001 fe51 	bl	8005cfa <HAL_FDCAN_Start>
 8004058:	1e03      	subs	r3, r0, #0
 800405a:	d001      	beq.n	8004060 <FDCAN_Config+0x68>
  {
    Error_Handler();
 800405c:	f000 f860 	bl	8004120 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004060:	4b15      	ldr	r3, [pc, #84]	@ (80040b8 <FDCAN_Config+0xc0>)
 8004062:	2200      	movs	r2, #0
 8004064:	2101      	movs	r1, #1
 8004066:	0018      	movs	r0, r3
 8004068:	f001 ff50 	bl	8005f0c <HAL_FDCAN_ActivateNotification>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d001      	beq.n	8004074 <FDCAN_Config+0x7c>
  {
    Error_Handler();
 8004070:	f000 f856 	bl	8004120 <Error_Handler>
  }

  /* Prepare Tx Header */
  TxHeader.Identifier = 0x18FF50E5;
 8004074:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <FDCAN_Config+0xc4>)
 8004076:	4a12      	ldr	r2, [pc, #72]	@ (80040c0 <FDCAN_Config+0xc8>)
 8004078:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 800407a:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <FDCAN_Config+0xc4>)
 800407c:	2280      	movs	r2, #128	@ 0x80
 800407e:	05d2      	lsls	r2, r2, #23
 8004080:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004082:	4b0e      	ldr	r3, [pc, #56]	@ (80040bc <FDCAN_Config+0xc4>)
 8004084:	2200      	movs	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <FDCAN_Config+0xc4>)
 800408a:	2280      	movs	r2, #128	@ 0x80
 800408c:	0312      	lsls	r2, r2, #12
 800408e:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004090:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <FDCAN_Config+0xc4>)
 8004092:	2200      	movs	r2, #0
 8004094:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8004096:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <FDCAN_Config+0xc4>)
 8004098:	2200      	movs	r2, #0
 800409a:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800409c:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <FDCAN_Config+0xc4>)
 800409e:	2200      	movs	r2, #0
 80040a0:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80040a2:	4b06      	ldr	r3, [pc, #24]	@ (80040bc <FDCAN_Config+0xc4>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 80040a8:	4b04      	ldr	r3, [pc, #16]	@ (80040bc <FDCAN_Config+0xc4>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b006      	add	sp, #24
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	200000ec 	.word	0x200000ec
 80040bc:	200002f8 	.word	0x200002f8
 80040c0:	18ff50e5 	.word	0x18ff50e5

080040c4 <HAL_FDCAN_RxFifo0Callback>:



void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2201      	movs	r2, #1
 80040d2:	4013      	ands	r3, r2
 80040d4:	d018      	beq.n	8004108 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80040d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80040d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004114 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	2140      	movs	r1, #64	@ 0x40
 80040de:	f001 fe33 	bl	8005d48 <HAL_FDCAN_GetRxMessage>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d001      	beq.n	80040ea <HAL_FDCAN_RxFifo0Callback+0x26>
    {
      Error_Handler();
 80040e6:	f000 f81b 	bl	8004120 <Error_Handler>
    }
    // Call function to store data, passing CAN ID

        ProcessCANMessage(&RxHeader, RxData);  // Call function to store data
 80040ea:	4a09      	ldr	r2, [pc, #36]	@ (8004110 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80040ec:	4b09      	ldr	r3, [pc, #36]	@ (8004114 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7fe fd67 	bl	8002bc4 <ProcessCANMessage>
        dataReceived++;
 80040f6:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	3301      	adds	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8004100:	801a      	strh	r2, [r3, #0]
        reveived_flag = 1;
 8004102:	4b06      	ldr	r3, [pc, #24]	@ (800411c <HAL_FDCAN_RxFifo0Callback+0x58>)
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
          	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); //D6 CAN


  }

}
 8004108:	46c0      	nop			@ (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}
 8004110:	200002f0 	.word	0x200002f0
 8004114:	200002c8 	.word	0x200002c8
 8004118:	200003b6 	.word	0x200003b6
 800411c:	200003fc 	.word	0x200003fc

08004120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004124:	b672      	cpsid	i
}
 8004126:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	e7fd      	b.n	8004128 <Error_Handler+0x8>

0800412c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004132:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <HAL_MspInit+0x44>)
 8004134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004136:	4b0e      	ldr	r3, [pc, #56]	@ (8004170 <HAL_MspInit+0x44>)
 8004138:	2101      	movs	r1, #1
 800413a:	430a      	orrs	r2, r1
 800413c:	641a      	str	r2, [r3, #64]	@ 0x40
 800413e:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <HAL_MspInit+0x44>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	2201      	movs	r2, #1
 8004144:	4013      	ands	r3, r2
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <HAL_MspInit+0x44>)
 800414c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800414e:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <HAL_MspInit+0x44>)
 8004150:	2180      	movs	r1, #128	@ 0x80
 8004152:	0549      	lsls	r1, r1, #21
 8004154:	430a      	orrs	r2, r1
 8004156:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <HAL_MspInit+0x44>)
 800415a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800415c:	2380      	movs	r3, #128	@ 0x80
 800415e:	055b      	lsls	r3, r3, #21
 8004160:	4013      	ands	r3, r2
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b002      	add	sp, #8
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	40021000 	.word	0x40021000

08004174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b09d      	sub	sp, #116	@ 0x74
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417c:	235c      	movs	r3, #92	@ 0x5c
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	0018      	movs	r0, r3
 8004182:	2314      	movs	r3, #20
 8004184:	001a      	movs	r2, r3
 8004186:	2100      	movs	r1, #0
 8004188:	f005 f91f 	bl	80093ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800418c:	2410      	movs	r4, #16
 800418e:	193b      	adds	r3, r7, r4
 8004190:	0018      	movs	r0, r3
 8004192:	234c      	movs	r3, #76	@ 0x4c
 8004194:	001a      	movs	r2, r3
 8004196:	2100      	movs	r1, #0
 8004198:	f005 f917 	bl	80093ca <memset>
  if(hadc->Instance==ADC1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a20      	ldr	r2, [pc, #128]	@ (8004224 <HAL_ADC_MspInit+0xb0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d139      	bne.n	800421a <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80041a6:	193b      	adds	r3, r7, r4
 80041a8:	2280      	movs	r2, #128	@ 0x80
 80041aa:	01d2      	lsls	r2, r2, #7
 80041ac:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80041ae:	193b      	adds	r3, r7, r4
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041b4:	193b      	adds	r3, r7, r4
 80041b6:	0018      	movs	r0, r3
 80041b8:	f003 f854 	bl	8007264 <HAL_RCCEx_PeriphCLKConfig>
 80041bc:	1e03      	subs	r3, r0, #0
 80041be:	d001      	beq.n	80041c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80041c0:	f7ff ffae 	bl	8004120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80041c4:	4b18      	ldr	r3, [pc, #96]	@ (8004228 <HAL_ADC_MspInit+0xb4>)
 80041c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041c8:	4b17      	ldr	r3, [pc, #92]	@ (8004228 <HAL_ADC_MspInit+0xb4>)
 80041ca:	2180      	movs	r1, #128	@ 0x80
 80041cc:	0349      	lsls	r1, r1, #13
 80041ce:	430a      	orrs	r2, r1
 80041d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80041d2:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <HAL_ADC_MspInit+0xb4>)
 80041d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041d6:	2380      	movs	r3, #128	@ 0x80
 80041d8:	035b      	lsls	r3, r3, #13
 80041da:	4013      	ands	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e0:	4b11      	ldr	r3, [pc, #68]	@ (8004228 <HAL_ADC_MspInit+0xb4>)
 80041e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041e4:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <HAL_ADC_MspInit+0xb4>)
 80041e6:	2101      	movs	r1, #1
 80041e8:	430a      	orrs	r2, r1
 80041ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80041ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <HAL_ADC_MspInit+0xb4>)
 80041ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f0:	2201      	movs	r2, #1
 80041f2:	4013      	ands	r3, r2
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80041f8:	215c      	movs	r1, #92	@ 0x5c
 80041fa:	187b      	adds	r3, r7, r1
 80041fc:	225f      	movs	r2, #95	@ 0x5f
 80041fe:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004200:	187b      	adds	r3, r7, r1
 8004202:	2203      	movs	r2, #3
 8004204:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	187b      	adds	r3, r7, r1
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420c:	187a      	adds	r2, r7, r1
 800420e:	23a0      	movs	r3, #160	@ 0xa0
 8004210:	05db      	lsls	r3, r3, #23
 8004212:	0011      	movs	r1, r2
 8004214:	0018      	movs	r0, r3
 8004216:	f002 f957 	bl	80064c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b01d      	add	sp, #116	@ 0x74
 8004220:	bd90      	pop	{r4, r7, pc}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	40012400 	.word	0x40012400
 8004228:	40021000 	.word	0x40021000

0800422c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b09d      	sub	sp, #116	@ 0x74
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	235c      	movs	r3, #92	@ 0x5c
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	0018      	movs	r0, r3
 800423a:	2314      	movs	r3, #20
 800423c:	001a      	movs	r2, r3
 800423e:	2100      	movs	r1, #0
 8004240:	f005 f8c3 	bl	80093ca <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004244:	2410      	movs	r4, #16
 8004246:	193b      	adds	r3, r7, r4
 8004248:	0018      	movs	r0, r3
 800424a:	234c      	movs	r3, #76	@ 0x4c
 800424c:	001a      	movs	r2, r3
 800424e:	2100      	movs	r1, #0
 8004250:	f005 f8bb 	bl	80093ca <memset>
  if(hfdcan->Instance==FDCAN1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a28      	ldr	r2, [pc, #160]	@ (80042fc <HAL_FDCAN_MspInit+0xd0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d149      	bne.n	80042f2 <HAL_FDCAN_MspInit+0xc6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800425e:	193b      	adds	r3, r7, r4
 8004260:	2280      	movs	r2, #128	@ 0x80
 8004262:	0492      	lsls	r2, r2, #18
 8004264:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004266:	193b      	adds	r3, r7, r4
 8004268:	2280      	movs	r2, #128	@ 0x80
 800426a:	0052      	lsls	r2, r2, #1
 800426c:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800426e:	193b      	adds	r3, r7, r4
 8004270:	0018      	movs	r0, r3
 8004272:	f002 fff7 	bl	8007264 <HAL_RCCEx_PeriphCLKConfig>
 8004276:	1e03      	subs	r3, r0, #0
 8004278:	d001      	beq.n	800427e <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 800427a:	f7ff ff51 	bl	8004120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800427e:	4b20      	ldr	r3, [pc, #128]	@ (8004300 <HAL_FDCAN_MspInit+0xd4>)
 8004280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004282:	4b1f      	ldr	r3, [pc, #124]	@ (8004300 <HAL_FDCAN_MspInit+0xd4>)
 8004284:	2180      	movs	r1, #128	@ 0x80
 8004286:	0149      	lsls	r1, r1, #5
 8004288:	430a      	orrs	r2, r1
 800428a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800428c:	4b1c      	ldr	r3, [pc, #112]	@ (8004300 <HAL_FDCAN_MspInit+0xd4>)
 800428e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004290:	2380      	movs	r3, #128	@ 0x80
 8004292:	015b      	lsls	r3, r3, #5
 8004294:	4013      	ands	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800429a:	4b19      	ldr	r3, [pc, #100]	@ (8004300 <HAL_FDCAN_MspInit+0xd4>)
 800429c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800429e:	4b18      	ldr	r3, [pc, #96]	@ (8004300 <HAL_FDCAN_MspInit+0xd4>)
 80042a0:	2101      	movs	r1, #1
 80042a2:	430a      	orrs	r2, r1
 80042a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80042a6:	4b16      	ldr	r3, [pc, #88]	@ (8004300 <HAL_FDCAN_MspInit+0xd4>)
 80042a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042aa:	2201      	movs	r2, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11 [PA9]     ------> FDCAN1_RX
    PA12 [PA10]     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80042b2:	215c      	movs	r1, #92	@ 0x5c
 80042b4:	187b      	adds	r3, r7, r1
 80042b6:	22c0      	movs	r2, #192	@ 0xc0
 80042b8:	0152      	lsls	r2, r2, #5
 80042ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042bc:	187b      	adds	r3, r7, r1
 80042be:	2202      	movs	r2, #2
 80042c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	187b      	adds	r3, r7, r1
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c8:	187b      	adds	r3, r7, r1
 80042ca:	2200      	movs	r2, #0
 80042cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 80042ce:	187b      	adds	r3, r7, r1
 80042d0:	2203      	movs	r2, #3
 80042d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d4:	187a      	adds	r2, r7, r1
 80042d6:	23a0      	movs	r3, #160	@ 0xa0
 80042d8:	05db      	lsls	r3, r3, #23
 80042da:	0011      	movs	r1, r2
 80042dc:	0018      	movs	r0, r3
 80042de:	f002 f8f3 	bl	80064c8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 80042e2:	2200      	movs	r2, #0
 80042e4:	2100      	movs	r1, #0
 80042e6:	2015      	movs	r0, #21
 80042e8:	f001 fa1a 	bl	8005720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 80042ec:	2015      	movs	r0, #21
 80042ee:	f001 fa2c 	bl	800574a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b01d      	add	sp, #116	@ 0x74
 80042f8:	bd90      	pop	{r4, r7, pc}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	40006400 	.word	0x40006400
 8004300:	40021000 	.word	0x40021000

08004304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b099      	sub	sp, #100	@ 0x64
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800430c:	2414      	movs	r4, #20
 800430e:	193b      	adds	r3, r7, r4
 8004310:	0018      	movs	r0, r3
 8004312:	234c      	movs	r3, #76	@ 0x4c
 8004314:	001a      	movs	r2, r3
 8004316:	2100      	movs	r1, #0
 8004318:	f005 f857 	bl	80093ca <memset>
  if(htim_base->Instance==TIM1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2b      	ldr	r2, [pc, #172]	@ (80043d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d11d      	bne.n	8004362 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004326:	193b      	adds	r3, r7, r4
 8004328:	2280      	movs	r2, #128	@ 0x80
 800432a:	0392      	lsls	r2, r2, #14
 800432c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800432e:	193b      	adds	r3, r7, r4
 8004330:	2200      	movs	r2, #0
 8004332:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004334:	193b      	adds	r3, r7, r4
 8004336:	0018      	movs	r0, r3
 8004338:	f002 ff94 	bl	8007264 <HAL_RCCEx_PeriphCLKConfig>
 800433c:	1e03      	subs	r3, r0, #0
 800433e:	d001      	beq.n	8004344 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004340:	f7ff feee 	bl	8004120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004344:	4b23      	ldr	r3, [pc, #140]	@ (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 8004346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004348:	4b22      	ldr	r3, [pc, #136]	@ (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 800434a:	2180      	movs	r1, #128	@ 0x80
 800434c:	0109      	lsls	r1, r1, #4
 800434e:	430a      	orrs	r2, r1
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40
 8004352:	4b20      	ldr	r3, [pc, #128]	@ (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 8004354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	4013      	ands	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004360:	e032      	b.n	80043c8 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM3)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1c      	ldr	r2, [pc, #112]	@ (80043d8 <HAL_TIM_Base_MspInit+0xd4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d114      	bne.n	8004396 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800436c:	4b19      	ldr	r3, [pc, #100]	@ (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 800436e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004370:	4b18      	ldr	r3, [pc, #96]	@ (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 8004372:	2102      	movs	r1, #2
 8004374:	430a      	orrs	r2, r1
 8004376:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004378:	4b16      	ldr	r3, [pc, #88]	@ (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 800437a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437c:	2202      	movs	r2, #2
 800437e:	4013      	ands	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 8004384:	2200      	movs	r2, #0
 8004386:	2100      	movs	r1, #0
 8004388:	2010      	movs	r0, #16
 800438a:	f001 f9c9 	bl	8005720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 800438e:	2010      	movs	r0, #16
 8004390:	f001 f9db 	bl	800574a <HAL_NVIC_EnableIRQ>
}
 8004394:	e018      	b.n	80043c8 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM6)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a10      	ldr	r2, [pc, #64]	@ (80043dc <HAL_TIM_Base_MspInit+0xd8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d113      	bne.n	80043c8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043a0:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 80043a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 80043a6:	2110      	movs	r1, #16
 80043a8:	430a      	orrs	r2, r1
 80043aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043ac:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <HAL_TIM_Base_MspInit+0xd0>)
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	2210      	movs	r2, #16
 80043b2:	4013      	ands	r3, r2
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80043b8:	2200      	movs	r2, #0
 80043ba:	2100      	movs	r1, #0
 80043bc:	2011      	movs	r0, #17
 80043be:	f001 f9af 	bl	8005720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80043c2:	2011      	movs	r0, #17
 80043c4:	f001 f9c1 	bl	800574a <HAL_NVIC_EnableIRQ>
}
 80043c8:	46c0      	nop			@ (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b019      	add	sp, #100	@ 0x64
 80043ce:	bd90      	pop	{r4, r7, pc}
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40001000 	.word	0x40001000

080043e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b08b      	sub	sp, #44	@ 0x2c
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e8:	2414      	movs	r4, #20
 80043ea:	193b      	adds	r3, r7, r4
 80043ec:	0018      	movs	r0, r3
 80043ee:	2314      	movs	r3, #20
 80043f0:	001a      	movs	r2, r3
 80043f2:	2100      	movs	r1, #0
 80043f4:	f004 ffe9 	bl	80093ca <memset>
  if(htim->Instance==TIM1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a29      	ldr	r2, [pc, #164]	@ (80044a4 <HAL_TIM_MspPostInit+0xc4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d124      	bne.n	800444c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004402:	4b29      	ldr	r3, [pc, #164]	@ (80044a8 <HAL_TIM_MspPostInit+0xc8>)
 8004404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004406:	4b28      	ldr	r3, [pc, #160]	@ (80044a8 <HAL_TIM_MspPostInit+0xc8>)
 8004408:	2101      	movs	r1, #1
 800440a:	430a      	orrs	r2, r1
 800440c:	635a      	str	r2, [r3, #52]	@ 0x34
 800440e:	4b26      	ldr	r3, [pc, #152]	@ (80044a8 <HAL_TIM_MspPostInit+0xc8>)
 8004410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004412:	2201      	movs	r2, #1
 8004414:	4013      	ands	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800441a:	193b      	adds	r3, r7, r4
 800441c:	22a0      	movs	r2, #160	@ 0xa0
 800441e:	00d2      	lsls	r2, r2, #3
 8004420:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004422:	0021      	movs	r1, r4
 8004424:	187b      	adds	r3, r7, r1
 8004426:	2202      	movs	r2, #2
 8004428:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442a:	187b      	adds	r3, r7, r1
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	187b      	adds	r3, r7, r1
 8004432:	2200      	movs	r2, #0
 8004434:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004436:	187b      	adds	r3, r7, r1
 8004438:	2202      	movs	r2, #2
 800443a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800443c:	187a      	adds	r2, r7, r1
 800443e:	23a0      	movs	r3, #160	@ 0xa0
 8004440:	05db      	lsls	r3, r3, #23
 8004442:	0011      	movs	r1, r2
 8004444:	0018      	movs	r0, r3
 8004446:	f002 f83f 	bl	80064c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800444a:	e026      	b.n	800449a <HAL_TIM_MspPostInit+0xba>
  else if(htim->Instance==TIM3)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a16      	ldr	r2, [pc, #88]	@ (80044ac <HAL_TIM_MspPostInit+0xcc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d121      	bne.n	800449a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004456:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <HAL_TIM_MspPostInit+0xc8>)
 8004458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800445a:	4b13      	ldr	r3, [pc, #76]	@ (80044a8 <HAL_TIM_MspPostInit+0xc8>)
 800445c:	2102      	movs	r1, #2
 800445e:	430a      	orrs	r2, r1
 8004460:	635a      	str	r2, [r3, #52]	@ 0x34
 8004462:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <HAL_TIM_MspPostInit+0xc8>)
 8004464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004466:	2202      	movs	r2, #2
 8004468:	4013      	ands	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800446e:	2114      	movs	r1, #20
 8004470:	187b      	adds	r3, r7, r1
 8004472:	2202      	movs	r2, #2
 8004474:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004476:	187b      	adds	r3, r7, r1
 8004478:	2202      	movs	r2, #2
 800447a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	187b      	adds	r3, r7, r1
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004482:	187b      	adds	r3, r7, r1
 8004484:	2200      	movs	r2, #0
 8004486:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004488:	187b      	adds	r3, r7, r1
 800448a:	2201      	movs	r2, #1
 800448c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448e:	187b      	adds	r3, r7, r1
 8004490:	4a07      	ldr	r2, [pc, #28]	@ (80044b0 <HAL_TIM_MspPostInit+0xd0>)
 8004492:	0019      	movs	r1, r3
 8004494:	0010      	movs	r0, r2
 8004496:	f002 f817 	bl	80064c8 <HAL_GPIO_Init>
}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b00b      	add	sp, #44	@ 0x2c
 80044a0:	bd90      	pop	{r4, r7, pc}
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40000400 	.word	0x40000400
 80044b0:	50000400 	.word	0x50000400

080044b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044b8:	46c0      	nop			@ (mov r8, r8)
 80044ba:	e7fd      	b.n	80044b8 <NMI_Handler+0x4>

080044bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044c0:	46c0      	nop			@ (mov r8, r8)
 80044c2:	e7fd      	b.n	80044c0 <HardFault_Handler+0x4>

080044c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80044c8:	46c0      	nop			@ (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044dc:	f000 f8fa 	bl	80046d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044e0:	46c0      	nop			@ (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */

  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044ec:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <TIM3_TIM4_IRQHandler+0x1c>)
 80044ee:	0018      	movs	r0, r3
 80044f0:	f003 fafe 	bl	8007af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */
  micro_sec++;
 80044f4:	4b04      	ldr	r3, [pc, #16]	@ (8004508 <TIM3_TIM4_IRQHandler+0x20>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	4b03      	ldr	r3, [pc, #12]	@ (8004508 <TIM3_TIM4_IRQHandler+0x20>)
 80044fc:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	2000019c 	.word	0x2000019c
 8004508:	200003b8 	.word	0x200003b8

0800450c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004510:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8004512:	0018      	movs	r0, r3
 8004514:	f003 faec 	bl	8007af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8004518:	46c0      	nop			@ (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	200001e8 	.word	0x200001e8

08004524 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004528:	4b03      	ldr	r3, [pc, #12]	@ (8004538 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 800452a:	0018      	movs	r0, r3
 800452c:	f001 fdc4 	bl	80060b8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8004530:	46c0      	nop			@ (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	200000ec 	.word	0x200000ec

0800453c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004540:	4b03      	ldr	r3, [pc, #12]	@ (8004550 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8004542:	0018      	movs	r0, r3
 8004544:	f004 fb3e 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8004548:	46c0      	nop			@ (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	20000234 	.word	0x20000234

08004554 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004558:	46c0      	nop			@ (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <LPF>:


/*LPF(2,temp_adc_data,&prev_batt_volt);*/

unsigned int LPF (unsigned char coef,unsigned int current_sample, unsigned int *temp)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	210f      	movs	r1, #15
 800456a:	187b      	adds	r3, r7, r1
 800456c:	1c02      	adds	r2, r0, #0
 800456e:	701a      	strb	r2, [r3, #0]
	current_sample = ((current_sample*coef)+((10-coef)*(*temp)));	
 8004570:	187b      	adds	r3, r7, r1
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	435a      	muls	r2, r3
 8004578:	187b      	adds	r3, r7, r1
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	210a      	movs	r1, #10
 800457e:	1acb      	subs	r3, r1, r3
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	434b      	muls	r3, r1
 8004588:	18d3      	adds	r3, r2, r3
 800458a:	60bb      	str	r3, [r7, #8]
	current_sample = (current_sample+5)/10;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	3305      	adds	r3, #5
 8004590:	210a      	movs	r1, #10
 8004592:	0018      	movs	r0, r3
 8004594:	f7fb fdb6 	bl	8000104 <__udivsi3>
 8004598:	0003      	movs	r3, r0
 800459a:	60bb      	str	r3, [r7, #8]
	*temp = current_sample;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	601a      	str	r2, [r3, #0]
	return current_sample;	
 80045a2:	68bb      	ldr	r3, [r7, #8]
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b004      	add	sp, #16
 80045aa:	bd80      	pop	{r7, pc}

080045ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80045ac:	480d      	ldr	r0, [pc, #52]	@ (80045e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80045ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80045b0:	f7ff ffd0 	bl	8004554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045b4:	480c      	ldr	r0, [pc, #48]	@ (80045e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80045b6:	490d      	ldr	r1, [pc, #52]	@ (80045ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80045b8:	4a0d      	ldr	r2, [pc, #52]	@ (80045f0 <LoopForever+0xe>)
  movs r3, #0
 80045ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045bc:	e002      	b.n	80045c4 <LoopCopyDataInit>

080045be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045c2:	3304      	adds	r3, #4

080045c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045c8:	d3f9      	bcc.n	80045be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ca:	4a0a      	ldr	r2, [pc, #40]	@ (80045f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045cc:	4c0a      	ldr	r4, [pc, #40]	@ (80045f8 <LoopForever+0x16>)
  movs r3, #0
 80045ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045d0:	e001      	b.n	80045d6 <LoopFillZerobss>

080045d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045d4:	3204      	adds	r2, #4

080045d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045d8:	d3fb      	bcc.n	80045d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80045da:	f004 ff05 	bl	80093e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80045de:	f7fe fe61 	bl	80032a4 <main>

080045e2 <LoopForever>:

LoopForever:
  b LoopForever
 80045e2:	e7fe      	b.n	80045e2 <LoopForever>
  ldr   r0, =_estack
 80045e4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80045e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045ec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80045f0:	080099b8 	.word	0x080099b8
  ldr r2, =_sbss
 80045f4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80045f8:	20000568 	.word	0x20000568

080045fc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045fc:	e7fe      	b.n	80045fc <ADC1_COMP_IRQHandler>
	...

08004600 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004606:	1dfb      	adds	r3, r7, #7
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800460c:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <HAL_Init+0x3c>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <HAL_Init+0x3c>)
 8004612:	2180      	movs	r1, #128	@ 0x80
 8004614:	0049      	lsls	r1, r1, #1
 8004616:	430a      	orrs	r2, r1
 8004618:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800461a:	2003      	movs	r0, #3
 800461c:	f000 f810 	bl	8004640 <HAL_InitTick>
 8004620:	1e03      	subs	r3, r0, #0
 8004622:	d003      	beq.n	800462c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004624:	1dfb      	adds	r3, r7, #7
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e001      	b.n	8004630 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800462c:	f7ff fd7e 	bl	800412c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004630:	1dfb      	adds	r3, r7, #7
 8004632:	781b      	ldrb	r3, [r3, #0]
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40022000 	.word	0x40022000

08004640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004648:	230f      	movs	r3, #15
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004650:	4b1d      	ldr	r3, [pc, #116]	@ (80046c8 <HAL_InitTick+0x88>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d02b      	beq.n	80046b0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004658:	4b1c      	ldr	r3, [pc, #112]	@ (80046cc <HAL_InitTick+0x8c>)
 800465a:	681c      	ldr	r4, [r3, #0]
 800465c:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <HAL_InitTick+0x88>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	0019      	movs	r1, r3
 8004662:	23fa      	movs	r3, #250	@ 0xfa
 8004664:	0098      	lsls	r0, r3, #2
 8004666:	f7fb fd4d 	bl	8000104 <__udivsi3>
 800466a:	0003      	movs	r3, r0
 800466c:	0019      	movs	r1, r3
 800466e:	0020      	movs	r0, r4
 8004670:	f7fb fd48 	bl	8000104 <__udivsi3>
 8004674:	0003      	movs	r3, r0
 8004676:	0018      	movs	r0, r3
 8004678:	f001 f877 	bl	800576a <HAL_SYSTICK_Config>
 800467c:	1e03      	subs	r3, r0, #0
 800467e:	d112      	bne.n	80046a6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b03      	cmp	r3, #3
 8004684:	d80a      	bhi.n	800469c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	2301      	movs	r3, #1
 800468a:	425b      	negs	r3, r3
 800468c:	2200      	movs	r2, #0
 800468e:	0018      	movs	r0, r3
 8004690:	f001 f846 	bl	8005720 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004694:	4b0e      	ldr	r3, [pc, #56]	@ (80046d0 <HAL_InitTick+0x90>)
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	e00d      	b.n	80046b8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800469c:	230f      	movs	r3, #15
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e008      	b.n	80046b8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046a6:	230f      	movs	r3, #15
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e003      	b.n	80046b8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046b0:	230f      	movs	r3, #15
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	2201      	movs	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80046b8:	230f      	movs	r3, #15
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	781b      	ldrb	r3, [r3, #0]
}
 80046be:	0018      	movs	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b005      	add	sp, #20
 80046c4:	bd90      	pop	{r4, r7, pc}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	20000018 	.word	0x20000018
 80046cc:	20000010 	.word	0x20000010
 80046d0:	20000014 	.word	0x20000014

080046d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <HAL_IncTick+0x1c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	001a      	movs	r2, r3
 80046de:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <HAL_IncTick+0x20>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	18d2      	adds	r2, r2, r3
 80046e4:	4b03      	ldr	r3, [pc, #12]	@ (80046f4 <HAL_IncTick+0x20>)
 80046e6:	601a      	str	r2, [r3, #0]
}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	20000018 	.word	0x20000018
 80046f4:	2000042c 	.word	0x2000042c

080046f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  return uwTick;
 80046fc:	4b02      	ldr	r3, [pc, #8]	@ (8004708 <HAL_GetTick+0x10>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	2000042c 	.word	0x2000042c

0800470c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004714:	f7ff fff0 	bl	80046f8 <HAL_GetTick>
 8004718:	0003      	movs	r3, r0
 800471a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3301      	adds	r3, #1
 8004724:	d005      	beq.n	8004732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004726:	4b0a      	ldr	r3, [pc, #40]	@ (8004750 <HAL_Delay+0x44>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	001a      	movs	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	189b      	adds	r3, r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	f7ff ffe0 	bl	80046f8 <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	429a      	cmp	r2, r3
 8004742:	d8f7      	bhi.n	8004734 <HAL_Delay+0x28>
  {
  }
}
 8004744:	46c0      	nop			@ (mov r8, r8)
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	46bd      	mov	sp, r7
 800474a:	b004      	add	sp, #16
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	20000018 	.word	0x20000018

08004754 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a05      	ldr	r2, [pc, #20]	@ (8004778 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004764:	401a      	ands	r2, r3
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b002      	add	sp, #8
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			@ (mov r8, r8)
 8004778:	fe3fffff 	.word	0xfe3fffff

0800477c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	23e0      	movs	r3, #224	@ 0xe0
 800478a:	045b      	lsls	r3, r3, #17
 800478c:	4013      	ands	r3, r2
}
 800478e:	0018      	movs	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	b002      	add	sp, #8
 8004794:	bd80      	pop	{r7, pc}

08004796 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	2104      	movs	r1, #4
 80047aa:	400a      	ands	r2, r1
 80047ac:	2107      	movs	r1, #7
 80047ae:	4091      	lsls	r1, r2
 80047b0:	000a      	movs	r2, r1
 80047b2:	43d2      	mvns	r2, r2
 80047b4:	401a      	ands	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2104      	movs	r1, #4
 80047ba:	400b      	ands	r3, r1
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4099      	lsls	r1, r3
 80047c0:	000b      	movs	r3, r1
 80047c2:	431a      	orrs	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80047c8:	46c0      	nop			@ (mov r8, r8)
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b004      	add	sp, #16
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	2104      	movs	r1, #4
 80047e2:	400a      	ands	r2, r1
 80047e4:	2107      	movs	r1, #7
 80047e6:	4091      	lsls	r1, r2
 80047e8:	000a      	movs	r2, r1
 80047ea:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2104      	movs	r1, #4
 80047f0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80047f2:	40da      	lsrs	r2, r3
 80047f4:	0013      	movs	r3, r2
}
 80047f6:	0018      	movs	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b002      	add	sp, #8
 80047fc:	bd80      	pop	{r7, pc}

080047fe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	23c0      	movs	r3, #192	@ 0xc0
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4013      	ands	r3, r2
 8004810:	d101      	bne.n	8004816 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004816:	2300      	movs	r3, #0
}
 8004818:	0018      	movs	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	b002      	add	sp, #8
 800481e:	bd80      	pop	{r7, pc}

08004820 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	211f      	movs	r1, #31
 8004834:	400a      	ands	r2, r1
 8004836:	210f      	movs	r1, #15
 8004838:	4091      	lsls	r1, r2
 800483a:	000a      	movs	r2, r1
 800483c:	43d2      	mvns	r2, r2
 800483e:	401a      	ands	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	0e9b      	lsrs	r3, r3, #26
 8004844:	210f      	movs	r1, #15
 8004846:	4019      	ands	r1, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	201f      	movs	r0, #31
 800484c:	4003      	ands	r3, r0
 800484e:	4099      	lsls	r1, r3
 8004850:	000b      	movs	r3, r1
 8004852:	431a      	orrs	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004858:	46c0      	nop			@ (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b004      	add	sp, #16
 800485e:	bd80      	pop	{r7, pc}

08004860 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	035b      	lsls	r3, r3, #13
 8004872:	0b5b      	lsrs	r3, r3, #13
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b002      	add	sp, #8
 8004880:	bd80      	pop	{r7, pc}

08004882 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	0352      	lsls	r2, r2, #13
 8004894:	0b52      	lsrs	r2, r2, #13
 8004896:	43d2      	mvns	r2, r2
 8004898:	401a      	ands	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b002      	add	sp, #8
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	0212      	lsls	r2, r2, #8
 80048bc:	43d2      	mvns	r2, r2
 80048be:	401a      	ands	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	400b      	ands	r3, r1
 80048c8:	4904      	ldr	r1, [pc, #16]	@ (80048dc <LL_ADC_SetChannelSamplingTime+0x34>)
 80048ca:	400b      	ands	r3, r1
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80048d2:	46c0      	nop			@ (mov r8, r8)
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b004      	add	sp, #16
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			@ (mov r8, r8)
 80048dc:	07ffff00 	.word	0x07ffff00

080048e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a05      	ldr	r2, [pc, #20]	@ (8004904 <LL_ADC_EnableInternalRegulator+0x24>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	2280      	movs	r2, #128	@ 0x80
 80048f2:	0552      	lsls	r2, r2, #21
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	6fffffe8 	.word	0x6fffffe8

08004908 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	055b      	lsls	r3, r3, #21
 8004918:	401a      	ands	r2, r3
 800491a:	2380      	movs	r3, #128	@ 0x80
 800491c:	055b      	lsls	r3, r3, #21
 800491e:	429a      	cmp	r2, r3
 8004920:	d101      	bne.n	8004926 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004926:	2300      	movs	r3, #0
}
 8004928:	0018      	movs	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	b002      	add	sp, #8
 800492e:	bd80      	pop	{r7, pc}

08004930 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a04      	ldr	r2, [pc, #16]	@ (8004950 <LL_ADC_Enable+0x20>)
 800493e:	4013      	ands	r3, r2
 8004940:	2201      	movs	r2, #1
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004948:	46c0      	nop			@ (mov r8, r8)
 800494a:	46bd      	mov	sp, r7
 800494c:	b002      	add	sp, #8
 800494e:	bd80      	pop	{r7, pc}
 8004950:	7fffffe8 	.word	0x7fffffe8

08004954 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a04      	ldr	r2, [pc, #16]	@ (8004974 <LL_ADC_Disable+0x20>)
 8004962:	4013      	ands	r3, r2
 8004964:	2202      	movs	r2, #2
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800496c:	46c0      	nop			@ (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b002      	add	sp, #8
 8004972:	bd80      	pop	{r7, pc}
 8004974:	7fffffe8 	.word	0x7fffffe8

08004978 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2201      	movs	r2, #1
 8004986:	4013      	ands	r3, r2
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <LL_ADC_IsEnabled+0x18>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <LL_ADC_IsEnabled+0x1a>
 8004990:	2300      	movs	r3, #0
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}

0800499a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2202      	movs	r2, #2
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d101      	bne.n	80049b2 <LL_ADC_IsDisableOngoing+0x18>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <LL_ADC_IsDisableOngoing+0x1a>
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	0018      	movs	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b002      	add	sp, #8
 80049ba:	bd80      	pop	{r7, pc}

080049bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a04      	ldr	r2, [pc, #16]	@ (80049dc <LL_ADC_REG_StartConversion+0x20>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	2204      	movs	r2, #4
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80049d4:	46c0      	nop			@ (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b002      	add	sp, #8
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	7fffffe8 	.word	0x7fffffe8

080049e0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a04      	ldr	r2, [pc, #16]	@ (8004a00 <LL_ADC_REG_StopConversion+0x20>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	2210      	movs	r2, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b002      	add	sp, #8
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	7fffffe8 	.word	0x7fffffe8

08004a04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2204      	movs	r2, #4
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d101      	bne.n	8004a1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	0018      	movs	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a30:	231f      	movs	r3, #31
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e17f      	b.n	8004d4e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7ff fb8b 	bl	8004174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2254      	movs	r2, #84	@ 0x54
 8004a68:	2100      	movs	r1, #0
 8004a6a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7ff ff49 	bl	8004908 <LL_ADC_IsInternalRegulatorEnabled>
 8004a76:	1e03      	subs	r3, r0, #0
 8004a78:	d115      	bne.n	8004aa6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7ff ff2e 	bl	80048e0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a84:	4bb4      	ldr	r3, [pc, #720]	@ (8004d58 <HAL_ADC_Init+0x330>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	49b4      	ldr	r1, [pc, #720]	@ (8004d5c <HAL_ADC_Init+0x334>)
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f7fb fb3a 	bl	8000104 <__udivsi3>
 8004a90:	0003      	movs	r3, r0
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a98:	e002      	b.n	8004aa0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f9      	bne.n	8004a9a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7ff ff2c 	bl	8004908 <LL_ADC_IsInternalRegulatorEnabled>
 8004ab0:	1e03      	subs	r3, r0, #0
 8004ab2:	d10f      	bne.n	8004ad4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab8:	2210      	movs	r2, #16
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004acc:	231f      	movs	r3, #31
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7ff ff93 	bl	8004a04 <LL_ADC_REG_IsConversionOngoing>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae6:	2210      	movs	r2, #16
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d000      	beq.n	8004aee <HAL_ADC_Init+0xc6>
 8004aec:	e122      	b.n	8004d34 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d000      	beq.n	8004af6 <HAL_ADC_Init+0xce>
 8004af4:	e11e      	b.n	8004d34 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	4a99      	ldr	r2, [pc, #612]	@ (8004d60 <HAL_ADC_Init+0x338>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	2202      	movs	r2, #2
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f7ff ff34 	bl	8004978 <LL_ADC_IsEnabled>
 8004b10:	1e03      	subs	r3, r0, #0
 8004b12:	d000      	beq.n	8004b16 <HAL_ADC_Init+0xee>
 8004b14:	e0ad      	b.n	8004c72 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	7e1b      	ldrb	r3, [r3, #24]
 8004b1e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004b20:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7e5b      	ldrb	r3, [r3, #25]
 8004b26:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004b28:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7e9b      	ldrb	r3, [r3, #26]
 8004b2e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004b30:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_ADC_Init+0x118>
 8004b3a:	2380      	movs	r3, #128	@ 0x80
 8004b3c:	015b      	lsls	r3, r3, #5
 8004b3e:	e000      	b.n	8004b42 <HAL_ADC_Init+0x11a>
 8004b40:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004b42:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004b48:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	da04      	bge.n	8004b5c <HAL_ADC_Init+0x134>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	085b      	lsrs	r3, r3, #1
 8004b5a:	e001      	b.n	8004b60 <HAL_ADC_Init+0x138>
 8004b5c:	2380      	movs	r3, #128	@ 0x80
 8004b5e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004b60:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	212c      	movs	r1, #44	@ 0x2c
 8004b66:	5c5b      	ldrb	r3, [r3, r1]
 8004b68:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004b6a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	5c9b      	ldrb	r3, [r3, r2]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d115      	bne.n	8004ba8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7e9b      	ldrb	r3, [r3, #26]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2280      	movs	r2, #128	@ 0x80
 8004b88:	0252      	lsls	r2, r2, #9
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e00b      	b.n	8004ba8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b94:	2220      	movs	r2, #32
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bb4:	23e0      	movs	r3, #224	@ 0xe0
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a65      	ldr	r2, [pc, #404]	@ (8004d64 <HAL_ADC_Init+0x33c>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	0f9b      	lsrs	r3, r3, #30
 8004be2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004be8:	4313      	orrs	r3, r2
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	223c      	movs	r2, #60	@ 0x3c
 8004bf4:	5c9b      	ldrb	r3, [r3, r2]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d111      	bne.n	8004c1e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	0f9b      	lsrs	r3, r3, #30
 8004c00:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c06:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004c0c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004c12:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	4a50      	ldr	r2, [pc, #320]	@ (8004d68 <HAL_ADC_Init+0x340>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	23c0      	movs	r3, #192	@ 0xc0
 8004c3a:	061b      	lsls	r3, r3, #24
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d018      	beq.n	8004c72 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	05db      	lsls	r3, r3, #23
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d012      	beq.n	8004c72 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d00c      	beq.n	8004c72 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004c58:	4b44      	ldr	r3, [pc, #272]	@ (8004d6c <HAL_ADC_Init+0x344>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a44      	ldr	r2, [pc, #272]	@ (8004d70 <HAL_ADC_Init+0x348>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	0019      	movs	r1, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	23f0      	movs	r3, #240	@ 0xf0
 8004c68:	039b      	lsls	r3, r3, #14
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d6c <HAL_ADC_Init+0x344>)
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	f7ff fd8a 	bl	8004796 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8a:	493a      	ldr	r1, [pc, #232]	@ (8004d74 <HAL_ADC_Init+0x34c>)
 8004c8c:	001a      	movs	r2, r3
 8004c8e:	f7ff fd82 	bl	8004796 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2110      	movs	r1, #16
 8004ca6:	4249      	negs	r1, r1
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cac:	e018      	b.n	8004ce0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	2380      	movs	r3, #128	@ 0x80
 8004cb4:	039b      	lsls	r3, r3, #14
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d112      	bne.n	8004ce0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	221c      	movs	r2, #28
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2210      	movs	r2, #16
 8004cce:	4252      	negs	r2, r2
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	0011      	movs	r1, r2
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f7ff fd72 	bl	80047d0 <LL_ADC_GetSamplingTimeCommonChannels>
 8004cec:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d10b      	bne.n	8004d0e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d00:	2203      	movs	r2, #3
 8004d02:	4393      	bics	r3, r2
 8004d04:	2201      	movs	r2, #1
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d0c:	e01c      	b.n	8004d48 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d12:	2212      	movs	r2, #18
 8004d14:	4393      	bics	r3, r2
 8004d16:	2210      	movs	r2, #16
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	2201      	movs	r2, #1
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004d2a:	231f      	movs	r3, #31
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d32:	e009      	b.n	8004d48 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d38:	2210      	movs	r2, #16
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004d40:	231f      	movs	r3, #31
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	2201      	movs	r2, #1
 8004d46:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004d48:	231f      	movs	r3, #31
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	781b      	ldrb	r3, [r3, #0]
}
 8004d4e:	0018      	movs	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b008      	add	sp, #32
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	20000010 	.word	0x20000010
 8004d5c:	00030d40 	.word	0x00030d40
 8004d60:	fffffefd 	.word	0xfffffefd
 8004d64:	fffe0201 	.word	0xfffe0201
 8004d68:	1ffffc02 	.word	0x1ffffc02
 8004d6c:	40012708 	.word	0x40012708
 8004d70:	ffc3ffff 	.word	0xffc3ffff
 8004d74:	07ffff04 	.word	0x07ffff04

08004d78 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004d78:	b5b0      	push	{r4, r5, r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7ff fe3d 	bl	8004a04 <LL_ADC_REG_IsConversionOngoing>
 8004d8a:	1e03      	subs	r3, r0, #0
 8004d8c:	d135      	bne.n	8004dfa <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2254      	movs	r2, #84	@ 0x54
 8004d92:	5c9b      	ldrb	r3, [r3, r2]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_ADC_Start+0x24>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e035      	b.n	8004e08 <HAL_ADC_Start+0x90>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2254      	movs	r2, #84	@ 0x54
 8004da0:	2101      	movs	r1, #1
 8004da2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004da4:	250f      	movs	r5, #15
 8004da6:	197c      	adds	r4, r7, r5
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	0018      	movs	r0, r3
 8004dac:	f000 fb28 	bl	8005400 <ADC_Enable>
 8004db0:	0003      	movs	r3, r0
 8004db2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004db4:	197b      	adds	r3, r7, r5
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d119      	bne.n	8004df0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc0:	4a13      	ldr	r2, [pc, #76]	@ (8004e10 <HAL_ADC_Start+0x98>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2280      	movs	r2, #128	@ 0x80
 8004dc6:	0052      	lsls	r2, r2, #1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	221c      	movs	r2, #28
 8004dda:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2254      	movs	r2, #84	@ 0x54
 8004de0:	2100      	movs	r1, #0
 8004de2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7ff fde7 	bl	80049bc <LL_ADC_REG_StartConversion>
 8004dee:	e008      	b.n	8004e02 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2254      	movs	r2, #84	@ 0x54
 8004df4:	2100      	movs	r1, #0
 8004df6:	5499      	strb	r1, [r3, r2]
 8004df8:	e003      	b.n	8004e02 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004dfa:	230f      	movs	r3, #15
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	2202      	movs	r2, #2
 8004e00:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004e02:	230f      	movs	r3, #15
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	781b      	ldrb	r3, [r3, #0]
}
 8004e08:	0018      	movs	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b004      	add	sp, #16
 8004e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e10:	fffff0fe 	.word	0xfffff0fe

08004e14 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004e14:	b5b0      	push	{r4, r5, r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2254      	movs	r2, #84	@ 0x54
 8004e20:	5c9b      	ldrb	r3, [r3, r2]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_ADC_Stop+0x16>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e029      	b.n	8004e7e <HAL_ADC_Stop+0x6a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2254      	movs	r2, #84	@ 0x54
 8004e2e:	2101      	movs	r1, #1
 8004e30:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004e32:	250f      	movs	r5, #15
 8004e34:	197c      	adds	r4, r7, r5
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f000 fa9f 	bl	800537c <ADC_ConversionStop>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004e42:	197b      	adds	r3, r7, r5
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d112      	bne.n	8004e70 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004e4a:	197c      	adds	r4, r7, r5
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 fb5c 	bl	800550c <ADC_Disable>
 8004e54:	0003      	movs	r3, r0
 8004e56:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004e58:	197b      	adds	r3, r7, r5
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d107      	bne.n	8004e70 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e64:	4a08      	ldr	r2, [pc, #32]	@ (8004e88 <HAL_ADC_Stop+0x74>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	2201      	movs	r2, #1
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2254      	movs	r2, #84	@ 0x54
 8004e74:	2100      	movs	r1, #0
 8004e76:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004e78:	230f      	movs	r3, #15
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	781b      	ldrb	r3, [r3, #0]
}
 8004e7e:	0018      	movs	r0, r3
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b004      	add	sp, #16
 8004e84:	bdb0      	pop	{r4, r5, r7, pc}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	fffffefe 	.word	0xfffffefe

08004e8c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d102      	bne.n	8004ea4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e00f      	b.n	8004ec4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4013      	ands	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e072      	b.n	8004fa6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004ec4:	f7ff fc18 	bl	80046f8 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004ecc:	e01f      	b.n	8004f0e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	d01c      	beq.n	8004f0e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004ed4:	f7ff fc10 	bl	80046f8 <HAL_GetTick>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d302      	bcc.n	8004eea <HAL_ADC_PollForConversion+0x5e>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d111      	bne.n	8004f0e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d10b      	bne.n	8004f0e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004efa:	2204      	movs	r2, #4
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2254      	movs	r2, #84	@ 0x54
 8004f06:	2100      	movs	r1, #0
 8004f08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e04b      	b.n	8004fa6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4013      	ands	r3, r2
 8004f18:	d0d9      	beq.n	8004ece <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1e:	2280      	movs	r2, #128	@ 0x80
 8004f20:	0092      	lsls	r2, r2, #2
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7ff fc66 	bl	80047fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f32:	1e03      	subs	r3, r0, #0
 8004f34:	d02e      	beq.n	8004f94 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	7e9b      	ldrb	r3, [r3, #26]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d12a      	bne.n	8004f94 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2208      	movs	r2, #8
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d123      	bne.n	8004f94 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7ff fd57 	bl	8004a04 <LL_ADC_REG_IsConversionOngoing>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d110      	bne.n	8004f7c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	210c      	movs	r1, #12
 8004f66:	438a      	bics	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f6e:	4a10      	ldr	r2, [pc, #64]	@ (8004fb0 <HAL_ADC_PollForConversion+0x124>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	2201      	movs	r2, #1
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f7a:	e00b      	b.n	8004f94 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f80:	2220      	movs	r2, #32
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	7e1b      	ldrb	r3, [r3, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d103      	bne.n	8004fa4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	220c      	movs	r2, #12
 8004fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b004      	add	sp, #16
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	fffffefe 	.word	0xfffffefe

08004fb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b002      	add	sp, #8
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fd6:	2317      	movs	r3, #23
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2254      	movs	r2, #84	@ 0x54
 8004fe6:	5c9b      	ldrb	r3, [r3, r2]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x24>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e1c0      	b.n	8005372 <HAL_ADC_ConfigChannel+0x3a6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2254      	movs	r2, #84	@ 0x54
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7ff fd01 	bl	8004a04 <LL_ADC_REG_IsConversionOngoing>
 8005002:	1e03      	subs	r3, r0, #0
 8005004:	d000      	beq.n	8005008 <HAL_ADC_ConfigChannel+0x3c>
 8005006:	e1a3      	b.n	8005350 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b02      	cmp	r3, #2
 800500e:	d100      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x46>
 8005010:	e143      	b.n	800529a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	2380      	movs	r3, #128	@ 0x80
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	429a      	cmp	r2, r3
 800501c:	d004      	beq.n	8005028 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005022:	4ac1      	ldr	r2, [pc, #772]	@ (8005328 <HAL_ADC_ConfigChannel+0x35c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d108      	bne.n	800503a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	0019      	movs	r1, r3
 8005032:	0010      	movs	r0, r2
 8005034:	f7ff fc14 	bl	8004860 <LL_ADC_REG_SetSequencerChAdd>
 8005038:	e0c9      	b.n	80051ce <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	211f      	movs	r1, #31
 8005044:	400b      	ands	r3, r1
 8005046:	210f      	movs	r1, #15
 8005048:	4099      	lsls	r1, r3
 800504a:	000b      	movs	r3, r1
 800504c:	43db      	mvns	r3, r3
 800504e:	4013      	ands	r3, r2
 8005050:	0019      	movs	r1, r3
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	035b      	lsls	r3, r3, #13
 8005058:	0b5b      	lsrs	r3, r3, #13
 800505a:	d105      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x9c>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	0e9b      	lsrs	r3, r3, #26
 8005062:	221f      	movs	r2, #31
 8005064:	4013      	ands	r3, r2
 8005066:	e098      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2201      	movs	r2, #1
 800506e:	4013      	ands	r3, r2
 8005070:	d000      	beq.n	8005074 <HAL_ADC_ConfigChannel+0xa8>
 8005072:	e091      	b.n	8005198 <HAL_ADC_ConfigChannel+0x1cc>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2202      	movs	r2, #2
 800507a:	4013      	ands	r3, r2
 800507c:	d000      	beq.n	8005080 <HAL_ADC_ConfigChannel+0xb4>
 800507e:	e089      	b.n	8005194 <HAL_ADC_ConfigChannel+0x1c8>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2204      	movs	r2, #4
 8005086:	4013      	ands	r3, r2
 8005088:	d000      	beq.n	800508c <HAL_ADC_ConfigChannel+0xc0>
 800508a:	e081      	b.n	8005190 <HAL_ADC_ConfigChannel+0x1c4>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2208      	movs	r2, #8
 8005092:	4013      	ands	r3, r2
 8005094:	d000      	beq.n	8005098 <HAL_ADC_ConfigChannel+0xcc>
 8005096:	e079      	b.n	800518c <HAL_ADC_ConfigChannel+0x1c0>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2210      	movs	r2, #16
 800509e:	4013      	ands	r3, r2
 80050a0:	d000      	beq.n	80050a4 <HAL_ADC_ConfigChannel+0xd8>
 80050a2:	e071      	b.n	8005188 <HAL_ADC_ConfigChannel+0x1bc>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2220      	movs	r2, #32
 80050aa:	4013      	ands	r3, r2
 80050ac:	d000      	beq.n	80050b0 <HAL_ADC_ConfigChannel+0xe4>
 80050ae:	e069      	b.n	8005184 <HAL_ADC_ConfigChannel+0x1b8>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2240      	movs	r2, #64	@ 0x40
 80050b6:	4013      	ands	r3, r2
 80050b8:	d000      	beq.n	80050bc <HAL_ADC_ConfigChannel+0xf0>
 80050ba:	e061      	b.n	8005180 <HAL_ADC_ConfigChannel+0x1b4>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2280      	movs	r2, #128	@ 0x80
 80050c2:	4013      	ands	r3, r2
 80050c4:	d000      	beq.n	80050c8 <HAL_ADC_ConfigChannel+0xfc>
 80050c6:	e059      	b.n	800517c <HAL_ADC_ConfigChannel+0x1b0>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	4013      	ands	r3, r2
 80050d2:	d151      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x1ac>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	2380      	movs	r3, #128	@ 0x80
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4013      	ands	r3, r2
 80050de:	d149      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x1a8>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4013      	ands	r3, r2
 80050ea:	d141      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x1a4>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	2380      	movs	r3, #128	@ 0x80
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	4013      	ands	r3, r2
 80050f6:	d139      	bne.n	800516c <HAL_ADC_ConfigChannel+0x1a0>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	2380      	movs	r3, #128	@ 0x80
 80050fe:	015b      	lsls	r3, r3, #5
 8005100:	4013      	ands	r3, r2
 8005102:	d131      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x19c>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	2380      	movs	r3, #128	@ 0x80
 800510a:	019b      	lsls	r3, r3, #6
 800510c:	4013      	ands	r3, r2
 800510e:	d129      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x198>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	2380      	movs	r3, #128	@ 0x80
 8005116:	01db      	lsls	r3, r3, #7
 8005118:	4013      	ands	r3, r2
 800511a:	d121      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x194>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	2380      	movs	r3, #128	@ 0x80
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	4013      	ands	r3, r2
 8005126:	d119      	bne.n	800515c <HAL_ADC_ConfigChannel+0x190>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	2380      	movs	r3, #128	@ 0x80
 800512e:	025b      	lsls	r3, r3, #9
 8005130:	4013      	ands	r3, r2
 8005132:	d111      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x18c>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	2380      	movs	r3, #128	@ 0x80
 800513a:	029b      	lsls	r3, r3, #10
 800513c:	4013      	ands	r3, r2
 800513e:	d109      	bne.n	8005154 <HAL_ADC_ConfigChannel+0x188>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	2380      	movs	r3, #128	@ 0x80
 8005146:	02db      	lsls	r3, r3, #11
 8005148:	4013      	ands	r3, r2
 800514a:	d001      	beq.n	8005150 <HAL_ADC_ConfigChannel+0x184>
 800514c:	2312      	movs	r3, #18
 800514e:	e024      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005150:	2300      	movs	r3, #0
 8005152:	e022      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005154:	2311      	movs	r3, #17
 8005156:	e020      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005158:	2310      	movs	r3, #16
 800515a:	e01e      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 800515c:	230f      	movs	r3, #15
 800515e:	e01c      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005160:	230e      	movs	r3, #14
 8005162:	e01a      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005164:	230d      	movs	r3, #13
 8005166:	e018      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005168:	230c      	movs	r3, #12
 800516a:	e016      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 800516c:	230b      	movs	r3, #11
 800516e:	e014      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005170:	230a      	movs	r3, #10
 8005172:	e012      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005174:	2309      	movs	r3, #9
 8005176:	e010      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005178:	2308      	movs	r3, #8
 800517a:	e00e      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 800517c:	2307      	movs	r3, #7
 800517e:	e00c      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005180:	2306      	movs	r3, #6
 8005182:	e00a      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005184:	2305      	movs	r3, #5
 8005186:	e008      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005188:	2304      	movs	r3, #4
 800518a:	e006      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 800518c:	2303      	movs	r3, #3
 800518e:	e004      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005190:	2302      	movs	r3, #2
 8005192:	e002      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_ADC_ConfigChannel+0x1ce>
 8005198:	2300      	movs	r3, #0
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	6852      	ldr	r2, [r2, #4]
 800519e:	201f      	movs	r0, #31
 80051a0:	4002      	ands	r2, r0
 80051a2:	4093      	lsls	r3, r2
 80051a4:	000a      	movs	r2, r1
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	089b      	lsrs	r3, r3, #2
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d808      	bhi.n	80051ce <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	6859      	ldr	r1, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	001a      	movs	r2, r3
 80051ca:	f7ff fb29 	bl	8004820 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	001a      	movs	r2, r3
 80051dc:	f7ff fb64 	bl	80048a8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	db00      	blt.n	80051ea <HAL_ADC_ConfigChannel+0x21e>
 80051e8:	e0bc      	b.n	8005364 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051ea:	4b50      	ldr	r3, [pc, #320]	@ (800532c <HAL_ADC_ConfigChannel+0x360>)
 80051ec:	0018      	movs	r0, r3
 80051ee:	f7ff fac5 	bl	800477c <LL_ADC_GetCommonPathInternalCh>
 80051f2:	0003      	movs	r3, r0
 80051f4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a4d      	ldr	r2, [pc, #308]	@ (8005330 <HAL_ADC_ConfigChannel+0x364>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d122      	bne.n	8005246 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	2380      	movs	r3, #128	@ 0x80
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005208:	d11d      	bne.n	8005246 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2280      	movs	r2, #128	@ 0x80
 800520e:	0412      	lsls	r2, r2, #16
 8005210:	4313      	orrs	r3, r2
 8005212:	4a46      	ldr	r2, [pc, #280]	@ (800532c <HAL_ADC_ConfigChannel+0x360>)
 8005214:	0019      	movs	r1, r3
 8005216:	0010      	movs	r0, r2
 8005218:	f7ff fa9c 	bl	8004754 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800521c:	4b45      	ldr	r3, [pc, #276]	@ (8005334 <HAL_ADC_ConfigChannel+0x368>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4945      	ldr	r1, [pc, #276]	@ (8005338 <HAL_ADC_ConfigChannel+0x36c>)
 8005222:	0018      	movs	r0, r3
 8005224:	f7fa ff6e 	bl	8000104 <__udivsi3>
 8005228:	0003      	movs	r3, r0
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	0013      	movs	r3, r2
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	189b      	adds	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005236:	e002      	b.n	800523e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3b01      	subs	r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f9      	bne.n	8005238 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005244:	e08e      	b.n	8005364 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a3c      	ldr	r2, [pc, #240]	@ (800533c <HAL_ADC_ConfigChannel+0x370>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10e      	bne.n	800526e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	2380      	movs	r3, #128	@ 0x80
 8005254:	045b      	lsls	r3, r3, #17
 8005256:	4013      	ands	r3, r2
 8005258:	d109      	bne.n	800526e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2280      	movs	r2, #128	@ 0x80
 800525e:	0452      	lsls	r2, r2, #17
 8005260:	4313      	orrs	r3, r2
 8005262:	4a32      	ldr	r2, [pc, #200]	@ (800532c <HAL_ADC_ConfigChannel+0x360>)
 8005264:	0019      	movs	r1, r3
 8005266:	0010      	movs	r0, r2
 8005268:	f7ff fa74 	bl	8004754 <LL_ADC_SetCommonPathInternalCh>
 800526c:	e07a      	b.n	8005364 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a33      	ldr	r2, [pc, #204]	@ (8005340 <HAL_ADC_ConfigChannel+0x374>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d000      	beq.n	800527a <HAL_ADC_ConfigChannel+0x2ae>
 8005278:	e074      	b.n	8005364 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	03db      	lsls	r3, r3, #15
 8005280:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005282:	d000      	beq.n	8005286 <HAL_ADC_ConfigChannel+0x2ba>
 8005284:	e06e      	b.n	8005364 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2280      	movs	r2, #128	@ 0x80
 800528a:	03d2      	lsls	r2, r2, #15
 800528c:	4313      	orrs	r3, r2
 800528e:	4a27      	ldr	r2, [pc, #156]	@ (800532c <HAL_ADC_ConfigChannel+0x360>)
 8005290:	0019      	movs	r1, r3
 8005292:	0010      	movs	r0, r2
 8005294:	f7ff fa5e 	bl	8004754 <LL_ADC_SetCommonPathInternalCh>
 8005298:	e064      	b.n	8005364 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	2380      	movs	r3, #128	@ 0x80
 80052a0:	061b      	lsls	r3, r3, #24
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d004      	beq.n	80052b0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <HAL_ADC_ConfigChannel+0x35c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d107      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	0019      	movs	r1, r3
 80052ba:	0010      	movs	r0, r2
 80052bc:	f7ff fae1 	bl	8004882 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da4d      	bge.n	8005364 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052c8:	4b18      	ldr	r3, [pc, #96]	@ (800532c <HAL_ADC_ConfigChannel+0x360>)
 80052ca:	0018      	movs	r0, r3
 80052cc:	f7ff fa56 	bl	800477c <LL_ADC_GetCommonPathInternalCh>
 80052d0:	0003      	movs	r3, r0
 80052d2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a15      	ldr	r2, [pc, #84]	@ (8005330 <HAL_ADC_ConfigChannel+0x364>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4a18      	ldr	r2, [pc, #96]	@ (8005344 <HAL_ADC_ConfigChannel+0x378>)
 80052e2:	4013      	ands	r3, r2
 80052e4:	4a11      	ldr	r2, [pc, #68]	@ (800532c <HAL_ADC_ConfigChannel+0x360>)
 80052e6:	0019      	movs	r1, r3
 80052e8:	0010      	movs	r0, r2
 80052ea:	f7ff fa33 	bl	8004754 <LL_ADC_SetCommonPathInternalCh>
 80052ee:	e039      	b.n	8005364 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a11      	ldr	r2, [pc, #68]	@ (800533c <HAL_ADC_ConfigChannel+0x370>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4a12      	ldr	r2, [pc, #72]	@ (8005348 <HAL_ADC_ConfigChannel+0x37c>)
 80052fe:	4013      	ands	r3, r2
 8005300:	4a0a      	ldr	r2, [pc, #40]	@ (800532c <HAL_ADC_ConfigChannel+0x360>)
 8005302:	0019      	movs	r1, r3
 8005304:	0010      	movs	r0, r2
 8005306:	f7ff fa25 	bl	8004754 <LL_ADC_SetCommonPathInternalCh>
 800530a:	e02b      	b.n	8005364 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0b      	ldr	r2, [pc, #44]	@ (8005340 <HAL_ADC_ConfigChannel+0x374>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d126      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4a0c      	ldr	r2, [pc, #48]	@ (800534c <HAL_ADC_ConfigChannel+0x380>)
 800531a:	4013      	ands	r3, r2
 800531c:	4a03      	ldr	r2, [pc, #12]	@ (800532c <HAL_ADC_ConfigChannel+0x360>)
 800531e:	0019      	movs	r1, r3
 8005320:	0010      	movs	r0, r2
 8005322:	f7ff fa17 	bl	8004754 <LL_ADC_SetCommonPathInternalCh>
 8005326:	e01d      	b.n	8005364 <HAL_ADC_ConfigChannel+0x398>
 8005328:	80000004 	.word	0x80000004
 800532c:	40012708 	.word	0x40012708
 8005330:	b0001000 	.word	0xb0001000
 8005334:	20000010 	.word	0x20000010
 8005338:	00030d40 	.word	0x00030d40
 800533c:	b8004000 	.word	0xb8004000
 8005340:	b4002000 	.word	0xb4002000
 8005344:	ff7fffff 	.word	0xff7fffff
 8005348:	feffffff 	.word	0xfeffffff
 800534c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005354:	2220      	movs	r2, #32
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800535c:	2317      	movs	r3, #23
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	2201      	movs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2254      	movs	r2, #84	@ 0x54
 8005368:	2100      	movs	r1, #0
 800536a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800536c:	2317      	movs	r3, #23
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	781b      	ldrb	r3, [r3, #0]
}
 8005372:	0018      	movs	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	b006      	add	sp, #24
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			@ (mov r8, r8)

0800537c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	0018      	movs	r0, r3
 800538a:	f7ff fb3b 	bl	8004a04 <LL_ADC_REG_IsConversionOngoing>
 800538e:	1e03      	subs	r3, r0, #0
 8005390:	d031      	beq.n	80053f6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	0018      	movs	r0, r3
 8005398:	f7ff faff 	bl	800499a <LL_ADC_IsDisableOngoing>
 800539c:	1e03      	subs	r3, r0, #0
 800539e:	d104      	bne.n	80053aa <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f7ff fb1b 	bl	80049e0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053aa:	f7ff f9a5 	bl	80046f8 <HAL_GetTick>
 80053ae:	0003      	movs	r3, r0
 80053b0:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80053b2:	e01a      	b.n	80053ea <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80053b4:	f7ff f9a0 	bl	80046f8 <HAL_GetTick>
 80053b8:	0002      	movs	r2, r0
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d913      	bls.n	80053ea <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2204      	movs	r2, #4
 80053ca:	4013      	ands	r3, r2
 80053cc:	d00d      	beq.n	80053ea <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d2:	2210      	movs	r2, #16
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053de:	2201      	movs	r2, #1
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e006      	b.n	80053f8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2204      	movs	r2, #4
 80053f2:	4013      	ands	r3, r2
 80053f4:	d1de      	bne.n	80053b4 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	0018      	movs	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	b004      	add	sp, #16
 80053fe:	bd80      	pop	{r7, pc}

08005400 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005408:	2300      	movs	r3, #0
 800540a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	0018      	movs	r0, r3
 8005412:	f7ff fab1 	bl	8004978 <LL_ADC_IsEnabled>
 8005416:	1e03      	subs	r3, r0, #0
 8005418:	d000      	beq.n	800541c <ADC_Enable+0x1c>
 800541a:	e069      	b.n	80054f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	4a36      	ldr	r2, [pc, #216]	@ (80054fc <ADC_Enable+0xfc>)
 8005424:	4013      	ands	r3, r2
 8005426:	d00d      	beq.n	8005444 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542c:	2210      	movs	r2, #16
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005438:	2201      	movs	r2, #1
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e056      	b.n	80054f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	0018      	movs	r0, r3
 800544a:	f7ff fa71 	bl	8004930 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800544e:	4b2c      	ldr	r3, [pc, #176]	@ (8005500 <ADC_Enable+0x100>)
 8005450:	0018      	movs	r0, r3
 8005452:	f7ff f993 	bl	800477c <LL_ADC_GetCommonPathInternalCh>
 8005456:	0002      	movs	r2, r0
 8005458:	2380      	movs	r3, #128	@ 0x80
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	4013      	ands	r3, r2
 800545e:	d00f      	beq.n	8005480 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005460:	4b28      	ldr	r3, [pc, #160]	@ (8005504 <ADC_Enable+0x104>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4928      	ldr	r1, [pc, #160]	@ (8005508 <ADC_Enable+0x108>)
 8005466:	0018      	movs	r0, r3
 8005468:	f7fa fe4c 	bl	8000104 <__udivsi3>
 800546c:	0003      	movs	r3, r0
 800546e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005470:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005472:	e002      	b.n	800547a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	3b01      	subs	r3, #1
 8005478:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f9      	bne.n	8005474 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	7e5b      	ldrb	r3, [r3, #25]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d033      	beq.n	80054f0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005488:	f7ff f936 	bl	80046f8 <HAL_GetTick>
 800548c:	0003      	movs	r3, r0
 800548e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005490:	e027      	b.n	80054e2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	0018      	movs	r0, r3
 8005498:	f7ff fa6e 	bl	8004978 <LL_ADC_IsEnabled>
 800549c:	1e03      	subs	r3, r0, #0
 800549e:	d104      	bne.n	80054aa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	0018      	movs	r0, r3
 80054a6:	f7ff fa43 	bl	8004930 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054aa:	f7ff f925 	bl	80046f8 <HAL_GetTick>
 80054ae:	0002      	movs	r2, r0
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d914      	bls.n	80054e2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2201      	movs	r2, #1
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d00d      	beq.n	80054e2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ca:	2210      	movs	r2, #16
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d6:	2201      	movs	r2, #1
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e007      	b.n	80054f2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2201      	movs	r2, #1
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d1d0      	bne.n	8005492 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	80000017 	.word	0x80000017
 8005500:	40012708 	.word	0x40012708
 8005504:	20000010 	.word	0x20000010
 8005508:	00030d40 	.word	0x00030d40

0800550c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	0018      	movs	r0, r3
 800551a:	f7ff fa3e 	bl	800499a <LL_ADC_IsDisableOngoing>
 800551e:	0003      	movs	r3, r0
 8005520:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	0018      	movs	r0, r3
 8005528:	f7ff fa26 	bl	8004978 <LL_ADC_IsEnabled>
 800552c:	1e03      	subs	r3, r0, #0
 800552e:	d046      	beq.n	80055be <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d143      	bne.n	80055be <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2205      	movs	r2, #5
 800553e:	4013      	ands	r3, r2
 8005540:	2b01      	cmp	r3, #1
 8005542:	d10d      	bne.n	8005560 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	0018      	movs	r0, r3
 800554a:	f7ff fa03 	bl	8004954 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2203      	movs	r2, #3
 8005554:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005556:	f7ff f8cf 	bl	80046f8 <HAL_GetTick>
 800555a:	0003      	movs	r3, r0
 800555c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800555e:	e028      	b.n	80055b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005564:	2210      	movs	r2, #16
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005570:	2201      	movs	r2, #1
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e021      	b.n	80055c0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800557c:	f7ff f8bc 	bl	80046f8 <HAL_GetTick>
 8005580:	0002      	movs	r2, r0
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d913      	bls.n	80055b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2201      	movs	r2, #1
 8005592:	4013      	ands	r3, r2
 8005594:	d00d      	beq.n	80055b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559a:	2210      	movs	r2, #16
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a6:	2201      	movs	r2, #1
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e006      	b.n	80055c0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2201      	movs	r2, #1
 80055ba:	4013      	ands	r3, r2
 80055bc:	d1de      	bne.n	800557c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	0018      	movs	r0, r3
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b004      	add	sp, #16
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	0002      	movs	r2, r0
 80055d0:	1dfb      	adds	r3, r7, #7
 80055d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80055d4:	1dfb      	adds	r3, r7, #7
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80055da:	d809      	bhi.n	80055f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055dc:	1dfb      	adds	r3, r7, #7
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	001a      	movs	r2, r3
 80055e2:	231f      	movs	r3, #31
 80055e4:	401a      	ands	r2, r3
 80055e6:	4b04      	ldr	r3, [pc, #16]	@ (80055f8 <__NVIC_EnableIRQ+0x30>)
 80055e8:	2101      	movs	r1, #1
 80055ea:	4091      	lsls	r1, r2
 80055ec:	000a      	movs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80055f0:	46c0      	nop			@ (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b002      	add	sp, #8
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	e000e100 	.word	0xe000e100

080055fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055fc:	b590      	push	{r4, r7, lr}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	0002      	movs	r2, r0
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	1dfb      	adds	r3, r7, #7
 8005608:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800560a:	1dfb      	adds	r3, r7, #7
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005610:	d828      	bhi.n	8005664 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005612:	4a2f      	ldr	r2, [pc, #188]	@ (80056d0 <__NVIC_SetPriority+0xd4>)
 8005614:	1dfb      	adds	r3, r7, #7
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	b25b      	sxtb	r3, r3
 800561a:	089b      	lsrs	r3, r3, #2
 800561c:	33c0      	adds	r3, #192	@ 0xc0
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	589b      	ldr	r3, [r3, r2]
 8005622:	1dfa      	adds	r2, r7, #7
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	0011      	movs	r1, r2
 8005628:	2203      	movs	r2, #3
 800562a:	400a      	ands	r2, r1
 800562c:	00d2      	lsls	r2, r2, #3
 800562e:	21ff      	movs	r1, #255	@ 0xff
 8005630:	4091      	lsls	r1, r2
 8005632:	000a      	movs	r2, r1
 8005634:	43d2      	mvns	r2, r2
 8005636:	401a      	ands	r2, r3
 8005638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	22ff      	movs	r2, #255	@ 0xff
 8005640:	401a      	ands	r2, r3
 8005642:	1dfb      	adds	r3, r7, #7
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	0018      	movs	r0, r3
 8005648:	2303      	movs	r3, #3
 800564a:	4003      	ands	r3, r0
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005650:	481f      	ldr	r0, [pc, #124]	@ (80056d0 <__NVIC_SetPriority+0xd4>)
 8005652:	1dfb      	adds	r3, r7, #7
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	b25b      	sxtb	r3, r3
 8005658:	089b      	lsrs	r3, r3, #2
 800565a:	430a      	orrs	r2, r1
 800565c:	33c0      	adds	r3, #192	@ 0xc0
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005662:	e031      	b.n	80056c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005664:	4a1b      	ldr	r2, [pc, #108]	@ (80056d4 <__NVIC_SetPriority+0xd8>)
 8005666:	1dfb      	adds	r3, r7, #7
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	0019      	movs	r1, r3
 800566c:	230f      	movs	r3, #15
 800566e:	400b      	ands	r3, r1
 8005670:	3b08      	subs	r3, #8
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	3306      	adds	r3, #6
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	18d3      	adds	r3, r2, r3
 800567a:	3304      	adds	r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	1dfa      	adds	r2, r7, #7
 8005680:	7812      	ldrb	r2, [r2, #0]
 8005682:	0011      	movs	r1, r2
 8005684:	2203      	movs	r2, #3
 8005686:	400a      	ands	r2, r1
 8005688:	00d2      	lsls	r2, r2, #3
 800568a:	21ff      	movs	r1, #255	@ 0xff
 800568c:	4091      	lsls	r1, r2
 800568e:	000a      	movs	r2, r1
 8005690:	43d2      	mvns	r2, r2
 8005692:	401a      	ands	r2, r3
 8005694:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	019b      	lsls	r3, r3, #6
 800569a:	22ff      	movs	r2, #255	@ 0xff
 800569c:	401a      	ands	r2, r3
 800569e:	1dfb      	adds	r3, r7, #7
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	0018      	movs	r0, r3
 80056a4:	2303      	movs	r3, #3
 80056a6:	4003      	ands	r3, r0
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80056ac:	4809      	ldr	r0, [pc, #36]	@ (80056d4 <__NVIC_SetPriority+0xd8>)
 80056ae:	1dfb      	adds	r3, r7, #7
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	001c      	movs	r4, r3
 80056b4:	230f      	movs	r3, #15
 80056b6:	4023      	ands	r3, r4
 80056b8:	3b08      	subs	r3, #8
 80056ba:	089b      	lsrs	r3, r3, #2
 80056bc:	430a      	orrs	r2, r1
 80056be:	3306      	adds	r3, #6
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	18c3      	adds	r3, r0, r3
 80056c4:	3304      	adds	r3, #4
 80056c6:	601a      	str	r2, [r3, #0]
}
 80056c8:	46c0      	nop			@ (mov r8, r8)
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b003      	add	sp, #12
 80056ce:	bd90      	pop	{r4, r7, pc}
 80056d0:	e000e100 	.word	0xe000e100
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	045b      	lsls	r3, r3, #17
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d301      	bcc.n	80056f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ec:	2301      	movs	r3, #1
 80056ee:	e010      	b.n	8005712 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056f0:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <SysTick_Config+0x44>)
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	3a01      	subs	r2, #1
 80056f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056f8:	2301      	movs	r3, #1
 80056fa:	425b      	negs	r3, r3
 80056fc:	2103      	movs	r1, #3
 80056fe:	0018      	movs	r0, r3
 8005700:	f7ff ff7c 	bl	80055fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005704:	4b05      	ldr	r3, [pc, #20]	@ (800571c <SysTick_Config+0x44>)
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800570a:	4b04      	ldr	r3, [pc, #16]	@ (800571c <SysTick_Config+0x44>)
 800570c:	2207      	movs	r2, #7
 800570e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005710:	2300      	movs	r3, #0
}
 8005712:	0018      	movs	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	b002      	add	sp, #8
 8005718:	bd80      	pop	{r7, pc}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	e000e010 	.word	0xe000e010

08005720 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	210f      	movs	r1, #15
 800572c:	187b      	adds	r3, r7, r1
 800572e:	1c02      	adds	r2, r0, #0
 8005730:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	187b      	adds	r3, r7, r1
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b25b      	sxtb	r3, r3
 800573a:	0011      	movs	r1, r2
 800573c:	0018      	movs	r0, r3
 800573e:	f7ff ff5d 	bl	80055fc <__NVIC_SetPriority>
}
 8005742:	46c0      	nop			@ (mov r8, r8)
 8005744:	46bd      	mov	sp, r7
 8005746:	b004      	add	sp, #16
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	0002      	movs	r2, r0
 8005752:	1dfb      	adds	r3, r7, #7
 8005754:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005756:	1dfb      	adds	r3, r7, #7
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b25b      	sxtb	r3, r3
 800575c:	0018      	movs	r0, r3
 800575e:	f7ff ff33 	bl	80055c8 <__NVIC_EnableIRQ>
}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	46bd      	mov	sp, r7
 8005766:	b002      	add	sp, #8
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0018      	movs	r0, r3
 8005776:	f7ff ffaf 	bl	80056d8 <SysTick_Config>
 800577a:	0003      	movs	r3, r0
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	b002      	add	sp, #8
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e04f      	b.n	8005836 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2225      	movs	r2, #37	@ 0x25
 800579a:	5c9b      	ldrb	r3, [r3, r2]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d008      	beq.n	80057b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2204      	movs	r2, #4
 80057a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2224      	movs	r2, #36	@ 0x24
 80057ac:	2100      	movs	r1, #0
 80057ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e040      	b.n	8005836 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	210e      	movs	r1, #14
 80057c0:	438a      	bics	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ce:	491c      	ldr	r1, [pc, #112]	@ (8005840 <HAL_DMA_Abort+0xbc>)
 80057d0:	400a      	ands	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2101      	movs	r1, #1
 80057e0:	438a      	bics	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e8:	221c      	movs	r2, #28
 80057ea:	401a      	ands	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f0:	2101      	movs	r1, #1
 80057f2:	4091      	lsls	r1, r2
 80057f4:	000a      	movs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005800:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00c      	beq.n	8005824 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005814:	490a      	ldr	r1, [pc, #40]	@ (8005840 <HAL_DMA_Abort+0xbc>)
 8005816:	400a      	ands	r2, r1
 8005818:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005822:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2225      	movs	r2, #37	@ 0x25
 8005828:	2101      	movs	r1, #1
 800582a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2224      	movs	r2, #36	@ 0x24
 8005830:	2100      	movs	r1, #0
 8005832:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b002      	add	sp, #8
 800583c:	bd80      	pop	{r7, pc}
 800583e:	46c0      	nop			@ (mov r8, r8)
 8005840:	fffffeff 	.word	0xfffffeff

08005844 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800584c:	210f      	movs	r1, #15
 800584e:	187b      	adds	r3, r7, r1
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2225      	movs	r2, #37	@ 0x25
 8005858:	5c9b      	ldrb	r3, [r3, r2]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d006      	beq.n	800586e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2204      	movs	r2, #4
 8005864:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005866:	187b      	adds	r3, r7, r1
 8005868:	2201      	movs	r2, #1
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e048      	b.n	8005900 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	210e      	movs	r1, #14
 800587a:	438a      	bics	r2, r1
 800587c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2101      	movs	r1, #1
 800588a:	438a      	bics	r2, r1
 800588c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005898:	491d      	ldr	r1, [pc, #116]	@ (8005910 <HAL_DMA_Abort_IT+0xcc>)
 800589a:	400a      	ands	r2, r1
 800589c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a2:	221c      	movs	r2, #28
 80058a4:	401a      	ands	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	2101      	movs	r1, #1
 80058ac:	4091      	lsls	r1, r2
 80058ae:	000a      	movs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00c      	beq.n	80058de <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ce:	4910      	ldr	r1, [pc, #64]	@ (8005910 <HAL_DMA_Abort_IT+0xcc>)
 80058d0:	400a      	ands	r2, r1
 80058d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2225      	movs	r2, #37	@ 0x25
 80058e2:	2101      	movs	r1, #1
 80058e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2224      	movs	r2, #36	@ 0x24
 80058ea:	2100      	movs	r1, #0
 80058ec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	0010      	movs	r0, r2
 80058fe:	4798      	blx	r3
    }
  }
  return status;
 8005900:	230f      	movs	r3, #15
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	781b      	ldrb	r3, [r3, #0]
}
 8005906:	0018      	movs	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	b004      	add	sp, #16
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	fffffeff 	.word	0xfffffeff

08005914 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e14e      	b.n	8005bc4 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	225c      	movs	r2, #92	@ 0x5c
 800592a:	5c9b      	ldrb	r3, [r3, r2]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d107      	bne.n	8005942 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	225d      	movs	r2, #93	@ 0x5d
 8005936:	2100      	movs	r1, #0
 8005938:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	0018      	movs	r0, r3
 800593e:	f7fe fc75 	bl	800422c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2110      	movs	r1, #16
 800594e:	438a      	bics	r2, r1
 8005950:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005952:	f7fe fed1 	bl	80046f8 <HAL_GetTick>
 8005956:	0003      	movs	r3, r0
 8005958:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800595a:	e012      	b.n	8005982 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800595c:	f7fe fecc 	bl	80046f8 <HAL_GetTick>
 8005960:	0002      	movs	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b0a      	cmp	r3, #10
 8005968:	d90b      	bls.n	8005982 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596e:	2201      	movs	r2, #1
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	225c      	movs	r2, #92	@ 0x5c
 800597a:	2103      	movs	r1, #3
 800597c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e120      	b.n	8005bc4 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2208      	movs	r2, #8
 800598a:	4013      	ands	r3, r2
 800598c:	2b08      	cmp	r3, #8
 800598e:	d0e5      	beq.n	800595c <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2101      	movs	r1, #1
 800599c:	430a      	orrs	r2, r1
 800599e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059a0:	f7fe feaa 	bl	80046f8 <HAL_GetTick>
 80059a4:	0003      	movs	r3, r0
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80059a8:	e012      	b.n	80059d0 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80059aa:	f7fe fea5 	bl	80046f8 <HAL_GetTick>
 80059ae:	0002      	movs	r2, r0
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b0a      	cmp	r3, #10
 80059b6:	d90b      	bls.n	80059d0 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059bc:	2201      	movs	r2, #1
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	225c      	movs	r2, #92	@ 0x5c
 80059c8:	2103      	movs	r1, #3
 80059ca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0f9      	b.n	8005bc4 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2201      	movs	r2, #1
 80059d8:	4013      	ands	r3, r2
 80059da:	d0e6      	beq.n	80059aa <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2102      	movs	r1, #2
 80059e8:	430a      	orrs	r2, r1
 80059ea:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a76      	ldr	r2, [pc, #472]	@ (8005bcc <HAL_FDCAN_Init+0x2b8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d103      	bne.n	80059fe <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80059f6:	4a76      	ldr	r2, [pc, #472]	@ (8005bd0 <HAL_FDCAN_Init+0x2bc>)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	7c1b      	ldrb	r3, [r3, #16]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d108      	bne.n	8005a18 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2140      	movs	r1, #64	@ 0x40
 8005a12:	438a      	bics	r2, r1
 8005a14:	619a      	str	r2, [r3, #24]
 8005a16:	e007      	b.n	8005a28 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2140      	movs	r1, #64	@ 0x40
 8005a24:	430a      	orrs	r2, r1
 8005a26:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	7c5b      	ldrb	r3, [r3, #17]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d109      	bne.n	8005a44 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2180      	movs	r1, #128	@ 0x80
 8005a3c:	01c9      	lsls	r1, r1, #7
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	619a      	str	r2, [r3, #24]
 8005a42:	e007      	b.n	8005a54 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4961      	ldr	r1, [pc, #388]	@ (8005bd4 <HAL_FDCAN_Init+0x2c0>)
 8005a50:	400a      	ands	r2, r1
 8005a52:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7c9b      	ldrb	r3, [r3, #18]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d108      	bne.n	8005a6e <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	495c      	ldr	r1, [pc, #368]	@ (8005bd8 <HAL_FDCAN_Init+0x2c4>)
 8005a68:	400a      	ands	r2, r1
 8005a6a:	619a      	str	r2, [r3, #24]
 8005a6c:	e008      	b.n	8005a80 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699a      	ldr	r2, [r3, #24]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2180      	movs	r1, #128	@ 0x80
 8005a7a:	0149      	lsls	r1, r1, #5
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	4a55      	ldr	r2, [pc, #340]	@ (8005bdc <HAL_FDCAN_Init+0x2c8>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	0019      	movs	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	21a4      	movs	r1, #164	@ 0xa4
 8005aa4:	438a      	bics	r2, r1
 8005aa6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2110      	movs	r1, #16
 8005ab4:	438a      	bics	r2, r1
 8005ab6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d108      	bne.n	8005ad2 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2104      	movs	r1, #4
 8005acc:	430a      	orrs	r2, r1
 8005ace:	619a      	str	r2, [r3, #24]
 8005ad0:	e02c      	b.n	8005b2c <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d028      	beq.n	8005b2c <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d01c      	beq.n	8005b1c <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2180      	movs	r1, #128	@ 0x80
 8005aee:	430a      	orrs	r2, r1
 8005af0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2110      	movs	r1, #16
 8005afe:	430a      	orrs	r2, r1
 8005b00:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d110      	bne.n	8005b2c <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2120      	movs	r1, #32
 8005b16:	430a      	orrs	r2, r1
 8005b18:	619a      	str	r2, [r3, #24]
 8005b1a:	e007      	b.n	8005b2c <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2120      	movs	r1, #32
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b3c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b44:	431a      	orrs	r2, r3
 8005b46:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b54:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b56:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	23c0      	movs	r3, #192	@ 0xc0
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d115      	bne.n	8005b90 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b68:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b72:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b84:	3b01      	subs	r3, #1
 8005b86:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005b8c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b8e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	22c0      	movs	r2, #192	@ 0xc0
 8005b96:	5899      	ldr	r1, [r3, r2]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	21c0      	movs	r1, #192	@ 0xc0
 8005ba4:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f000 fc21 	bl	80063f0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	225c      	movs	r2, #92	@ 0x5c
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b004      	add	sp, #16
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40006400 	.word	0x40006400
 8005bd0:	40006500 	.word	0x40006500
 8005bd4:	ffffbfff 	.word	0xffffbfff
 8005bd8:	ffffefff 	.word	0xffffefff
 8005bdc:	fffffcff 	.word	0xfffffcff

08005be0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005bea:	2017      	movs	r0, #23
 8005bec:	183b      	adds	r3, r7, r0
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	215c      	movs	r1, #92	@ 0x5c
 8005bf2:	5c52      	ldrb	r2, [r2, r1]
 8005bf4:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005bf6:	0002      	movs	r2, r0
 8005bf8:	18bb      	adds	r3, r7, r2
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d003      	beq.n	8005c08 <HAL_FDCAN_ConfigFilter+0x28>
 8005c00:	18bb      	adds	r3, r7, r2
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d13d      	bne.n	8005c84 <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d119      	bne.n	8005c44 <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005c1c:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005c24:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	18d3      	adds	r3, r2, r3
 8005c3a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	e01d      	b.n	8005c80 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	075a      	lsls	r2, r3, #29
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	079a      	lsls	r2, r3, #30
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	18d3      	adds	r3, r2, r3
 8005c6c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	3304      	adds	r3, #4
 8005c78:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e006      	b.n	8005c92 <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c88:	2202      	movs	r2, #2
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
  }
}
 8005c92:	0018      	movs	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b006      	add	sp, #24
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
 8005ca6:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	225c      	movs	r2, #92	@ 0x5c
 8005cac:	5c9b      	ldrb	r3, [r3, r2]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d117      	bne.n	8005ce4 <HAL_FDCAN_ConfigGlobalFilter+0x4a>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2280      	movs	r2, #128	@ 0x80
 8005cba:	589b      	ldr	r3, [r3, r2]
 8005cbc:	223f      	movs	r2, #63	@ 0x3f
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	011a      	lsls	r2, r3, #4
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	2180      	movs	r1, #128	@ 0x80
 8005cde:	505a      	str	r2, [r3, r1]
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e006      	b.n	8005cf2 <HAL_FDCAN_ConfigGlobalFilter+0x58>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce8:	2204      	movs	r2, #4
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
  }
}
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b004      	add	sp, #16
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	225c      	movs	r2, #92	@ 0x5c
 8005d06:	5c9b      	ldrb	r3, [r3, r2]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d110      	bne.n	8005d30 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	225c      	movs	r2, #92	@ 0x5c
 8005d12:	2102      	movs	r1, #2
 8005d14:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2101      	movs	r1, #1
 8005d22:	438a      	bics	r2, r1
 8005d24:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e006      	b.n	8005d3e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d34:	2204      	movs	r2, #4
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
  }
}
 8005d3e:	0018      	movs	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	b002      	add	sp, #8
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	@ 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005d56:	201b      	movs	r0, #27
 8005d58:	183b      	adds	r3, r7, r0
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	215c      	movs	r1, #92	@ 0x5c
 8005d5e:	5c52      	ldrb	r2, [r2, r1]
 8005d60:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005d62:	183b      	adds	r3, r7, r0
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d000      	beq.n	8005d6c <HAL_FDCAN_GetRxMessage+0x24>
 8005d6a:	e0c1      	b.n	8005ef0 <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b40      	cmp	r3, #64	@ 0x40
 8005d70:	d121      	bne.n	8005db6 <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2290      	movs	r2, #144	@ 0x90
 8005d78:	589b      	ldr	r3, [r3, r2]
 8005d7a:	220f      	movs	r2, #15
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d108      	bne.n	8005d92 <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d84:	2280      	movs	r2, #128	@ 0x80
 8005d86:	0052      	lsls	r2, r2, #1
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e0b5      	b.n	8005efe <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2290      	movs	r2, #144	@ 0x90
 8005d98:	589b      	ldr	r3, [r3, r2]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	4013      	ands	r3, r2
 8005da0:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	0013      	movs	r3, r2
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	189b      	adds	r3, r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	18cb      	adds	r3, r1, r3
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db4:	e020      	b.n	8005df8 <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2298      	movs	r2, #152	@ 0x98
 8005dbc:	589b      	ldr	r3, [r3, r2]
 8005dbe:	220f      	movs	r2, #15
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	d108      	bne.n	8005dd6 <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc8:	2280      	movs	r2, #128	@ 0x80
 8005dca:	0052      	lsls	r2, r2, #1
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e093      	b.n	8005efe <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2298      	movs	r2, #152	@ 0x98
 8005ddc:	589b      	ldr	r3, [r3, r2]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	2203      	movs	r2, #3
 8005de2:	4013      	ands	r3, r2
 8005de4:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	0013      	movs	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	18cb      	adds	r3, r1, r3
 8005df6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2380      	movs	r3, #128	@ 0x80
 8005dfe:	05db      	lsls	r3, r3, #23
 8005e00:	401a      	ands	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d107      	bne.n	8005e1e <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	0c9b      	lsrs	r3, r3, #18
 8005e14:	055b      	lsls	r3, r3, #21
 8005e16:	0d5a      	lsrs	r2, r3, #21
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e005      	b.n	8005e2a <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	08da      	lsrs	r2, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	2380      	movs	r3, #128	@ 0x80
 8005e30:	059b      	lsls	r3, r3, #22
 8005e32:	401a      	ands	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	0fdb      	lsrs	r3, r3, #31
 8005e3e:	07da      	lsls	r2, r3, #31
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	3304      	adds	r3, #4
 8005e48:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	041b      	lsls	r3, r3, #16
 8005e50:	0c1a      	lsrs	r2, r3, #16
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	23f0      	movs	r3, #240	@ 0xf0
 8005e5c:	031b      	lsls	r3, r3, #12
 8005e5e:	401a      	ands	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	2380      	movs	r3, #128	@ 0x80
 8005e6a:	035b      	lsls	r3, r3, #13
 8005e6c:	401a      	ands	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	2380      	movs	r3, #128	@ 0x80
 8005e78:	039b      	lsls	r3, r3, #14
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	0e1b      	lsrs	r3, r3, #24
 8005e86:	227f      	movs	r2, #127	@ 0x7f
 8005e88:	401a      	ands	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	0fda      	lsrs	r2, r3, #31
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	e00a      	b.n	8005ebe <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	18d2      	adds	r2, r2, r3
 8005eae:	6839      	ldr	r1, [r7, #0]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	18cb      	adds	r3, r1, r3
 8005eb4:	7812      	ldrb	r2, [r2, #0]
 8005eb6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	4a10      	ldr	r2, [pc, #64]	@ (8005f08 <HAL_FDCAN_GetRxMessage+0x1c0>)
 8005ec6:	5cd3      	ldrb	r3, [r2, r3]
 8005ec8:	001a      	movs	r2, r3
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d3eb      	bcc.n	8005ea8 <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b40      	cmp	r3, #64	@ 0x40
 8005ed4:	d105      	bne.n	8005ee2 <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2194      	movs	r1, #148	@ 0x94
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	505a      	str	r2, [r3, r1]
 8005ee0:	e004      	b.n	8005eec <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	219c      	movs	r1, #156	@ 0x9c
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e006      	b.n	8005efe <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
  }
}
 8005efe:	0018      	movs	r0, r3
 8005f00:	46bd      	mov	sp, r7
 8005f02:	b00a      	add	sp, #40	@ 0x28
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	46c0      	nop			@ (mov r8, r8)
 8005f08:	08009948 	.word	0x08009948

08005f0c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f18:	2017      	movs	r0, #23
 8005f1a:	183b      	adds	r3, r7, r0
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	215c      	movs	r1, #92	@ 0x5c
 8005f20:	5c52      	ldrb	r2, [r2, r1]
 8005f22:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005f24:	0002      	movs	r2, r0
 8005f26:	18bb      	adds	r3, r7, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d004      	beq.n	8005f38 <HAL_FDCAN_ActivateNotification+0x2c>
 8005f2e:	18bb      	adds	r3, r7, r2
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d000      	beq.n	8005f38 <HAL_FDCAN_ActivateNotification+0x2c>
 8005f36:	e0b4      	b.n	80060a2 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3e:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2207      	movs	r2, #7
 8005f44:	4013      	ands	r3, r2
 8005f46:	d003      	beq.n	8005f50 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d034      	beq.n	8005fba <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2238      	movs	r2, #56	@ 0x38
 8005f54:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005f56:	d003      	beq.n	8005f60 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d02c      	beq.n	8005fba <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	23e0      	movs	r3, #224	@ 0xe0
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005f68:	d003      	beq.n	8005f72 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d023      	beq.n	8005fba <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	23f0      	movs	r3, #240	@ 0xf0
 8005f76:	015b      	lsls	r3, r3, #5
 8005f78:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005f7a:	d003      	beq.n	8005f84 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2208      	movs	r2, #8
 8005f80:	4013      	ands	r3, r2
 8005f82:	d01a      	beq.n	8005fba <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	23e0      	movs	r3, #224	@ 0xe0
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005f8c:	d003      	beq.n	8005f96 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2210      	movs	r2, #16
 8005f92:	4013      	ands	r3, r2
 8005f94:	d011      	beq.n	8005fba <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	23c0      	movs	r3, #192	@ 0xc0
 8005f9a:	029b      	lsls	r3, r3, #10
 8005f9c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005f9e:	d003      	beq.n	8005fa8 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d008      	beq.n	8005fba <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	23fc      	movs	r3, #252	@ 0xfc
 8005fac:	041b      	lsls	r3, r3, #16
 8005fae:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005fb0:	d00b      	beq.n	8005fca <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2240      	movs	r2, #64	@ 0x40
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d107      	bne.n	8005fca <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2207      	movs	r2, #7
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d003      	beq.n	8005fda <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d134      	bne.n	8006044 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2238      	movs	r2, #56	@ 0x38
 8005fde:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005fe0:	d003      	beq.n	8005fea <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d12c      	bne.n	8006044 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	23e0      	movs	r3, #224	@ 0xe0
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005ff2:	d003      	beq.n	8005ffc <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d123      	bne.n	8006044 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	23f0      	movs	r3, #240	@ 0xf0
 8006000:	015b      	lsls	r3, r3, #5
 8006002:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006004:	d003      	beq.n	800600e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2208      	movs	r2, #8
 800600a:	4013      	ands	r3, r2
 800600c:	d11a      	bne.n	8006044 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	23e0      	movs	r3, #224	@ 0xe0
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006016:	d003      	beq.n	8006020 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2210      	movs	r2, #16
 800601c:	4013      	ands	r3, r2
 800601e:	d111      	bne.n	8006044 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	23c0      	movs	r3, #192	@ 0xc0
 8006024:	029b      	lsls	r3, r3, #10
 8006026:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006028:	d003      	beq.n	8006032 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2220      	movs	r2, #32
 800602e:	4013      	ands	r3, r2
 8006030:	d108      	bne.n	8006044 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	23fc      	movs	r3, #252	@ 0xfc
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800603a:	d00b      	beq.n	8006054 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	2240      	movs	r2, #64	@ 0x40
 8006040:	4013      	ands	r3, r2
 8006042:	d007      	beq.n	8006054 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2102      	movs	r1, #2
 8006050:	430a      	orrs	r2, r1
 8006052:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2280      	movs	r2, #128	@ 0x80
 8006058:	4013      	ands	r3, r2
 800605a:	d009      	beq.n	8006070 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	22dc      	movs	r2, #220	@ 0xdc
 8006062:	5899      	ldr	r1, [r3, r2]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	430a      	orrs	r2, r1
 800606c:	21dc      	movs	r1, #220	@ 0xdc
 800606e:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	2380      	movs	r3, #128	@ 0x80
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	4013      	ands	r3, r2
 8006078:	d009      	beq.n	800608e <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	22e0      	movs	r2, #224	@ 0xe0
 8006080:	5899      	ldr	r1, [r3, r2]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	430a      	orrs	r2, r1
 800608a:	21e0      	movs	r1, #224	@ 0xe0
 800608c:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	430a      	orrs	r2, r1
 800609c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e006      	b.n	80060b0 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a6:	2202      	movs	r2, #2
 80060a8:	431a      	orrs	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
  }
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b006      	add	sp, #24
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	@ 0x30
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060c6:	23e0      	movs	r3, #224	@ 0xe0
 80060c8:	015b      	lsls	r3, r3, #5
 80060ca:	4013      	ands	r3, r2
 80060cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d6:	4013      	ands	r3, r2
 80060d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e0:	2207      	movs	r2, #7
 80060e2:	4013      	ands	r3, r2
 80060e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ee:	4013      	ands	r3, r2
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f8:	2238      	movs	r2, #56	@ 0x38
 80060fa:	4013      	ands	r3, r2
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	4013      	ands	r3, r2
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006110:	23f1      	movs	r3, #241	@ 0xf1
 8006112:	041b      	lsls	r3, r3, #16
 8006114:	4013      	ands	r3, r2
 8006116:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	4013      	ands	r3, r2
 8006122:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800612a:	23e0      	movs	r3, #224	@ 0xe0
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	4013      	ands	r3, r2
 8006130:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4013      	ands	r3, r2
 800613c:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006144:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800614c:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	099b      	lsrs	r3, r3, #6
 8006152:	001a      	movs	r2, r3
 8006154:	2301      	movs	r3, #1
 8006156:	4013      	ands	r3, r2
 8006158:	d00d      	beq.n	8006176 <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	099b      	lsrs	r3, r3, #6
 800615e:	001a      	movs	r2, r3
 8006160:	2301      	movs	r3, #1
 8006162:	4013      	ands	r3, r2
 8006164:	d007      	beq.n	8006176 <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2240      	movs	r2, #64	@ 0x40
 800616c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	0018      	movs	r0, r3
 8006172:	f000 f924 	bl	80063be <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	0a1b      	lsrs	r3, r3, #8
 800617a:	001a      	movs	r2, r3
 800617c:	2301      	movs	r3, #1
 800617e:	4013      	ands	r3, r2
 8006180:	d01c      	beq.n	80061bc <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	0a1b      	lsrs	r3, r3, #8
 8006186:	001a      	movs	r2, r3
 8006188:	2301      	movs	r3, #1
 800618a:	4013      	ands	r3, r2
 800618c:	d016      	beq.n	80061bc <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	22d8      	movs	r2, #216	@ 0xd8
 8006194:	589b      	ldr	r3, [r3, r2]
 8006196:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	22e0      	movs	r2, #224	@ 0xe0
 800619e:	589a      	ldr	r2, [r3, r2]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	4013      	ands	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2280      	movs	r2, #128	@ 0x80
 80061ac:	0052      	lsls	r2, r2, #1
 80061ae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	0011      	movs	r1, r2
 80061b6:	0018      	movs	r0, r3
 80061b8:	f000 f8e8 	bl	800638c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80061bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061c8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80061ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	0011      	movs	r1, r2
 80061d0:	0018      	movs	r0, r3
 80061d2:	f000 f8b8 	bl	8006346 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80061d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d009      	beq.n	80061f0 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80061e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	0011      	movs	r1, r2
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7fd ff6a 	bl	80040c4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061fc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80061fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	0011      	movs	r1, r2
 8006204:	0018      	movs	r0, r3
 8006206:	f000 f8a7 	bl	8006358 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	0a5b      	lsrs	r3, r3, #9
 800620e:	001a      	movs	r2, r3
 8006210:	2301      	movs	r3, #1
 8006212:	4013      	ands	r3, r2
 8006214:	d00e      	beq.n	8006234 <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	0a5b      	lsrs	r3, r3, #9
 800621a:	001a      	movs	r2, r3
 800621c:	2301      	movs	r3, #1
 800621e:	4013      	ands	r3, r2
 8006220:	d008      	beq.n	8006234 <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2280      	movs	r2, #128	@ 0x80
 8006228:	0092      	lsls	r2, r2, #2
 800622a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	0018      	movs	r0, r3
 8006230:	f000 f89b 	bl	800636a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	09db      	lsrs	r3, r3, #7
 8006238:	001a      	movs	r2, r3
 800623a:	2301      	movs	r3, #1
 800623c:	4013      	ands	r3, r2
 800623e:	d01b      	beq.n	8006278 <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	09db      	lsrs	r3, r3, #7
 8006244:	001a      	movs	r2, r3
 8006246:	2301      	movs	r3, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d015      	beq.n	8006278 <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	22d4      	movs	r2, #212	@ 0xd4
 8006252:	589b      	ldr	r3, [r3, r2]
 8006254:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	22dc      	movs	r2, #220	@ 0xdc
 800625c:	589a      	ldr	r2, [r3, r2]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4013      	ands	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2280      	movs	r2, #128	@ 0x80
 800626a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0011      	movs	r1, r2
 8006272:	0018      	movs	r0, r3
 8006274:	f000 f881 	bl	800637a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	0b5b      	lsrs	r3, r3, #13
 800627c:	001a      	movs	r2, r3
 800627e:	2301      	movs	r3, #1
 8006280:	4013      	ands	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	0b5b      	lsrs	r3, r3, #13
 8006288:	001a      	movs	r2, r3
 800628a:	2301      	movs	r3, #1
 800628c:	4013      	ands	r3, r2
 800628e:	d008      	beq.n	80062a2 <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2280      	movs	r2, #128	@ 0x80
 8006296:	0192      	lsls	r2, r2, #6
 8006298:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	0018      	movs	r0, r3
 800629e:	f000 f87e 	bl	800639e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	0bdb      	lsrs	r3, r3, #15
 80062a6:	001a      	movs	r2, r3
 80062a8:	2301      	movs	r3, #1
 80062aa:	4013      	ands	r3, r2
 80062ac:	d00e      	beq.n	80062cc <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	0bdb      	lsrs	r3, r3, #15
 80062b2:	001a      	movs	r2, r3
 80062b4:	2301      	movs	r3, #1
 80062b6:	4013      	ands	r3, r2
 80062b8:	d008      	beq.n	80062cc <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2280      	movs	r2, #128	@ 0x80
 80062c0:	0212      	lsls	r2, r2, #8
 80062c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	0018      	movs	r0, r3
 80062c8:	f000 f871 	bl	80063ae <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	0b9b      	lsrs	r3, r3, #14
 80062d0:	001a      	movs	r2, r3
 80062d2:	2301      	movs	r3, #1
 80062d4:	4013      	ands	r3, r2
 80062d6:	d010      	beq.n	80062fa <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	0b9b      	lsrs	r3, r3, #14
 80062dc:	001a      	movs	r2, r3
 80062de:	2301      	movs	r3, #1
 80062e0:	4013      	ands	r3, r2
 80062e2:	d00a      	beq.n	80062fa <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2280      	movs	r2, #128	@ 0x80
 80062ea:	01d2      	lsls	r2, r2, #7
 80062ec:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f2:	2280      	movs	r2, #128	@ 0x80
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	0011      	movs	r1, r2
 800630e:	0018      	movs	r0, r3
 8006310:	f000 f865 	bl	80063de <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6a3a      	ldr	r2, [r7, #32]
 8006320:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0018      	movs	r0, r3
 800633a:	f000 f848 	bl	80063ce <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	46bd      	mov	sp, r7
 8006342:	b00c      	add	sp, #48	@ 0x30
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006350:	46c0      	nop			@ (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	b002      	add	sp, #8
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006362:	46c0      	nop			@ (mov r8, r8)
 8006364:	46bd      	mov	sp, r7
 8006366:	b002      	add	sp, #8
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006372:	46c0      	nop			@ (mov r8, r8)
 8006374:	46bd      	mov	sp, r7
 8006376:	b002      	add	sp, #8
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006384:	46c0      	nop			@ (mov r8, r8)
 8006386:	46bd      	mov	sp, r7
 8006388:	b002      	add	sp, #8
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006396:	46c0      	nop			@ (mov r8, r8)
 8006398:	46bd      	mov	sp, r7
 800639a:	b002      	add	sp, #8
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80063a6:	46c0      	nop			@ (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b002      	add	sp, #8
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80063b6:	46c0      	nop			@ (mov r8, r8)
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b002      	add	sp, #8
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	46bd      	mov	sp, r7
 80063ca:	b002      	add	sp, #8
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80063d6:	46c0      	nop			@ (mov r8, r8)
 80063d8:	46bd      	mov	sp, r7
 80063da:	b002      	add	sp, #8
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80063e8:	46c0      	nop			@ (mov r8, r8)
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b002      	add	sp, #8
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80063f8:	4b2f      	ldr	r3, [pc, #188]	@ (80064b8 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 80063fa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2e      	ldr	r2, [pc, #184]	@ (80064bc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d105      	bne.n	8006412 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	22d4      	movs	r2, #212	@ 0xd4
 800640a:	0092      	lsls	r2, r2, #2
 800640c:	4694      	mov	ip, r2
 800640e:	4463      	add	r3, ip
 8006410:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2280      	movs	r2, #128	@ 0x80
 800641e:	589b      	ldr	r3, [r3, r2]
 8006420:	4a27      	ldr	r2, [pc, #156]	@ (80064c0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8006422:	4013      	ands	r3, r2
 8006424:	0019      	movs	r1, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800642a:	041a      	lsls	r2, r3, #16
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	2180      	movs	r1, #128	@ 0x80
 8006434:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	3370      	adds	r3, #112	@ 0x70
 800643a:	001a      	movs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2280      	movs	r2, #128	@ 0x80
 8006446:	589b      	ldr	r3, [r3, r2]
 8006448:	4a1e      	ldr	r2, [pc, #120]	@ (80064c4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800644a:	4013      	ands	r3, r2
 800644c:	0019      	movs	r1, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006452:	061a      	lsls	r2, r3, #24
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	2180      	movs	r1, #128	@ 0x80
 800645c:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	33b0      	adds	r3, #176	@ 0xb0
 8006462:	001a      	movs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	3389      	adds	r3, #137	@ 0x89
 800646c:	33ff      	adds	r3, #255	@ 0xff
 800646e:	001a      	movs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2298      	movs	r2, #152	@ 0x98
 8006478:	0092      	lsls	r2, r2, #2
 800647a:	189a      	adds	r2, r3, r2
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	229e      	movs	r2, #158	@ 0x9e
 8006484:	0092      	lsls	r2, r2, #2
 8006486:	189a      	adds	r2, r3, r2
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	e005      	b.n	800649e <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3304      	adds	r3, #4
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	22d4      	movs	r2, #212	@ 0xd4
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	4694      	mov	ip, r2
 80064a6:	4463      	add	r3, ip
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d3f1      	bcc.n	8006492 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	46c0      	nop			@ (mov r8, r8)
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b004      	add	sp, #16
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	4000b400 	.word	0x4000b400
 80064bc:	40006800 	.word	0x40006800
 80064c0:	ffe0ffff 	.word	0xffe0ffff
 80064c4:	f0ffffff 	.word	0xf0ffffff

080064c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064d6:	e14d      	b.n	8006774 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2101      	movs	r1, #1
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4091      	lsls	r1, r2
 80064e2:	000a      	movs	r2, r1
 80064e4:	4013      	ands	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d100      	bne.n	80064f0 <HAL_GPIO_Init+0x28>
 80064ee:	e13e      	b.n	800676e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2203      	movs	r2, #3
 80064f6:	4013      	ands	r3, r2
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d005      	beq.n	8006508 <HAL_GPIO_Init+0x40>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2203      	movs	r2, #3
 8006502:	4013      	ands	r3, r2
 8006504:	2b02      	cmp	r3, #2
 8006506:	d130      	bne.n	800656a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	2203      	movs	r2, #3
 8006514:	409a      	lsls	r2, r3
 8006516:	0013      	movs	r3, r2
 8006518:	43da      	mvns	r2, r3
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	4013      	ands	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	409a      	lsls	r2, r3
 800652a:	0013      	movs	r3, r2
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800653e:	2201      	movs	r2, #1
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	409a      	lsls	r2, r3
 8006544:	0013      	movs	r3, r2
 8006546:	43da      	mvns	r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4013      	ands	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	091b      	lsrs	r3, r3, #4
 8006554:	2201      	movs	r2, #1
 8006556:	401a      	ands	r2, r3
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	409a      	lsls	r2, r3
 800655c:	0013      	movs	r3, r2
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2203      	movs	r2, #3
 8006570:	4013      	ands	r3, r2
 8006572:	2b03      	cmp	r3, #3
 8006574:	d017      	beq.n	80065a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	2203      	movs	r2, #3
 8006582:	409a      	lsls	r2, r3
 8006584:	0013      	movs	r3, r2
 8006586:	43da      	mvns	r2, r3
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4013      	ands	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	409a      	lsls	r2, r3
 8006598:	0013      	movs	r3, r2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2203      	movs	r2, #3
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d123      	bne.n	80065fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	08da      	lsrs	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3208      	adds	r2, #8
 80065ba:	0092      	lsls	r2, r2, #2
 80065bc:	58d3      	ldr	r3, [r2, r3]
 80065be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2207      	movs	r2, #7
 80065c4:	4013      	ands	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	220f      	movs	r2, #15
 80065ca:	409a      	lsls	r2, r3
 80065cc:	0013      	movs	r3, r2
 80065ce:	43da      	mvns	r2, r3
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4013      	ands	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2107      	movs	r1, #7
 80065de:	400b      	ands	r3, r1
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	409a      	lsls	r2, r3
 80065e4:	0013      	movs	r3, r2
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	08da      	lsrs	r2, r3, #3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3208      	adds	r2, #8
 80065f4:	0092      	lsls	r2, r2, #2
 80065f6:	6939      	ldr	r1, [r7, #16]
 80065f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	2203      	movs	r2, #3
 8006606:	409a      	lsls	r2, r3
 8006608:	0013      	movs	r3, r2
 800660a:	43da      	mvns	r2, r3
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	4013      	ands	r3, r2
 8006610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2203      	movs	r2, #3
 8006618:	401a      	ands	r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	409a      	lsls	r2, r3
 8006620:	0013      	movs	r3, r2
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	23c0      	movs	r3, #192	@ 0xc0
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	4013      	ands	r3, r2
 8006638:	d100      	bne.n	800663c <HAL_GPIO_Init+0x174>
 800663a:	e098      	b.n	800676e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800663c:	4a53      	ldr	r2, [pc, #332]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	089b      	lsrs	r3, r3, #2
 8006642:	3318      	adds	r3, #24
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	589b      	ldr	r3, [r3, r2]
 8006648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2203      	movs	r2, #3
 800664e:	4013      	ands	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	220f      	movs	r2, #15
 8006654:	409a      	lsls	r2, r3
 8006656:	0013      	movs	r3, r2
 8006658:	43da      	mvns	r2, r3
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	4013      	ands	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	23a0      	movs	r3, #160	@ 0xa0
 8006664:	05db      	lsls	r3, r3, #23
 8006666:	429a      	cmp	r2, r3
 8006668:	d019      	beq.n	800669e <HAL_GPIO_Init+0x1d6>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a48      	ldr	r2, [pc, #288]	@ (8006790 <HAL_GPIO_Init+0x2c8>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_GPIO_Init+0x1d2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a47      	ldr	r2, [pc, #284]	@ (8006794 <HAL_GPIO_Init+0x2cc>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00d      	beq.n	8006696 <HAL_GPIO_Init+0x1ce>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a46      	ldr	r2, [pc, #280]	@ (8006798 <HAL_GPIO_Init+0x2d0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d007      	beq.n	8006692 <HAL_GPIO_Init+0x1ca>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a45      	ldr	r2, [pc, #276]	@ (800679c <HAL_GPIO_Init+0x2d4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d101      	bne.n	800668e <HAL_GPIO_Init+0x1c6>
 800668a:	2304      	movs	r3, #4
 800668c:	e008      	b.n	80066a0 <HAL_GPIO_Init+0x1d8>
 800668e:	2305      	movs	r3, #5
 8006690:	e006      	b.n	80066a0 <HAL_GPIO_Init+0x1d8>
 8006692:	2303      	movs	r3, #3
 8006694:	e004      	b.n	80066a0 <HAL_GPIO_Init+0x1d8>
 8006696:	2302      	movs	r3, #2
 8006698:	e002      	b.n	80066a0 <HAL_GPIO_Init+0x1d8>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <HAL_GPIO_Init+0x1d8>
 800669e:	2300      	movs	r3, #0
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	2103      	movs	r1, #3
 80066a4:	400a      	ands	r2, r1
 80066a6:	00d2      	lsls	r2, r2, #3
 80066a8:	4093      	lsls	r3, r2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80066b0:	4936      	ldr	r1, [pc, #216]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	089b      	lsrs	r3, r3, #2
 80066b6:	3318      	adds	r3, #24
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066be:	4b33      	ldr	r3, [pc, #204]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	43da      	mvns	r2, r3
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4013      	ands	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	2380      	movs	r3, #128	@ 0x80
 80066d4:	035b      	lsls	r3, r3, #13
 80066d6:	4013      	ands	r3, r2
 80066d8:	d003      	beq.n	80066e2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066e2:	4b2a      	ldr	r3, [pc, #168]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80066e8:	4b28      	ldr	r3, [pc, #160]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	43da      	mvns	r2, r3
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	4013      	ands	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	2380      	movs	r3, #128	@ 0x80
 80066fe:	039b      	lsls	r3, r3, #14
 8006700:	4013      	ands	r3, r2
 8006702:	d003      	beq.n	800670c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800670c:	4b1f      	ldr	r3, [pc, #124]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006712:	4a1e      	ldr	r2, [pc, #120]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 8006714:	2384      	movs	r3, #132	@ 0x84
 8006716:	58d3      	ldr	r3, [r2, r3]
 8006718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	43da      	mvns	r2, r3
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4013      	ands	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	2380      	movs	r3, #128	@ 0x80
 800672a:	029b      	lsls	r3, r3, #10
 800672c:	4013      	ands	r3, r2
 800672e:	d003      	beq.n	8006738 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006738:	4914      	ldr	r1, [pc, #80]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 800673a:	2284      	movs	r2, #132	@ 0x84
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006740:	4a12      	ldr	r2, [pc, #72]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 8006742:	2380      	movs	r3, #128	@ 0x80
 8006744:	58d3      	ldr	r3, [r2, r3]
 8006746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	43da      	mvns	r2, r3
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4013      	ands	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	2380      	movs	r3, #128	@ 0x80
 8006758:	025b      	lsls	r3, r3, #9
 800675a:	4013      	ands	r3, r2
 800675c:	d003      	beq.n	8006766 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006766:	4909      	ldr	r1, [pc, #36]	@ (800678c <HAL_GPIO_Init+0x2c4>)
 8006768:	2280      	movs	r2, #128	@ 0x80
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	3301      	adds	r3, #1
 8006772:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	40da      	lsrs	r2, r3
 800677c:	1e13      	subs	r3, r2, #0
 800677e:	d000      	beq.n	8006782 <HAL_GPIO_Init+0x2ba>
 8006780:	e6aa      	b.n	80064d8 <HAL_GPIO_Init+0x10>
  }
}
 8006782:	46c0      	nop			@ (mov r8, r8)
 8006784:	46c0      	nop			@ (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b006      	add	sp, #24
 800678a:	bd80      	pop	{r7, pc}
 800678c:	40021800 	.word	0x40021800
 8006790:	50000400 	.word	0x50000400
 8006794:	50000800 	.word	0x50000800
 8006798:	50000c00 	.word	0x50000c00
 800679c:	50001000 	.word	0x50001000

080067a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	0008      	movs	r0, r1
 80067aa:	0011      	movs	r1, r2
 80067ac:	1cbb      	adds	r3, r7, #2
 80067ae:	1c02      	adds	r2, r0, #0
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	1c7b      	adds	r3, r7, #1
 80067b4:	1c0a      	adds	r2, r1, #0
 80067b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067b8:	1c7b      	adds	r3, r7, #1
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d004      	beq.n	80067ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067c0:	1cbb      	adds	r3, r7, #2
 80067c2:	881a      	ldrh	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067c8:	e003      	b.n	80067d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067ca:	1cbb      	adds	r3, r7, #2
 80067cc:	881a      	ldrh	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80067d2:	46c0      	nop			@ (mov r8, r8)
 80067d4:	46bd      	mov	sp, r7
 80067d6:	b002      	add	sp, #8
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	000a      	movs	r2, r1
 80067e4:	1cbb      	adds	r3, r7, #2
 80067e6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067ee:	1cbb      	adds	r3, r7, #2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4013      	ands	r3, r2
 80067f6:	041a      	lsls	r2, r3, #16
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	43db      	mvns	r3, r3
 80067fc:	1cb9      	adds	r1, r7, #2
 80067fe:	8809      	ldrh	r1, [r1, #0]
 8006800:	400b      	ands	r3, r1
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	619a      	str	r2, [r3, #24]
}
 8006808:	46c0      	nop			@ (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	b004      	add	sp, #16
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006818:	4b19      	ldr	r3, [pc, #100]	@ (8006880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a19      	ldr	r2, [pc, #100]	@ (8006884 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800681e:	4013      	ands	r3, r2
 8006820:	0019      	movs	r1, r3
 8006822:	4b17      	ldr	r3, [pc, #92]	@ (8006880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	430a      	orrs	r2, r1
 8006828:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	2380      	movs	r3, #128	@ 0x80
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	429a      	cmp	r2, r3
 8006832:	d11f      	bne.n	8006874 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006834:	4b14      	ldr	r3, [pc, #80]	@ (8006888 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	0013      	movs	r3, r2
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	189b      	adds	r3, r3, r2
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4912      	ldr	r1, [pc, #72]	@ (800688c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006842:	0018      	movs	r0, r3
 8006844:	f7f9 fc5e 	bl	8000104 <__udivsi3>
 8006848:	0003      	movs	r3, r0
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800684e:	e008      	b.n	8006862 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3b01      	subs	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	e001      	b.n	8006862 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e009      	b.n	8006876 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006862:	4b07      	ldr	r3, [pc, #28]	@ (8006880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	2380      	movs	r3, #128	@ 0x80
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	401a      	ands	r2, r3
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	429a      	cmp	r2, r3
 8006872:	d0ed      	beq.n	8006850 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	0018      	movs	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	b004      	add	sp, #16
 800687c:	bd80      	pop	{r7, pc}
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	40007000 	.word	0x40007000
 8006884:	fffff9ff 	.word	0xfffff9ff
 8006888:	20000010 	.word	0x20000010
 800688c:	000f4240 	.word	0x000f4240

08006890 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f000 fb50 	bl	8006f44 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2201      	movs	r2, #1
 80068aa:	4013      	ands	r3, r2
 80068ac:	d100      	bne.n	80068b0 <HAL_RCC_OscConfig+0x20>
 80068ae:	e07c      	b.n	80069aa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b0:	4bc3      	ldr	r3, [pc, #780]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2238      	movs	r2, #56	@ 0x38
 80068b6:	4013      	ands	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068ba:	4bc1      	ldr	r3, [pc, #772]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	2203      	movs	r2, #3
 80068c0:	4013      	ands	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d102      	bne.n	80068d0 <HAL_RCC_OscConfig+0x40>
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d002      	beq.n	80068d6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d10b      	bne.n	80068ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d6:	4bba      	ldr	r3, [pc, #744]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	2380      	movs	r3, #128	@ 0x80
 80068dc:	029b      	lsls	r3, r3, #10
 80068de:	4013      	ands	r3, r2
 80068e0:	d062      	beq.n	80069a8 <HAL_RCC_OscConfig+0x118>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d15e      	bne.n	80069a8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e32a      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	2380      	movs	r3, #128	@ 0x80
 80068f4:	025b      	lsls	r3, r3, #9
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d107      	bne.n	800690a <HAL_RCC_OscConfig+0x7a>
 80068fa:	4bb1      	ldr	r3, [pc, #708]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4bb0      	ldr	r3, [pc, #704]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006900:	2180      	movs	r1, #128	@ 0x80
 8006902:	0249      	lsls	r1, r1, #9
 8006904:	430a      	orrs	r2, r1
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	e020      	b.n	800694c <HAL_RCC_OscConfig+0xbc>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	23a0      	movs	r3, #160	@ 0xa0
 8006910:	02db      	lsls	r3, r3, #11
 8006912:	429a      	cmp	r2, r3
 8006914:	d10e      	bne.n	8006934 <HAL_RCC_OscConfig+0xa4>
 8006916:	4baa      	ldr	r3, [pc, #680]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4ba9      	ldr	r3, [pc, #676]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 800691c:	2180      	movs	r1, #128	@ 0x80
 800691e:	02c9      	lsls	r1, r1, #11
 8006920:	430a      	orrs	r2, r1
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	4ba6      	ldr	r3, [pc, #664]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4ba5      	ldr	r3, [pc, #660]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 800692a:	2180      	movs	r1, #128	@ 0x80
 800692c:	0249      	lsls	r1, r1, #9
 800692e:	430a      	orrs	r2, r1
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	e00b      	b.n	800694c <HAL_RCC_OscConfig+0xbc>
 8006934:	4ba2      	ldr	r3, [pc, #648]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4ba1      	ldr	r3, [pc, #644]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 800693a:	49a2      	ldr	r1, [pc, #648]	@ (8006bc4 <HAL_RCC_OscConfig+0x334>)
 800693c:	400a      	ands	r2, r1
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	4b9f      	ldr	r3, [pc, #636]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	4b9e      	ldr	r3, [pc, #632]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006946:	49a0      	ldr	r1, [pc, #640]	@ (8006bc8 <HAL_RCC_OscConfig+0x338>)
 8006948:	400a      	ands	r2, r1
 800694a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d014      	beq.n	800697e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fd fed0 	bl	80046f8 <HAL_GetTick>
 8006958:	0003      	movs	r3, r0
 800695a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800695e:	f7fd fecb 	bl	80046f8 <HAL_GetTick>
 8006962:	0002      	movs	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b64      	cmp	r3, #100	@ 0x64
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e2e9      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006970:	4b93      	ldr	r3, [pc, #588]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	2380      	movs	r3, #128	@ 0x80
 8006976:	029b      	lsls	r3, r3, #10
 8006978:	4013      	ands	r3, r2
 800697a:	d0f0      	beq.n	800695e <HAL_RCC_OscConfig+0xce>
 800697c:	e015      	b.n	80069aa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697e:	f7fd febb 	bl	80046f8 <HAL_GetTick>
 8006982:	0003      	movs	r3, r0
 8006984:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006988:	f7fd feb6 	bl	80046f8 <HAL_GetTick>
 800698c:	0002      	movs	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b64      	cmp	r3, #100	@ 0x64
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e2d4      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800699a:	4b89      	ldr	r3, [pc, #548]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	2380      	movs	r3, #128	@ 0x80
 80069a0:	029b      	lsls	r3, r3, #10
 80069a2:	4013      	ands	r3, r2
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0xf8>
 80069a6:	e000      	b.n	80069aa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2202      	movs	r2, #2
 80069b0:	4013      	ands	r3, r2
 80069b2:	d100      	bne.n	80069b6 <HAL_RCC_OscConfig+0x126>
 80069b4:	e099      	b.n	8006aea <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069b6:	4b82      	ldr	r3, [pc, #520]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2238      	movs	r2, #56	@ 0x38
 80069bc:	4013      	ands	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069c0:	4b7f      	ldr	r3, [pc, #508]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2203      	movs	r2, #3
 80069c6:	4013      	ands	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d102      	bne.n	80069d6 <HAL_RCC_OscConfig+0x146>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d002      	beq.n	80069dc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d135      	bne.n	8006a48 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069dc:	4b78      	ldr	r3, [pc, #480]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	2380      	movs	r3, #128	@ 0x80
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4013      	ands	r3, r2
 80069e6:	d005      	beq.n	80069f4 <HAL_RCC_OscConfig+0x164>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e2a7      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f4:	4b72      	ldr	r3, [pc, #456]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4a74      	ldr	r2, [pc, #464]	@ (8006bcc <HAL_RCC_OscConfig+0x33c>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	0019      	movs	r1, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	021a      	lsls	r2, r3, #8
 8006a04:	4b6e      	ldr	r3, [pc, #440]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d112      	bne.n	8006a36 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006a10:	4b6b      	ldr	r3, [pc, #428]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a6e      	ldr	r2, [pc, #440]	@ (8006bd0 <HAL_RCC_OscConfig+0x340>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	0019      	movs	r1, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	4b68      	ldr	r3, [pc, #416]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a20:	430a      	orrs	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006a24:	4b66      	ldr	r3, [pc, #408]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	0adb      	lsrs	r3, r3, #11
 8006a2a:	2207      	movs	r2, #7
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	4a69      	ldr	r2, [pc, #420]	@ (8006bd4 <HAL_RCC_OscConfig+0x344>)
 8006a30:	40da      	lsrs	r2, r3
 8006a32:	4b69      	ldr	r3, [pc, #420]	@ (8006bd8 <HAL_RCC_OscConfig+0x348>)
 8006a34:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a36:	4b69      	ldr	r3, [pc, #420]	@ (8006bdc <HAL_RCC_OscConfig+0x34c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f7fd fe00 	bl	8004640 <HAL_InitTick>
 8006a40:	1e03      	subs	r3, r0, #0
 8006a42:	d051      	beq.n	8006ae8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e27d      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d030      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006a50:	4b5b      	ldr	r3, [pc, #364]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a5e      	ldr	r2, [pc, #376]	@ (8006bd0 <HAL_RCC_OscConfig+0x340>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	0019      	movs	r1, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	4b58      	ldr	r3, [pc, #352]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a60:	430a      	orrs	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006a64:	4b56      	ldr	r3, [pc, #344]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b55      	ldr	r3, [pc, #340]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a6a:	2180      	movs	r1, #128	@ 0x80
 8006a6c:	0049      	lsls	r1, r1, #1
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a72:	f7fd fe41 	bl	80046f8 <HAL_GetTick>
 8006a76:	0003      	movs	r3, r0
 8006a78:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a7c:	f7fd fe3c 	bl	80046f8 <HAL_GetTick>
 8006a80:	0002      	movs	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e25a      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	2380      	movs	r3, #128	@ 0x80
 8006a94:	00db      	lsls	r3, r3, #3
 8006a96:	4013      	ands	r3, r2
 8006a98:	d0f0      	beq.n	8006a7c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9a:	4b49      	ldr	r3, [pc, #292]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	4a4b      	ldr	r2, [pc, #300]	@ (8006bcc <HAL_RCC_OscConfig+0x33c>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	0019      	movs	r1, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	021a      	lsls	r2, r3, #8
 8006aaa:	4b45      	ldr	r3, [pc, #276]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	e01b      	b.n	8006aea <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006ab2:	4b43      	ldr	r3, [pc, #268]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4b42      	ldr	r3, [pc, #264]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006ab8:	4949      	ldr	r1, [pc, #292]	@ (8006be0 <HAL_RCC_OscConfig+0x350>)
 8006aba:	400a      	ands	r2, r1
 8006abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abe:	f7fd fe1b 	bl	80046f8 <HAL_GetTick>
 8006ac2:	0003      	movs	r3, r0
 8006ac4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac8:	f7fd fe16 	bl	80046f8 <HAL_GetTick>
 8006acc:	0002      	movs	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e234      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ada:	4b39      	ldr	r3, [pc, #228]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	2380      	movs	r3, #128	@ 0x80
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	d1f0      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x238>
 8006ae6:	e000      	b.n	8006aea <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2208      	movs	r2, #8
 8006af0:	4013      	ands	r3, r2
 8006af2:	d047      	beq.n	8006b84 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006af4:	4b32      	ldr	r3, [pc, #200]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	2238      	movs	r2, #56	@ 0x38
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b18      	cmp	r3, #24
 8006afe:	d10a      	bne.n	8006b16 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006b00:	4b2f      	ldr	r3, [pc, #188]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b04:	2202      	movs	r2, #2
 8006b06:	4013      	ands	r3, r2
 8006b08:	d03c      	beq.n	8006b84 <HAL_RCC_OscConfig+0x2f4>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d138      	bne.n	8006b84 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e216      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d019      	beq.n	8006b52 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006b1e:	4b28      	ldr	r3, [pc, #160]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006b20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006b22:	4b27      	ldr	r3, [pc, #156]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006b24:	2101      	movs	r1, #1
 8006b26:	430a      	orrs	r2, r1
 8006b28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2a:	f7fd fde5 	bl	80046f8 <HAL_GetTick>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b34:	f7fd fde0 	bl	80046f8 <HAL_GetTick>
 8006b38:	0002      	movs	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e1fe      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b46:	4b1e      	ldr	r3, [pc, #120]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	d0f1      	beq.n	8006b34 <HAL_RCC_OscConfig+0x2a4>
 8006b50:	e018      	b.n	8006b84 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006b52:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006b54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006b56:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006b58:	2101      	movs	r1, #1
 8006b5a:	438a      	bics	r2, r1
 8006b5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5e:	f7fd fdcb 	bl	80046f8 <HAL_GetTick>
 8006b62:	0003      	movs	r3, r0
 8006b64:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b68:	f7fd fdc6 	bl	80046f8 <HAL_GetTick>
 8006b6c:	0002      	movs	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e1e4      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b7a:	4b11      	ldr	r3, [pc, #68]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b7e:	2202      	movs	r2, #2
 8006b80:	4013      	ands	r3, r2
 8006b82:	d1f1      	bne.n	8006b68 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2204      	movs	r2, #4
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	d100      	bne.n	8006b90 <HAL_RCC_OscConfig+0x300>
 8006b8e:	e0c7      	b.n	8006d20 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b90:	231f      	movs	r3, #31
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006b98:	4b09      	ldr	r3, [pc, #36]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2238      	movs	r2, #56	@ 0x38
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	d11f      	bne.n	8006be4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006ba4:	4b06      	ldr	r3, [pc, #24]	@ (8006bc0 <HAL_RCC_OscConfig+0x330>)
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba8:	2202      	movs	r2, #2
 8006baa:	4013      	ands	r3, r2
 8006bac:	d100      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x320>
 8006bae:	e0b7      	b.n	8006d20 <HAL_RCC_OscConfig+0x490>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d000      	beq.n	8006bba <HAL_RCC_OscConfig+0x32a>
 8006bb8:	e0b2      	b.n	8006d20 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e1c2      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
 8006bbe:	46c0      	nop			@ (mov r8, r8)
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	fffeffff 	.word	0xfffeffff
 8006bc8:	fffbffff 	.word	0xfffbffff
 8006bcc:	ffff80ff 	.word	0xffff80ff
 8006bd0:	ffffc7ff 	.word	0xffffc7ff
 8006bd4:	00f42400 	.word	0x00f42400
 8006bd8:	20000010 	.word	0x20000010
 8006bdc:	20000014 	.word	0x20000014
 8006be0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006be4:	4bb5      	ldr	r3, [pc, #724]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006be6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006be8:	2380      	movs	r3, #128	@ 0x80
 8006bea:	055b      	lsls	r3, r3, #21
 8006bec:	4013      	ands	r3, r2
 8006bee:	d101      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x364>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCC_OscConfig+0x366>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d011      	beq.n	8006c1e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	4bb0      	ldr	r3, [pc, #704]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bfe:	4baf      	ldr	r3, [pc, #700]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c00:	2180      	movs	r1, #128	@ 0x80
 8006c02:	0549      	lsls	r1, r1, #21
 8006c04:	430a      	orrs	r2, r1
 8006c06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006c08:	4bac      	ldr	r3, [pc, #688]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c0c:	2380      	movs	r3, #128	@ 0x80
 8006c0e:	055b      	lsls	r3, r3, #21
 8006c10:	4013      	ands	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006c16:	231f      	movs	r3, #31
 8006c18:	18fb      	adds	r3, r7, r3
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c1e:	4ba8      	ldr	r3, [pc, #672]	@ (8006ec0 <HAL_RCC_OscConfig+0x630>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	2380      	movs	r3, #128	@ 0x80
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4013      	ands	r3, r2
 8006c28:	d11a      	bne.n	8006c60 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c2a:	4ba5      	ldr	r3, [pc, #660]	@ (8006ec0 <HAL_RCC_OscConfig+0x630>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	4ba4      	ldr	r3, [pc, #656]	@ (8006ec0 <HAL_RCC_OscConfig+0x630>)
 8006c30:	2180      	movs	r1, #128	@ 0x80
 8006c32:	0049      	lsls	r1, r1, #1
 8006c34:	430a      	orrs	r2, r1
 8006c36:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006c38:	f7fd fd5e 	bl	80046f8 <HAL_GetTick>
 8006c3c:	0003      	movs	r3, r0
 8006c3e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c42:	f7fd fd59 	bl	80046f8 <HAL_GetTick>
 8006c46:	0002      	movs	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e177      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c54:	4b9a      	ldr	r3, [pc, #616]	@ (8006ec0 <HAL_RCC_OscConfig+0x630>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	2380      	movs	r3, #128	@ 0x80
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d0f0      	beq.n	8006c42 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d106      	bne.n	8006c76 <HAL_RCC_OscConfig+0x3e6>
 8006c68:	4b94      	ldr	r3, [pc, #592]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c6c:	4b93      	ldr	r3, [pc, #588]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c6e:	2101      	movs	r1, #1
 8006c70:	430a      	orrs	r2, r1
 8006c72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c74:	e01c      	b.n	8006cb0 <HAL_RCC_OscConfig+0x420>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	d10c      	bne.n	8006c98 <HAL_RCC_OscConfig+0x408>
 8006c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c82:	4b8e      	ldr	r3, [pc, #568]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c84:	2104      	movs	r1, #4
 8006c86:	430a      	orrs	r2, r1
 8006c88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c8a:	4b8c      	ldr	r3, [pc, #560]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c90:	2101      	movs	r1, #1
 8006c92:	430a      	orrs	r2, r1
 8006c94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c96:	e00b      	b.n	8006cb0 <HAL_RCC_OscConfig+0x420>
 8006c98:	4b88      	ldr	r3, [pc, #544]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c9c:	4b87      	ldr	r3, [pc, #540]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ca4:	4b85      	ldr	r3, [pc, #532]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006ca6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ca8:	4b84      	ldr	r3, [pc, #528]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006caa:	2104      	movs	r1, #4
 8006cac:	438a      	bics	r2, r1
 8006cae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d014      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fd fd1e 	bl	80046f8 <HAL_GetTick>
 8006cbc:	0003      	movs	r3, r0
 8006cbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cc0:	e009      	b.n	8006cd6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cc2:	f7fd fd19 	bl	80046f8 <HAL_GetTick>
 8006cc6:	0002      	movs	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	4a7d      	ldr	r2, [pc, #500]	@ (8006ec4 <HAL_RCC_OscConfig+0x634>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e136      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cd6:	4b79      	ldr	r3, [pc, #484]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cda:	2202      	movs	r2, #2
 8006cdc:	4013      	ands	r3, r2
 8006cde:	d0f0      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x432>
 8006ce0:	e013      	b.n	8006d0a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce2:	f7fd fd09 	bl	80046f8 <HAL_GetTick>
 8006ce6:	0003      	movs	r3, r0
 8006ce8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cea:	e009      	b.n	8006d00 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cec:	f7fd fd04 	bl	80046f8 <HAL_GetTick>
 8006cf0:	0002      	movs	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	4a73      	ldr	r2, [pc, #460]	@ (8006ec4 <HAL_RCC_OscConfig+0x634>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e121      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d00:	4b6e      	ldr	r3, [pc, #440]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d04:	2202      	movs	r2, #2
 8006d06:	4013      	ands	r3, r2
 8006d08:	d1f0      	bne.n	8006cec <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006d0a:	231f      	movs	r3, #31
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d105      	bne.n	8006d20 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006d14:	4b69      	ldr	r3, [pc, #420]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d18:	4b68      	ldr	r3, [pc, #416]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006d1a:	496b      	ldr	r1, [pc, #428]	@ (8006ec8 <HAL_RCC_OscConfig+0x638>)
 8006d1c:	400a      	ands	r2, r1
 8006d1e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2220      	movs	r2, #32
 8006d26:	4013      	ands	r3, r2
 8006d28:	d039      	beq.n	8006d9e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d01b      	beq.n	8006d6a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d32:	4b62      	ldr	r3, [pc, #392]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b61      	ldr	r3, [pc, #388]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006d38:	2180      	movs	r1, #128	@ 0x80
 8006d3a:	03c9      	lsls	r1, r1, #15
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d40:	f7fd fcda 	bl	80046f8 <HAL_GetTick>
 8006d44:	0003      	movs	r3, r0
 8006d46:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006d48:	e008      	b.n	8006d5c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d4a:	f7fd fcd5 	bl	80046f8 <HAL_GetTick>
 8006d4e:	0002      	movs	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e0f3      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006d5c:	4b57      	ldr	r3, [pc, #348]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	2380      	movs	r3, #128	@ 0x80
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	4013      	ands	r3, r2
 8006d66:	d0f0      	beq.n	8006d4a <HAL_RCC_OscConfig+0x4ba>
 8006d68:	e019      	b.n	8006d9e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d6a:	4b54      	ldr	r3, [pc, #336]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4b53      	ldr	r3, [pc, #332]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006d70:	4956      	ldr	r1, [pc, #344]	@ (8006ecc <HAL_RCC_OscConfig+0x63c>)
 8006d72:	400a      	ands	r2, r1
 8006d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d76:	f7fd fcbf 	bl	80046f8 <HAL_GetTick>
 8006d7a:	0003      	movs	r3, r0
 8006d7c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d80:	f7fd fcba 	bl	80046f8 <HAL_GetTick>
 8006d84:	0002      	movs	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e0d8      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006d92:	4b4a      	ldr	r3, [pc, #296]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	2380      	movs	r3, #128	@ 0x80
 8006d98:	041b      	lsls	r3, r3, #16
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d1f0      	bne.n	8006d80 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d100      	bne.n	8006da8 <HAL_RCC_OscConfig+0x518>
 8006da6:	e0cc      	b.n	8006f42 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006da8:	4b44      	ldr	r3, [pc, #272]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2238      	movs	r2, #56	@ 0x38
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d100      	bne.n	8006db6 <HAL_RCC_OscConfig+0x526>
 8006db4:	e07b      	b.n	8006eae <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d156      	bne.n	8006e6c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006dc4:	4942      	ldr	r1, [pc, #264]	@ (8006ed0 <HAL_RCC_OscConfig+0x640>)
 8006dc6:	400a      	ands	r2, r1
 8006dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dca:	f7fd fc95 	bl	80046f8 <HAL_GetTick>
 8006dce:	0003      	movs	r3, r0
 8006dd0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd4:	f7fd fc90 	bl	80046f8 <HAL_GetTick>
 8006dd8:	0002      	movs	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e0ae      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de6:	4b35      	ldr	r3, [pc, #212]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	2380      	movs	r3, #128	@ 0x80
 8006dec:	049b      	lsls	r3, r3, #18
 8006dee:	4013      	ands	r3, r2
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006df2:	4b32      	ldr	r3, [pc, #200]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	4a37      	ldr	r2, [pc, #220]	@ (8006ed4 <HAL_RCC_OscConfig+0x644>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	0019      	movs	r1, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	4b26      	ldr	r3, [pc, #152]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006e22:	430a      	orrs	r2, r1
 8006e24:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e26:	4b25      	ldr	r3, [pc, #148]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4b24      	ldr	r3, [pc, #144]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006e2c:	2180      	movs	r1, #128	@ 0x80
 8006e2e:	0449      	lsls	r1, r1, #17
 8006e30:	430a      	orrs	r2, r1
 8006e32:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006e34:	4b21      	ldr	r3, [pc, #132]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	4b20      	ldr	r3, [pc, #128]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006e3a:	2180      	movs	r1, #128	@ 0x80
 8006e3c:	0549      	lsls	r1, r1, #21
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e42:	f7fd fc59 	bl	80046f8 <HAL_GetTick>
 8006e46:	0003      	movs	r3, r0
 8006e48:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e4c:	f7fd fc54 	bl	80046f8 <HAL_GetTick>
 8006e50:	0002      	movs	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e072      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e5e:	4b17      	ldr	r3, [pc, #92]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	2380      	movs	r3, #128	@ 0x80
 8006e64:	049b      	lsls	r3, r3, #18
 8006e66:	4013      	ands	r3, r2
 8006e68:	d0f0      	beq.n	8006e4c <HAL_RCC_OscConfig+0x5bc>
 8006e6a:	e06a      	b.n	8006f42 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e6c:	4b13      	ldr	r3, [pc, #76]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	4b12      	ldr	r3, [pc, #72]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006e72:	4917      	ldr	r1, [pc, #92]	@ (8006ed0 <HAL_RCC_OscConfig+0x640>)
 8006e74:	400a      	ands	r2, r1
 8006e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e78:	f7fd fc3e 	bl	80046f8 <HAL_GetTick>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e82:	f7fd fc39 	bl	80046f8 <HAL_GetTick>
 8006e86:	0002      	movs	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e057      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e94:	4b09      	ldr	r3, [pc, #36]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	2380      	movs	r3, #128	@ 0x80
 8006e9a:	049b      	lsls	r3, r3, #18
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	d1f0      	bne.n	8006e82 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006ea0:	4b06      	ldr	r3, [pc, #24]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	4b05      	ldr	r3, [pc, #20]	@ (8006ebc <HAL_RCC_OscConfig+0x62c>)
 8006ea6:	490c      	ldr	r1, [pc, #48]	@ (8006ed8 <HAL_RCC_OscConfig+0x648>)
 8006ea8:	400a      	ands	r2, r1
 8006eaa:	60da      	str	r2, [r3, #12]
 8006eac:	e049      	b.n	8006f42 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d112      	bne.n	8006edc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e044      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
 8006eba:	46c0      	nop			@ (mov r8, r8)
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	40007000 	.word	0x40007000
 8006ec4:	00001388 	.word	0x00001388
 8006ec8:	efffffff 	.word	0xefffffff
 8006ecc:	ffbfffff 	.word	0xffbfffff
 8006ed0:	feffffff 	.word	0xfeffffff
 8006ed4:	11c1808c 	.word	0x11c1808c
 8006ed8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006edc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f4c <HAL_RCC_OscConfig+0x6bc>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	401a      	ands	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d126      	bne.n	8006f3e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2270      	movs	r2, #112	@ 0x70
 8006ef4:	401a      	ands	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d11f      	bne.n	8006f3e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	23fe      	movs	r3, #254	@ 0xfe
 8006f02:	01db      	lsls	r3, r3, #7
 8006f04:	401a      	ands	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d116      	bne.n	8006f3e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	23f8      	movs	r3, #248	@ 0xf8
 8006f14:	039b      	lsls	r3, r3, #14
 8006f16:	401a      	ands	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d10e      	bne.n	8006f3e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	23e0      	movs	r3, #224	@ 0xe0
 8006f24:	051b      	lsls	r3, r3, #20
 8006f26:	401a      	ands	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d106      	bne.n	8006f3e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	0f5b      	lsrs	r3, r3, #29
 8006f34:	075a      	lsls	r2, r3, #29
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d001      	beq.n	8006f42 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	0018      	movs	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b008      	add	sp, #32
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40021000 	.word	0x40021000

08006f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e0e9      	b.n	8007138 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f64:	4b76      	ldr	r3, [pc, #472]	@ (8007140 <HAL_RCC_ClockConfig+0x1f0>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2207      	movs	r2, #7
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d91e      	bls.n	8006fb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f72:	4b73      	ldr	r3, [pc, #460]	@ (8007140 <HAL_RCC_ClockConfig+0x1f0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2207      	movs	r2, #7
 8006f78:	4393      	bics	r3, r2
 8006f7a:	0019      	movs	r1, r3
 8006f7c:	4b70      	ldr	r3, [pc, #448]	@ (8007140 <HAL_RCC_ClockConfig+0x1f0>)
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f84:	f7fd fbb8 	bl	80046f8 <HAL_GetTick>
 8006f88:	0003      	movs	r3, r0
 8006f8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006f8c:	e009      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f8e:	f7fd fbb3 	bl	80046f8 <HAL_GetTick>
 8006f92:	0002      	movs	r2, r0
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	4a6a      	ldr	r2, [pc, #424]	@ (8007144 <HAL_RCC_ClockConfig+0x1f4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e0ca      	b.n	8007138 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006fa2:	4b67      	ldr	r3, [pc, #412]	@ (8007140 <HAL_RCC_ClockConfig+0x1f0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2207      	movs	r2, #7
 8006fa8:	4013      	ands	r3, r2
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d1ee      	bne.n	8006f8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	d015      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d006      	beq.n	8006fd2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006fc4:	4b60      	ldr	r3, [pc, #384]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8006fca:	21e0      	movs	r1, #224	@ 0xe0
 8006fcc:	01c9      	lsls	r1, r1, #7
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	4a5d      	ldr	r2, [pc, #372]	@ (800714c <HAL_RCC_ClockConfig+0x1fc>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	0019      	movs	r1, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	4b59      	ldr	r3, [pc, #356]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2201      	movs	r2, #1
 8006fec:	4013      	ands	r3, r2
 8006fee:	d057      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d107      	bne.n	8007008 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ff8:	4b53      	ldr	r3, [pc, #332]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	2380      	movs	r3, #128	@ 0x80
 8006ffe:	029b      	lsls	r3, r3, #10
 8007000:	4013      	ands	r3, r2
 8007002:	d12b      	bne.n	800705c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e097      	b.n	8007138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d107      	bne.n	8007020 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007010:	4b4d      	ldr	r3, [pc, #308]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	2380      	movs	r3, #128	@ 0x80
 8007016:	049b      	lsls	r3, r3, #18
 8007018:	4013      	ands	r3, r2
 800701a:	d11f      	bne.n	800705c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e08b      	b.n	8007138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d107      	bne.n	8007038 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007028:	4b47      	ldr	r3, [pc, #284]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	2380      	movs	r3, #128	@ 0x80
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	4013      	ands	r3, r2
 8007032:	d113      	bne.n	800705c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e07f      	b.n	8007138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b03      	cmp	r3, #3
 800703e:	d106      	bne.n	800704e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007040:	4b41      	ldr	r3, [pc, #260]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8007042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007044:	2202      	movs	r2, #2
 8007046:	4013      	ands	r3, r2
 8007048:	d108      	bne.n	800705c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e074      	b.n	8007138 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800704e:	4b3e      	ldr	r3, [pc, #248]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8007050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007052:	2202      	movs	r2, #2
 8007054:	4013      	ands	r3, r2
 8007056:	d101      	bne.n	800705c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e06d      	b.n	8007138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800705c:	4b3a      	ldr	r3, [pc, #232]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2207      	movs	r2, #7
 8007062:	4393      	bics	r3, r2
 8007064:	0019      	movs	r1, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	4b37      	ldr	r3, [pc, #220]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 800706c:	430a      	orrs	r2, r1
 800706e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007070:	f7fd fb42 	bl	80046f8 <HAL_GetTick>
 8007074:	0003      	movs	r3, r0
 8007076:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007078:	e009      	b.n	800708e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800707a:	f7fd fb3d 	bl	80046f8 <HAL_GetTick>
 800707e:	0002      	movs	r2, r0
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	4a2f      	ldr	r2, [pc, #188]	@ (8007144 <HAL_RCC_ClockConfig+0x1f4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e054      	b.n	8007138 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708e:	4b2e      	ldr	r3, [pc, #184]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	2238      	movs	r2, #56	@ 0x38
 8007094:	401a      	ands	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	429a      	cmp	r2, r3
 800709e:	d1ec      	bne.n	800707a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070a0:	4b27      	ldr	r3, [pc, #156]	@ (8007140 <HAL_RCC_ClockConfig+0x1f0>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2207      	movs	r2, #7
 80070a6:	4013      	ands	r3, r2
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d21e      	bcs.n	80070ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ae:	4b24      	ldr	r3, [pc, #144]	@ (8007140 <HAL_RCC_ClockConfig+0x1f0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2207      	movs	r2, #7
 80070b4:	4393      	bics	r3, r2
 80070b6:	0019      	movs	r1, r3
 80070b8:	4b21      	ldr	r3, [pc, #132]	@ (8007140 <HAL_RCC_ClockConfig+0x1f0>)
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070c0:	f7fd fb1a 	bl	80046f8 <HAL_GetTick>
 80070c4:	0003      	movs	r3, r0
 80070c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80070c8:	e009      	b.n	80070de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070ca:	f7fd fb15 	bl	80046f8 <HAL_GetTick>
 80070ce:	0002      	movs	r2, r0
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007144 <HAL_RCC_ClockConfig+0x1f4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e02c      	b.n	8007138 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80070de:	4b18      	ldr	r3, [pc, #96]	@ (8007140 <HAL_RCC_ClockConfig+0x1f0>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2207      	movs	r2, #7
 80070e4:	4013      	ands	r3, r2
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d1ee      	bne.n	80070ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2204      	movs	r2, #4
 80070f2:	4013      	ands	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80070f6:	4b14      	ldr	r3, [pc, #80]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	4a15      	ldr	r2, [pc, #84]	@ (8007150 <HAL_RCC_ClockConfig+0x200>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	0019      	movs	r1, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	4b10      	ldr	r3, [pc, #64]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8007106:	430a      	orrs	r2, r1
 8007108:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800710a:	f000 f829 	bl	8007160 <HAL_RCC_GetSysClockFreq>
 800710e:	0001      	movs	r1, r0
 8007110:	4b0d      	ldr	r3, [pc, #52]	@ (8007148 <HAL_RCC_ClockConfig+0x1f8>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	0a1b      	lsrs	r3, r3, #8
 8007116:	220f      	movs	r2, #15
 8007118:	401a      	ands	r2, r3
 800711a:	4b0e      	ldr	r3, [pc, #56]	@ (8007154 <HAL_RCC_ClockConfig+0x204>)
 800711c:	0092      	lsls	r2, r2, #2
 800711e:	58d3      	ldr	r3, [r2, r3]
 8007120:	221f      	movs	r2, #31
 8007122:	4013      	ands	r3, r2
 8007124:	000a      	movs	r2, r1
 8007126:	40da      	lsrs	r2, r3
 8007128:	4b0b      	ldr	r3, [pc, #44]	@ (8007158 <HAL_RCC_ClockConfig+0x208>)
 800712a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800712c:	4b0b      	ldr	r3, [pc, #44]	@ (800715c <HAL_RCC_ClockConfig+0x20c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	0018      	movs	r0, r3
 8007132:	f7fd fa85 	bl	8004640 <HAL_InitTick>
 8007136:	0003      	movs	r3, r0
}
 8007138:	0018      	movs	r0, r3
 800713a:	46bd      	mov	sp, r7
 800713c:	b004      	add	sp, #16
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40022000 	.word	0x40022000
 8007144:	00001388 	.word	0x00001388
 8007148:	40021000 	.word	0x40021000
 800714c:	fffff0ff 	.word	0xfffff0ff
 8007150:	ffff8fff 	.word	0xffff8fff
 8007154:	08009908 	.word	0x08009908
 8007158:	20000010 	.word	0x20000010
 800715c:	20000014 	.word	0x20000014

08007160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007166:	4b3c      	ldr	r3, [pc, #240]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2238      	movs	r2, #56	@ 0x38
 800716c:	4013      	ands	r3, r2
 800716e:	d10f      	bne.n	8007190 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007170:	4b39      	ldr	r3, [pc, #228]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	0adb      	lsrs	r3, r3, #11
 8007176:	2207      	movs	r2, #7
 8007178:	4013      	ands	r3, r2
 800717a:	2201      	movs	r2, #1
 800717c:	409a      	lsls	r2, r3
 800717e:	0013      	movs	r3, r2
 8007180:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	4835      	ldr	r0, [pc, #212]	@ (800725c <HAL_RCC_GetSysClockFreq+0xfc>)
 8007186:	f7f8 ffbd 	bl	8000104 <__udivsi3>
 800718a:	0003      	movs	r3, r0
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	e05d      	b.n	800724c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007190:	4b31      	ldr	r3, [pc, #196]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	2238      	movs	r2, #56	@ 0x38
 8007196:	4013      	ands	r3, r2
 8007198:	2b08      	cmp	r3, #8
 800719a:	d102      	bne.n	80071a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800719c:	4b30      	ldr	r3, [pc, #192]	@ (8007260 <HAL_RCC_GetSysClockFreq+0x100>)
 800719e:	613b      	str	r3, [r7, #16]
 80071a0:	e054      	b.n	800724c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2238      	movs	r2, #56	@ 0x38
 80071a8:	4013      	ands	r3, r2
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d138      	bne.n	8007220 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80071ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2203      	movs	r2, #3
 80071b4:	4013      	ands	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071b8:	4b27      	ldr	r3, [pc, #156]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	2207      	movs	r2, #7
 80071c0:	4013      	ands	r3, r2
 80071c2:	3301      	adds	r3, #1
 80071c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d10d      	bne.n	80071e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	4824      	ldr	r0, [pc, #144]	@ (8007260 <HAL_RCC_GetSysClockFreq+0x100>)
 80071d0:	f7f8 ff98 	bl	8000104 <__udivsi3>
 80071d4:	0003      	movs	r3, r0
 80071d6:	0019      	movs	r1, r3
 80071d8:	4b1f      	ldr	r3, [pc, #124]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	0a1b      	lsrs	r3, r3, #8
 80071de:	227f      	movs	r2, #127	@ 0x7f
 80071e0:	4013      	ands	r3, r2
 80071e2:	434b      	muls	r3, r1
 80071e4:	617b      	str	r3, [r7, #20]
        break;
 80071e6:	e00d      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	481c      	ldr	r0, [pc, #112]	@ (800725c <HAL_RCC_GetSysClockFreq+0xfc>)
 80071ec:	f7f8 ff8a 	bl	8000104 <__udivsi3>
 80071f0:	0003      	movs	r3, r0
 80071f2:	0019      	movs	r1, r3
 80071f4:	4b18      	ldr	r3, [pc, #96]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	0a1b      	lsrs	r3, r3, #8
 80071fa:	227f      	movs	r2, #127	@ 0x7f
 80071fc:	4013      	ands	r3, r2
 80071fe:	434b      	muls	r3, r1
 8007200:	617b      	str	r3, [r7, #20]
        break;
 8007202:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007204:	4b14      	ldr	r3, [pc, #80]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	0f5b      	lsrs	r3, r3, #29
 800720a:	2207      	movs	r2, #7
 800720c:	4013      	ands	r3, r2
 800720e:	3301      	adds	r3, #1
 8007210:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	6978      	ldr	r0, [r7, #20]
 8007216:	f7f8 ff75 	bl	8000104 <__udivsi3>
 800721a:	0003      	movs	r3, r0
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	e015      	b.n	800724c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007220:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2238      	movs	r2, #56	@ 0x38
 8007226:	4013      	ands	r3, r2
 8007228:	2b20      	cmp	r3, #32
 800722a:	d103      	bne.n	8007234 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800722c:	2380      	movs	r3, #128	@ 0x80
 800722e:	021b      	lsls	r3, r3, #8
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	e00b      	b.n	800724c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007234:	4b08      	ldr	r3, [pc, #32]	@ (8007258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2238      	movs	r2, #56	@ 0x38
 800723a:	4013      	ands	r3, r2
 800723c:	2b18      	cmp	r3, #24
 800723e:	d103      	bne.n	8007248 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007240:	23fa      	movs	r3, #250	@ 0xfa
 8007242:	01db      	lsls	r3, r3, #7
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	e001      	b.n	800724c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800724c:	693b      	ldr	r3, [r7, #16]
}
 800724e:	0018      	movs	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	b006      	add	sp, #24
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	40021000 	.word	0x40021000
 800725c:	00f42400 	.word	0x00f42400
 8007260:	007a1200 	.word	0x007a1200

08007264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800726c:	2313      	movs	r3, #19
 800726e:	18fb      	adds	r3, r7, r3
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007274:	2312      	movs	r3, #18
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	2380      	movs	r3, #128	@ 0x80
 8007282:	029b      	lsls	r3, r3, #10
 8007284:	4013      	ands	r3, r2
 8007286:	d100      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007288:	e0ad      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800728a:	2011      	movs	r0, #17
 800728c:	183b      	adds	r3, r7, r0
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007292:	4b47      	ldr	r3, [pc, #284]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007296:	2380      	movs	r3, #128	@ 0x80
 8007298:	055b      	lsls	r3, r3, #21
 800729a:	4013      	ands	r3, r2
 800729c:	d110      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800729e:	4b44      	ldr	r3, [pc, #272]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80072a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072a2:	4b43      	ldr	r3, [pc, #268]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80072a4:	2180      	movs	r1, #128	@ 0x80
 80072a6:	0549      	lsls	r1, r1, #21
 80072a8:	430a      	orrs	r2, r1
 80072aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80072ac:	4b40      	ldr	r3, [pc, #256]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80072ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072b0:	2380      	movs	r3, #128	@ 0x80
 80072b2:	055b      	lsls	r3, r3, #21
 80072b4:	4013      	ands	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]
 80072b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ba:	183b      	adds	r3, r7, r0
 80072bc:	2201      	movs	r2, #1
 80072be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072c0:	4b3c      	ldr	r3, [pc, #240]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b3b      	ldr	r3, [pc, #236]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80072c6:	2180      	movs	r1, #128	@ 0x80
 80072c8:	0049      	lsls	r1, r1, #1
 80072ca:	430a      	orrs	r2, r1
 80072cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072ce:	f7fd fa13 	bl	80046f8 <HAL_GetTick>
 80072d2:	0003      	movs	r3, r0
 80072d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072d6:	e00b      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d8:	f7fd fa0e 	bl	80046f8 <HAL_GetTick>
 80072dc:	0002      	movs	r2, r0
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d904      	bls.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80072e6:	2313      	movs	r3, #19
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	2203      	movs	r2, #3
 80072ec:	701a      	strb	r2, [r3, #0]
        break;
 80072ee:	e005      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072f0:	4b30      	ldr	r3, [pc, #192]	@ (80073b4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	2380      	movs	r3, #128	@ 0x80
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	4013      	ands	r3, r2
 80072fa:	d0ed      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80072fc:	2313      	movs	r3, #19
 80072fe:	18fb      	adds	r3, r7, r3
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d15e      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007306:	4b2a      	ldr	r3, [pc, #168]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007308:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800730a:	23c0      	movs	r3, #192	@ 0xc0
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4013      	ands	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d019      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	429a      	cmp	r2, r3
 8007320:	d014      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007322:	4b23      	ldr	r3, [pc, #140]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007326:	4a24      	ldr	r2, [pc, #144]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007328:	4013      	ands	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800732c:	4b20      	ldr	r3, [pc, #128]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800732e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007330:	4b1f      	ldr	r3, [pc, #124]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007332:	2180      	movs	r1, #128	@ 0x80
 8007334:	0249      	lsls	r1, r1, #9
 8007336:	430a      	orrs	r2, r1
 8007338:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800733a:	4b1d      	ldr	r3, [pc, #116]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800733c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800733e:	4b1c      	ldr	r3, [pc, #112]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007340:	491e      	ldr	r1, [pc, #120]	@ (80073bc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8007342:	400a      	ands	r2, r1
 8007344:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007346:	4b1a      	ldr	r3, [pc, #104]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2201      	movs	r2, #1
 8007350:	4013      	ands	r3, r2
 8007352:	d016      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007354:	f7fd f9d0 	bl	80046f8 <HAL_GetTick>
 8007358:	0003      	movs	r3, r0
 800735a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800735c:	e00c      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735e:	f7fd f9cb 	bl	80046f8 <HAL_GetTick>
 8007362:	0002      	movs	r2, r0
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	4a15      	ldr	r2, [pc, #84]	@ (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d904      	bls.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800736e:	2313      	movs	r3, #19
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	2203      	movs	r2, #3
 8007374:	701a      	strb	r2, [r3, #0]
            break;
 8007376:	e004      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007378:	4b0d      	ldr	r3, [pc, #52]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800737a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800737c:	2202      	movs	r2, #2
 800737e:	4013      	ands	r3, r2
 8007380:	d0ed      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007382:	2313      	movs	r3, #19
 8007384:	18fb      	adds	r3, r7, r3
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800738c:	4b08      	ldr	r3, [pc, #32]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800738e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007390:	4a09      	ldr	r2, [pc, #36]	@ (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007392:	4013      	ands	r3, r2
 8007394:	0019      	movs	r1, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800739a:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800739c:	430a      	orrs	r2, r1
 800739e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80073a0:	e016      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073a2:	2312      	movs	r3, #18
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	2213      	movs	r2, #19
 80073a8:	18ba      	adds	r2, r7, r2
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	e00f      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80073b0:	40021000 	.word	0x40021000
 80073b4:	40007000 	.word	0x40007000
 80073b8:	fffffcff 	.word	0xfffffcff
 80073bc:	fffeffff 	.word	0xfffeffff
 80073c0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c4:	2312      	movs	r3, #18
 80073c6:	18fb      	adds	r3, r7, r3
 80073c8:	2213      	movs	r2, #19
 80073ca:	18ba      	adds	r2, r7, r2
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073d0:	2311      	movs	r3, #17
 80073d2:	18fb      	adds	r3, r7, r3
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d105      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073da:	4bb6      	ldr	r3, [pc, #728]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80073dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073de:	4bb5      	ldr	r3, [pc, #724]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80073e0:	49b5      	ldr	r1, [pc, #724]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80073e2:	400a      	ands	r2, r1
 80073e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2201      	movs	r2, #1
 80073ec:	4013      	ands	r3, r2
 80073ee:	d009      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073f0:	4bb0      	ldr	r3, [pc, #704]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80073f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f4:	2203      	movs	r2, #3
 80073f6:	4393      	bics	r3, r2
 80073f8:	0019      	movs	r1, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	4bad      	ldr	r3, [pc, #692]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007400:	430a      	orrs	r2, r1
 8007402:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2202      	movs	r2, #2
 800740a:	4013      	ands	r3, r2
 800740c:	d009      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800740e:	4ba9      	ldr	r3, [pc, #676]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007412:	220c      	movs	r2, #12
 8007414:	4393      	bics	r3, r2
 8007416:	0019      	movs	r1, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	4ba5      	ldr	r3, [pc, #660]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800741e:	430a      	orrs	r2, r1
 8007420:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2204      	movs	r2, #4
 8007428:	4013      	ands	r3, r2
 800742a:	d009      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800742c:	4ba1      	ldr	r3, [pc, #644]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800742e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007430:	2230      	movs	r2, #48	@ 0x30
 8007432:	4393      	bics	r3, r2
 8007434:	0019      	movs	r1, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	4b9e      	ldr	r3, [pc, #632]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800743c:	430a      	orrs	r2, r1
 800743e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2210      	movs	r2, #16
 8007446:	4013      	ands	r3, r2
 8007448:	d009      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800744a:	4b9a      	ldr	r3, [pc, #616]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800744c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744e:	4a9b      	ldr	r2, [pc, #620]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007450:	4013      	ands	r3, r2
 8007452:	0019      	movs	r1, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	4b96      	ldr	r3, [pc, #600]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800745a:	430a      	orrs	r2, r1
 800745c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	2380      	movs	r3, #128	@ 0x80
 8007464:	015b      	lsls	r3, r3, #5
 8007466:	4013      	ands	r3, r2
 8007468:	d009      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800746a:	4b92      	ldr	r3, [pc, #584]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800746c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746e:	4a94      	ldr	r2, [pc, #592]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007470:	4013      	ands	r3, r2
 8007472:	0019      	movs	r1, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	695a      	ldr	r2, [r3, #20]
 8007478:	4b8e      	ldr	r3, [pc, #568]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800747a:	430a      	orrs	r2, r1
 800747c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	2380      	movs	r3, #128	@ 0x80
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4013      	ands	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800748a:	4b8a      	ldr	r3, [pc, #552]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800748c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800748e:	4a8d      	ldr	r2, [pc, #564]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8007490:	4013      	ands	r3, r2
 8007492:	0019      	movs	r1, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007498:	4b86      	ldr	r3, [pc, #536]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800749a:	430a      	orrs	r2, r1
 800749c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	2380      	movs	r3, #128	@ 0x80
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	4013      	ands	r3, r2
 80074a8:	d009      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074aa:	4b82      	ldr	r3, [pc, #520]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ae:	4a86      	ldr	r2, [pc, #536]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	0019      	movs	r1, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b8:	4b7e      	ldr	r3, [pc, #504]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074ba:	430a      	orrs	r2, r1
 80074bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2220      	movs	r2, #32
 80074c4:	4013      	ands	r3, r2
 80074c6:	d009      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074c8:	4b7a      	ldr	r3, [pc, #488]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074cc:	4a7f      	ldr	r2, [pc, #508]	@ (80076cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	0019      	movs	r1, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	4b77      	ldr	r3, [pc, #476]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074d8:	430a      	orrs	r2, r1
 80074da:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2240      	movs	r2, #64	@ 0x40
 80074e2:	4013      	ands	r3, r2
 80074e4:	d009      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074e6:	4b73      	ldr	r3, [pc, #460]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ea:	4a79      	ldr	r2, [pc, #484]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	0019      	movs	r1, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	69da      	ldr	r2, [r3, #28]
 80074f4:	4b6f      	ldr	r3, [pc, #444]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80074f6:	430a      	orrs	r2, r1
 80074f8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	2380      	movs	r3, #128	@ 0x80
 8007500:	01db      	lsls	r3, r3, #7
 8007502:	4013      	ands	r3, r2
 8007504:	d015      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007506:	4b6b      	ldr	r3, [pc, #428]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	0899      	lsrs	r1, r3, #2
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007512:	4b68      	ldr	r3, [pc, #416]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007514:	430a      	orrs	r2, r1
 8007516:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751c:	2380      	movs	r3, #128	@ 0x80
 800751e:	05db      	lsls	r3, r3, #23
 8007520:	429a      	cmp	r2, r3
 8007522:	d106      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007524:	4b63      	ldr	r3, [pc, #396]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	4b62      	ldr	r3, [pc, #392]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800752a:	2180      	movs	r1, #128	@ 0x80
 800752c:	0249      	lsls	r1, r1, #9
 800752e:	430a      	orrs	r2, r1
 8007530:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	2380      	movs	r3, #128	@ 0x80
 8007538:	031b      	lsls	r3, r3, #12
 800753a:	4013      	ands	r3, r2
 800753c:	d009      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800753e:	4b5d      	ldr	r3, [pc, #372]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007542:	2240      	movs	r2, #64	@ 0x40
 8007544:	4393      	bics	r3, r2
 8007546:	0019      	movs	r1, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800754c:	4b59      	ldr	r3, [pc, #356]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800754e:	430a      	orrs	r2, r1
 8007550:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	2380      	movs	r3, #128	@ 0x80
 8007558:	039b      	lsls	r3, r3, #14
 800755a:	4013      	ands	r3, r2
 800755c:	d016      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800755e:	4b55      	ldr	r3, [pc, #340]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007562:	4a5c      	ldr	r2, [pc, #368]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007564:	4013      	ands	r3, r2
 8007566:	0019      	movs	r1, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800756c:	4b51      	ldr	r3, [pc, #324]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800756e:	430a      	orrs	r2, r1
 8007570:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007576:	2380      	movs	r3, #128	@ 0x80
 8007578:	03db      	lsls	r3, r3, #15
 800757a:	429a      	cmp	r2, r3
 800757c:	d106      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800757e:	4b4d      	ldr	r3, [pc, #308]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007580:	68da      	ldr	r2, [r3, #12]
 8007582:	4b4c      	ldr	r3, [pc, #304]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007584:	2180      	movs	r1, #128	@ 0x80
 8007586:	0449      	lsls	r1, r1, #17
 8007588:	430a      	orrs	r2, r1
 800758a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	2380      	movs	r3, #128	@ 0x80
 8007592:	03db      	lsls	r3, r3, #15
 8007594:	4013      	ands	r3, r2
 8007596:	d016      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007598:	4b46      	ldr	r3, [pc, #280]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800759a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800759c:	4a4e      	ldr	r2, [pc, #312]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800759e:	4013      	ands	r3, r2
 80075a0:	0019      	movs	r1, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075a6:	4b43      	ldr	r3, [pc, #268]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075a8:	430a      	orrs	r2, r1
 80075aa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075b0:	2380      	movs	r3, #128	@ 0x80
 80075b2:	045b      	lsls	r3, r3, #17
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d106      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80075b8:	4b3e      	ldr	r3, [pc, #248]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	4b3d      	ldr	r3, [pc, #244]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075be:	2180      	movs	r1, #128	@ 0x80
 80075c0:	0449      	lsls	r1, r1, #17
 80075c2:	430a      	orrs	r2, r1
 80075c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	2380      	movs	r3, #128	@ 0x80
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	4013      	ands	r3, r2
 80075d0:	d014      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80075d2:	4b38      	ldr	r3, [pc, #224]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d6:	2203      	movs	r2, #3
 80075d8:	4393      	bics	r3, r2
 80075da:	0019      	movs	r1, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1a      	ldr	r2, [r3, #32]
 80075e0:	4b34      	ldr	r3, [pc, #208]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075e2:	430a      	orrs	r2, r1
 80075e4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d106      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80075ee:	4b31      	ldr	r3, [pc, #196]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	4b30      	ldr	r3, [pc, #192]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80075f4:	2180      	movs	r1, #128	@ 0x80
 80075f6:	0249      	lsls	r1, r1, #9
 80075f8:	430a      	orrs	r2, r1
 80075fa:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	2380      	movs	r3, #128	@ 0x80
 8007602:	019b      	lsls	r3, r3, #6
 8007604:	4013      	ands	r3, r2
 8007606:	d014      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007608:	4b2a      	ldr	r3, [pc, #168]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800760a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760c:	220c      	movs	r2, #12
 800760e:	4393      	bics	r3, r2
 8007610:	0019      	movs	r1, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007616:	4b27      	ldr	r3, [pc, #156]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007618:	430a      	orrs	r2, r1
 800761a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007620:	2b04      	cmp	r3, #4
 8007622:	d106      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007624:	4b23      	ldr	r3, [pc, #140]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	4b22      	ldr	r3, [pc, #136]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800762a:	2180      	movs	r1, #128	@ 0x80
 800762c:	0249      	lsls	r1, r1, #9
 800762e:	430a      	orrs	r2, r1
 8007630:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	2380      	movs	r3, #128	@ 0x80
 8007638:	045b      	lsls	r3, r3, #17
 800763a:	4013      	ands	r3, r2
 800763c:	d016      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800763e:	4b1d      	ldr	r3, [pc, #116]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007642:	4a22      	ldr	r2, [pc, #136]	@ (80076cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007644:	4013      	ands	r3, r2
 8007646:	0019      	movs	r1, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800764c:	4b19      	ldr	r3, [pc, #100]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800764e:	430a      	orrs	r2, r1
 8007650:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007656:	2380      	movs	r3, #128	@ 0x80
 8007658:	019b      	lsls	r3, r3, #6
 800765a:	429a      	cmp	r2, r3
 800765c:	d106      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800765e:	4b15      	ldr	r3, [pc, #84]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	4b14      	ldr	r3, [pc, #80]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007664:	2180      	movs	r1, #128	@ 0x80
 8007666:	0449      	lsls	r1, r1, #17
 8007668:	430a      	orrs	r2, r1
 800766a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	2380      	movs	r3, #128	@ 0x80
 8007672:	049b      	lsls	r3, r3, #18
 8007674:	4013      	ands	r3, r2
 8007676:	d016      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007678:	4b0e      	ldr	r3, [pc, #56]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800767a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800767c:	4a10      	ldr	r2, [pc, #64]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800767e:	4013      	ands	r3, r2
 8007680:	0019      	movs	r1, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007686:	4b0b      	ldr	r3, [pc, #44]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007688:	430a      	orrs	r2, r1
 800768a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007690:	2380      	movs	r3, #128	@ 0x80
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	429a      	cmp	r2, r3
 8007696:	d106      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007698:	4b06      	ldr	r3, [pc, #24]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	4b05      	ldr	r3, [pc, #20]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800769e:	2180      	movs	r1, #128	@ 0x80
 80076a0:	0449      	lsls	r1, r1, #17
 80076a2:	430a      	orrs	r2, r1
 80076a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80076a6:	2312      	movs	r3, #18
 80076a8:	18fb      	adds	r3, r7, r3
 80076aa:	781b      	ldrb	r3, [r3, #0]
}
 80076ac:	0018      	movs	r0, r3
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b006      	add	sp, #24
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40021000 	.word	0x40021000
 80076b8:	efffffff 	.word	0xefffffff
 80076bc:	fffff3ff 	.word	0xfffff3ff
 80076c0:	fffffcff 	.word	0xfffffcff
 80076c4:	fff3ffff 	.word	0xfff3ffff
 80076c8:	ffcfffff 	.word	0xffcfffff
 80076cc:	ffffcfff 	.word	0xffffcfff
 80076d0:	ffff3fff 	.word	0xffff3fff
 80076d4:	ffbfffff 	.word	0xffbfffff
 80076d8:	feffffff 	.word	0xfeffffff

080076dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e04a      	b.n	8007784 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	223d      	movs	r2, #61	@ 0x3d
 80076f2:	5c9b      	ldrb	r3, [r3, r2]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d107      	bne.n	800770a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	223c      	movs	r2, #60	@ 0x3c
 80076fe:	2100      	movs	r1, #0
 8007700:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	0018      	movs	r0, r3
 8007706:	f7fc fdfd 	bl	8004304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	223d      	movs	r2, #61	@ 0x3d
 800770e:	2102      	movs	r1, #2
 8007710:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3304      	adds	r3, #4
 800771a:	0019      	movs	r1, r3
 800771c:	0010      	movs	r0, r2
 800771e:	f000 fd0f 	bl	8008140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2248      	movs	r2, #72	@ 0x48
 8007726:	2101      	movs	r1, #1
 8007728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	223e      	movs	r2, #62	@ 0x3e
 800772e:	2101      	movs	r1, #1
 8007730:	5499      	strb	r1, [r3, r2]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	223f      	movs	r2, #63	@ 0x3f
 8007736:	2101      	movs	r1, #1
 8007738:	5499      	strb	r1, [r3, r2]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2240      	movs	r2, #64	@ 0x40
 800773e:	2101      	movs	r1, #1
 8007740:	5499      	strb	r1, [r3, r2]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2241      	movs	r2, #65	@ 0x41
 8007746:	2101      	movs	r1, #1
 8007748:	5499      	strb	r1, [r3, r2]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2242      	movs	r2, #66	@ 0x42
 800774e:	2101      	movs	r1, #1
 8007750:	5499      	strb	r1, [r3, r2]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2243      	movs	r2, #67	@ 0x43
 8007756:	2101      	movs	r1, #1
 8007758:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2244      	movs	r2, #68	@ 0x44
 800775e:	2101      	movs	r1, #1
 8007760:	5499      	strb	r1, [r3, r2]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2245      	movs	r2, #69	@ 0x45
 8007766:	2101      	movs	r1, #1
 8007768:	5499      	strb	r1, [r3, r2]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2246      	movs	r2, #70	@ 0x46
 800776e:	2101      	movs	r1, #1
 8007770:	5499      	strb	r1, [r3, r2]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2247      	movs	r2, #71	@ 0x47
 8007776:	2101      	movs	r1, #1
 8007778:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	223d      	movs	r2, #61	@ 0x3d
 800777e:	2101      	movs	r1, #1
 8007780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	0018      	movs	r0, r3
 8007786:	46bd      	mov	sp, r7
 8007788:	b002      	add	sp, #8
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	223d      	movs	r2, #61	@ 0x3d
 8007798:	5c9b      	ldrb	r3, [r3, r2]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b01      	cmp	r3, #1
 800779e:	d001      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e047      	b.n	8007834 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	223d      	movs	r2, #61	@ 0x3d
 80077a8:	2102      	movs	r1, #2
 80077aa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2101      	movs	r1, #1
 80077b8:	430a      	orrs	r2, r1
 80077ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1e      	ldr	r2, [pc, #120]	@ (800783c <HAL_TIM_Base_Start_IT+0xb0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d014      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x64>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	2380      	movs	r3, #128	@ 0x80
 80077cc:	05db      	lsls	r3, r3, #23
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d00e      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x64>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a1a      	ldr	r2, [pc, #104]	@ (8007840 <HAL_TIM_Base_Start_IT+0xb4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d009      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x64>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a18      	ldr	r2, [pc, #96]	@ (8007844 <HAL_TIM_Base_Start_IT+0xb8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d004      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0x64>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a17      	ldr	r2, [pc, #92]	@ (8007848 <HAL_TIM_Base_Start_IT+0xbc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d116      	bne.n	800781e <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	4a15      	ldr	r2, [pc, #84]	@ (800784c <HAL_TIM_Base_Start_IT+0xc0>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b06      	cmp	r3, #6
 8007800:	d016      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0xa4>
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	2380      	movs	r3, #128	@ 0x80
 8007806:	025b      	lsls	r3, r3, #9
 8007808:	429a      	cmp	r2, r3
 800780a:	d011      	beq.n	8007830 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2101      	movs	r1, #1
 8007818:	430a      	orrs	r2, r1
 800781a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800781c:	e008      	b.n	8007830 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2101      	movs	r1, #1
 800782a:	430a      	orrs	r2, r1
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	e000      	b.n	8007832 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007830:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	0018      	movs	r0, r3
 8007836:	46bd      	mov	sp, r7
 8007838:	b004      	add	sp, #16
 800783a:	bd80      	pop	{r7, pc}
 800783c:	40012c00 	.word	0x40012c00
 8007840:	40000400 	.word	0x40000400
 8007844:	40000800 	.word	0x40000800
 8007848:	40014000 	.word	0x40014000
 800784c:	00010007 	.word	0x00010007

08007850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e04a      	b.n	80078f8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	223d      	movs	r2, #61	@ 0x3d
 8007866:	5c9b      	ldrb	r3, [r3, r2]
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d107      	bne.n	800787e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	223c      	movs	r2, #60	@ 0x3c
 8007872:	2100      	movs	r1, #0
 8007874:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	0018      	movs	r0, r3
 800787a:	f000 f841 	bl	8007900 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	223d      	movs	r2, #61	@ 0x3d
 8007882:	2102      	movs	r1, #2
 8007884:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3304      	adds	r3, #4
 800788e:	0019      	movs	r1, r3
 8007890:	0010      	movs	r0, r2
 8007892:	f000 fc55 	bl	8008140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2248      	movs	r2, #72	@ 0x48
 800789a:	2101      	movs	r1, #1
 800789c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	223e      	movs	r2, #62	@ 0x3e
 80078a2:	2101      	movs	r1, #1
 80078a4:	5499      	strb	r1, [r3, r2]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	223f      	movs	r2, #63	@ 0x3f
 80078aa:	2101      	movs	r1, #1
 80078ac:	5499      	strb	r1, [r3, r2]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2240      	movs	r2, #64	@ 0x40
 80078b2:	2101      	movs	r1, #1
 80078b4:	5499      	strb	r1, [r3, r2]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2241      	movs	r2, #65	@ 0x41
 80078ba:	2101      	movs	r1, #1
 80078bc:	5499      	strb	r1, [r3, r2]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2242      	movs	r2, #66	@ 0x42
 80078c2:	2101      	movs	r1, #1
 80078c4:	5499      	strb	r1, [r3, r2]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2243      	movs	r2, #67	@ 0x43
 80078ca:	2101      	movs	r1, #1
 80078cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2244      	movs	r2, #68	@ 0x44
 80078d2:	2101      	movs	r1, #1
 80078d4:	5499      	strb	r1, [r3, r2]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2245      	movs	r2, #69	@ 0x45
 80078da:	2101      	movs	r1, #1
 80078dc:	5499      	strb	r1, [r3, r2]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2246      	movs	r2, #70	@ 0x46
 80078e2:	2101      	movs	r1, #1
 80078e4:	5499      	strb	r1, [r3, r2]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2247      	movs	r2, #71	@ 0x47
 80078ea:	2101      	movs	r1, #1
 80078ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	223d      	movs	r2, #61	@ 0x3d
 80078f2:	2101      	movs	r1, #1
 80078f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b002      	add	sp, #8
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007908:	46c0      	nop			@ (mov r8, r8)
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d108      	bne.n	8007932 <HAL_TIM_PWM_Start+0x22>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	223e      	movs	r2, #62	@ 0x3e
 8007924:	5c9b      	ldrb	r3, [r3, r2]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	1e5a      	subs	r2, r3, #1
 800792c:	4193      	sbcs	r3, r2
 800792e:	b2db      	uxtb	r3, r3
 8007930:	e037      	b.n	80079a2 <HAL_TIM_PWM_Start+0x92>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d108      	bne.n	800794a <HAL_TIM_PWM_Start+0x3a>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	223f      	movs	r2, #63	@ 0x3f
 800793c:	5c9b      	ldrb	r3, [r3, r2]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	1e5a      	subs	r2, r3, #1
 8007944:	4193      	sbcs	r3, r2
 8007946:	b2db      	uxtb	r3, r3
 8007948:	e02b      	b.n	80079a2 <HAL_TIM_PWM_Start+0x92>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b08      	cmp	r3, #8
 800794e:	d108      	bne.n	8007962 <HAL_TIM_PWM_Start+0x52>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2240      	movs	r2, #64	@ 0x40
 8007954:	5c9b      	ldrb	r3, [r3, r2]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	1e5a      	subs	r2, r3, #1
 800795c:	4193      	sbcs	r3, r2
 800795e:	b2db      	uxtb	r3, r3
 8007960:	e01f      	b.n	80079a2 <HAL_TIM_PWM_Start+0x92>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b0c      	cmp	r3, #12
 8007966:	d108      	bne.n	800797a <HAL_TIM_PWM_Start+0x6a>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2241      	movs	r2, #65	@ 0x41
 800796c:	5c9b      	ldrb	r3, [r3, r2]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	3b01      	subs	r3, #1
 8007972:	1e5a      	subs	r2, r3, #1
 8007974:	4193      	sbcs	r3, r2
 8007976:	b2db      	uxtb	r3, r3
 8007978:	e013      	b.n	80079a2 <HAL_TIM_PWM_Start+0x92>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b10      	cmp	r3, #16
 800797e:	d108      	bne.n	8007992 <HAL_TIM_PWM_Start+0x82>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2242      	movs	r2, #66	@ 0x42
 8007984:	5c9b      	ldrb	r3, [r3, r2]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	1e5a      	subs	r2, r3, #1
 800798c:	4193      	sbcs	r3, r2
 800798e:	b2db      	uxtb	r3, r3
 8007990:	e007      	b.n	80079a2 <HAL_TIM_PWM_Start+0x92>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2243      	movs	r2, #67	@ 0x43
 8007996:	5c9b      	ldrb	r3, [r3, r2]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	1e5a      	subs	r2, r3, #1
 800799e:	4193      	sbcs	r3, r2
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e090      	b.n	8007acc <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d104      	bne.n	80079ba <HAL_TIM_PWM_Start+0xaa>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	223e      	movs	r2, #62	@ 0x3e
 80079b4:	2102      	movs	r1, #2
 80079b6:	5499      	strb	r1, [r3, r2]
 80079b8:	e023      	b.n	8007a02 <HAL_TIM_PWM_Start+0xf2>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d104      	bne.n	80079ca <HAL_TIM_PWM_Start+0xba>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	223f      	movs	r2, #63	@ 0x3f
 80079c4:	2102      	movs	r1, #2
 80079c6:	5499      	strb	r1, [r3, r2]
 80079c8:	e01b      	b.n	8007a02 <HAL_TIM_PWM_Start+0xf2>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d104      	bne.n	80079da <HAL_TIM_PWM_Start+0xca>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2240      	movs	r2, #64	@ 0x40
 80079d4:	2102      	movs	r1, #2
 80079d6:	5499      	strb	r1, [r3, r2]
 80079d8:	e013      	b.n	8007a02 <HAL_TIM_PWM_Start+0xf2>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b0c      	cmp	r3, #12
 80079de:	d104      	bne.n	80079ea <HAL_TIM_PWM_Start+0xda>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2241      	movs	r2, #65	@ 0x41
 80079e4:	2102      	movs	r1, #2
 80079e6:	5499      	strb	r1, [r3, r2]
 80079e8:	e00b      	b.n	8007a02 <HAL_TIM_PWM_Start+0xf2>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b10      	cmp	r3, #16
 80079ee:	d104      	bne.n	80079fa <HAL_TIM_PWM_Start+0xea>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2242      	movs	r2, #66	@ 0x42
 80079f4:	2102      	movs	r1, #2
 80079f6:	5499      	strb	r1, [r3, r2]
 80079f8:	e003      	b.n	8007a02 <HAL_TIM_PWM_Start+0xf2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2243      	movs	r2, #67	@ 0x43
 80079fe:	2102      	movs	r1, #2
 8007a00:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f000 ff82 	bl	8008914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a2f      	ldr	r2, [pc, #188]	@ (8007ad4 <HAL_TIM_PWM_Start+0x1c4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00e      	beq.n	8007a38 <HAL_TIM_PWM_Start+0x128>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8007ad8 <HAL_TIM_PWM_Start+0x1c8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d009      	beq.n	8007a38 <HAL_TIM_PWM_Start+0x128>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a2c      	ldr	r2, [pc, #176]	@ (8007adc <HAL_TIM_PWM_Start+0x1cc>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d004      	beq.n	8007a38 <HAL_TIM_PWM_Start+0x128>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a2b      	ldr	r2, [pc, #172]	@ (8007ae0 <HAL_TIM_PWM_Start+0x1d0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d101      	bne.n	8007a3c <HAL_TIM_PWM_Start+0x12c>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <HAL_TIM_PWM_Start+0x12e>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d008      	beq.n	8007a54 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2180      	movs	r1, #128	@ 0x80
 8007a4e:	0209      	lsls	r1, r1, #8
 8007a50:	430a      	orrs	r2, r1
 8007a52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad4 <HAL_TIM_PWM_Start+0x1c4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d014      	beq.n	8007a88 <HAL_TIM_PWM_Start+0x178>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	2380      	movs	r3, #128	@ 0x80
 8007a64:	05db      	lsls	r3, r3, #23
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d00e      	beq.n	8007a88 <HAL_TIM_PWM_Start+0x178>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae4 <HAL_TIM_PWM_Start+0x1d4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d009      	beq.n	8007a88 <HAL_TIM_PWM_Start+0x178>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1b      	ldr	r2, [pc, #108]	@ (8007ae8 <HAL_TIM_PWM_Start+0x1d8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_TIM_PWM_Start+0x178>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a15      	ldr	r2, [pc, #84]	@ (8007ad8 <HAL_TIM_PWM_Start+0x1c8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d116      	bne.n	8007ab6 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	4a17      	ldr	r2, [pc, #92]	@ (8007aec <HAL_TIM_PWM_Start+0x1dc>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b06      	cmp	r3, #6
 8007a98:	d016      	beq.n	8007ac8 <HAL_TIM_PWM_Start+0x1b8>
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	2380      	movs	r3, #128	@ 0x80
 8007a9e:	025b      	lsls	r3, r3, #9
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d011      	beq.n	8007ac8 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2101      	movs	r1, #1
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab4:	e008      	b.n	8007ac8 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e000      	b.n	8007aca <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	0018      	movs	r0, r3
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	b004      	add	sp, #16
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40012c00 	.word	0x40012c00
 8007ad8:	40014000 	.word	0x40014000
 8007adc:	40014400 	.word	0x40014400
 8007ae0:	40014800 	.word	0x40014800
 8007ae4:	40000400 	.word	0x40000400
 8007ae8:	40000800 	.word	0x40000800
 8007aec:	00010007 	.word	0x00010007

08007af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2202      	movs	r2, #2
 8007b00:	4013      	ands	r3, r2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d124      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d11d      	bne.n	8007b50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2203      	movs	r2, #3
 8007b1a:	4252      	negs	r2, r2
 8007b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	0018      	movs	r0, r3
 8007b34:	f000 faec 	bl	8008110 <HAL_TIM_IC_CaptureCallback>
 8007b38:	e007      	b.n	8007b4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f000 fadf 	bl	8008100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	0018      	movs	r0, r3
 8007b46:	f000 faeb 	bl	8008120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2204      	movs	r2, #4
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d125      	bne.n	8007baa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2204      	movs	r2, #4
 8007b66:	4013      	ands	r3, r2
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d11e      	bne.n	8007baa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2205      	movs	r2, #5
 8007b72:	4252      	negs	r2, r2
 8007b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699a      	ldr	r2, [r3, #24]
 8007b82:	23c0      	movs	r3, #192	@ 0xc0
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4013      	ands	r3, r2
 8007b88:	d004      	beq.n	8007b94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f000 fabf 	bl	8008110 <HAL_TIM_IC_CaptureCallback>
 8007b92:	e007      	b.n	8007ba4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	0018      	movs	r0, r3
 8007b98:	f000 fab2 	bl	8008100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f000 fabe 	bl	8008120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d124      	bne.n	8007c02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	2b08      	cmp	r3, #8
 8007bc4:	d11d      	bne.n	8007c02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2209      	movs	r2, #9
 8007bcc:	4252      	negs	r2, r2
 8007bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2204      	movs	r2, #4
 8007bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	4013      	ands	r3, r2
 8007be0:	d004      	beq.n	8007bec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	0018      	movs	r0, r3
 8007be6:	f000 fa93 	bl	8008110 <HAL_TIM_IC_CaptureCallback>
 8007bea:	e007      	b.n	8007bfc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f000 fa86 	bl	8008100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f000 fa92 	bl	8008120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2210      	movs	r2, #16
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d125      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2210      	movs	r2, #16
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b10      	cmp	r3, #16
 8007c1c:	d11e      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2211      	movs	r2, #17
 8007c24:	4252      	negs	r2, r2
 8007c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	23c0      	movs	r3, #192	@ 0xc0
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4013      	ands	r3, r2
 8007c3a:	d004      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f000 fa66 	bl	8008110 <HAL_TIM_IC_CaptureCallback>
 8007c44:	e007      	b.n	8007c56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f000 fa59 	bl	8008100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	0018      	movs	r0, r3
 8007c52:	f000 fa65 	bl	8008120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2201      	movs	r2, #1
 8007c64:	4013      	ands	r3, r2
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d10f      	bne.n	8007c8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	4013      	ands	r3, r2
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d108      	bne.n	8007c8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	4252      	negs	r2, r2
 8007c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	0018      	movs	r0, r3
 8007c86:	f7fb fafd 	bl	8003284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2280      	movs	r2, #128	@ 0x80
 8007c92:	4013      	ands	r3, r2
 8007c94:	2b80      	cmp	r3, #128	@ 0x80
 8007c96:	d10f      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2280      	movs	r2, #128	@ 0x80
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b80      	cmp	r3, #128	@ 0x80
 8007ca4:	d108      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2281      	movs	r2, #129	@ 0x81
 8007cac:	4252      	negs	r2, r2
 8007cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	f000 ff76 	bl	8008ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	2380      	movs	r3, #128	@ 0x80
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	401a      	ands	r2, r3
 8007cc4:	2380      	movs	r3, #128	@ 0x80
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d10e      	bne.n	8007cea <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	2280      	movs	r2, #128	@ 0x80
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b80      	cmp	r3, #128	@ 0x80
 8007cd8:	d107      	bne.n	8007cea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a1c      	ldr	r2, [pc, #112]	@ (8007d50 <HAL_TIM_IRQHandler+0x260>)
 8007ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f000 ff65 	bl	8008bb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2240      	movs	r2, #64	@ 0x40
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	2b40      	cmp	r3, #64	@ 0x40
 8007cf6:	d10f      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	2240      	movs	r2, #64	@ 0x40
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b40      	cmp	r3, #64	@ 0x40
 8007d04:	d108      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2241      	movs	r2, #65	@ 0x41
 8007d0c:	4252      	negs	r2, r2
 8007d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	0018      	movs	r0, r3
 8007d14:	f000 fa0c 	bl	8008130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d10f      	bne.n	8007d46 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	4013      	ands	r3, r2
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d108      	bne.n	8007d46 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2221      	movs	r2, #33	@ 0x21
 8007d3a:	4252      	negs	r2, r2
 8007d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	0018      	movs	r0, r3
 8007d42:	f000 ff27 	bl	8008b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d46:	46c0      	nop			@ (mov r8, r8)
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	b002      	add	sp, #8
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	46c0      	nop			@ (mov r8, r8)
 8007d50:	fffffeff 	.word	0xfffffeff

08007d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d60:	2317      	movs	r3, #23
 8007d62:	18fb      	adds	r3, r7, r3
 8007d64:	2200      	movs	r2, #0
 8007d66:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	223c      	movs	r2, #60	@ 0x3c
 8007d6c:	5c9b      	ldrb	r3, [r3, r2]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d101      	bne.n	8007d76 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e0e5      	b.n	8007f42 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	223c      	movs	r2, #60	@ 0x3c
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b14      	cmp	r3, #20
 8007d82:	d900      	bls.n	8007d86 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007d84:	e0d1      	b.n	8007f2a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	009a      	lsls	r2, r3, #2
 8007d8a:	4b70      	ldr	r3, [pc, #448]	@ (8007f4c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007d8c:	18d3      	adds	r3, r2, r3
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	0011      	movs	r1, r2
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f000 fa5a 	bl	8008254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2108      	movs	r1, #8
 8007dac:	430a      	orrs	r2, r1
 8007dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2104      	movs	r1, #4
 8007dbc:	438a      	bics	r2, r1
 8007dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6999      	ldr	r1, [r3, #24]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691a      	ldr	r2, [r3, #16]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	619a      	str	r2, [r3, #24]
      break;
 8007dd2:	e0af      	b.n	8007f34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	0011      	movs	r1, r2
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f000 fac3 	bl	8008368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2180      	movs	r1, #128	@ 0x80
 8007dee:	0109      	lsls	r1, r1, #4
 8007df0:	430a      	orrs	r2, r1
 8007df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699a      	ldr	r2, [r3, #24]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4954      	ldr	r1, [pc, #336]	@ (8007f50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007e00:	400a      	ands	r2, r1
 8007e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6999      	ldr	r1, [r3, #24]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	021a      	lsls	r2, r3, #8
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	619a      	str	r2, [r3, #24]
      break;
 8007e18:	e08c      	b.n	8007f34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	0011      	movs	r1, r2
 8007e22:	0018      	movs	r0, r3
 8007e24:	f000 fb24 	bl	8008470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69da      	ldr	r2, [r3, #28]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2108      	movs	r1, #8
 8007e34:	430a      	orrs	r2, r1
 8007e36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69da      	ldr	r2, [r3, #28]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2104      	movs	r1, #4
 8007e44:	438a      	bics	r2, r1
 8007e46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	69d9      	ldr	r1, [r3, #28]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	691a      	ldr	r2, [r3, #16]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	61da      	str	r2, [r3, #28]
      break;
 8007e5a:	e06b      	b.n	8007f34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	0011      	movs	r1, r2
 8007e64:	0018      	movs	r0, r3
 8007e66:	f000 fb8b 	bl	8008580 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2180      	movs	r1, #128	@ 0x80
 8007e76:	0109      	lsls	r1, r1, #4
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69da      	ldr	r2, [r3, #28]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4932      	ldr	r1, [pc, #200]	@ (8007f50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007e88:	400a      	ands	r2, r1
 8007e8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	69d9      	ldr	r1, [r3, #28]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	021a      	lsls	r2, r3, #8
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	61da      	str	r2, [r3, #28]
      break;
 8007ea0:	e048      	b.n	8007f34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	0011      	movs	r1, r2
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f000 fbd2 	bl	8008654 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2108      	movs	r1, #8
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2104      	movs	r1, #4
 8007ecc:	438a      	bics	r2, r1
 8007ece:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ee2:	e027      	b.n	8007f34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	0011      	movs	r1, r2
 8007eec:	0018      	movs	r0, r3
 8007eee:	f000 fc11 	bl	8008714 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2180      	movs	r1, #128	@ 0x80
 8007efe:	0109      	lsls	r1, r1, #4
 8007f00:	430a      	orrs	r2, r1
 8007f02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4910      	ldr	r1, [pc, #64]	@ (8007f50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007f10:	400a      	ands	r2, r1
 8007f12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	021a      	lsls	r2, r3, #8
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f28:	e004      	b.n	8007f34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007f2a:	2317      	movs	r3, #23
 8007f2c:	18fb      	adds	r3, r7, r3
 8007f2e:	2201      	movs	r2, #1
 8007f30:	701a      	strb	r2, [r3, #0]
      break;
 8007f32:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	223c      	movs	r2, #60	@ 0x3c
 8007f38:	2100      	movs	r1, #0
 8007f3a:	5499      	strb	r1, [r3, r2]

  return status;
 8007f3c:	2317      	movs	r3, #23
 8007f3e:	18fb      	adds	r3, r7, r3
 8007f40:	781b      	ldrb	r3, [r3, #0]
}
 8007f42:	0018      	movs	r0, r3
 8007f44:	46bd      	mov	sp, r7
 8007f46:	b006      	add	sp, #24
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	46c0      	nop			@ (mov r8, r8)
 8007f4c:	08009958 	.word	0x08009958
 8007f50:	fffffbff 	.word	0xfffffbff

08007f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f5e:	230f      	movs	r3, #15
 8007f60:	18fb      	adds	r3, r7, r3
 8007f62:	2200      	movs	r2, #0
 8007f64:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	223c      	movs	r2, #60	@ 0x3c
 8007f6a:	5c9b      	ldrb	r3, [r3, r2]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_TIM_ConfigClockSource+0x20>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e0bc      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x19a>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	223c      	movs	r2, #60	@ 0x3c
 8007f78:	2101      	movs	r1, #1
 8007f7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	223d      	movs	r2, #61	@ 0x3d
 8007f80:	2102      	movs	r1, #2
 8007f82:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	4a5a      	ldr	r2, [pc, #360]	@ (80080f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4a59      	ldr	r2, [pc, #356]	@ (80080fc <HAL_TIM_ConfigClockSource+0x1a8>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2280      	movs	r2, #128	@ 0x80
 8007faa:	0192      	lsls	r2, r2, #6
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d040      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0xde>
 8007fb0:	2280      	movs	r2, #128	@ 0x80
 8007fb2:	0192      	lsls	r2, r2, #6
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d900      	bls.n	8007fba <HAL_TIM_ConfigClockSource+0x66>
 8007fb8:	e088      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x178>
 8007fba:	2280      	movs	r2, #128	@ 0x80
 8007fbc:	0152      	lsls	r2, r2, #5
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d100      	bne.n	8007fc4 <HAL_TIM_ConfigClockSource+0x70>
 8007fc2:	e088      	b.n	80080d6 <HAL_TIM_ConfigClockSource+0x182>
 8007fc4:	2280      	movs	r2, #128	@ 0x80
 8007fc6:	0152      	lsls	r2, r2, #5
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d900      	bls.n	8007fce <HAL_TIM_ConfigClockSource+0x7a>
 8007fcc:	e07e      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x178>
 8007fce:	2b70      	cmp	r3, #112	@ 0x70
 8007fd0:	d018      	beq.n	8008004 <HAL_TIM_ConfigClockSource+0xb0>
 8007fd2:	d900      	bls.n	8007fd6 <HAL_TIM_ConfigClockSource+0x82>
 8007fd4:	e07a      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x178>
 8007fd6:	2b60      	cmp	r3, #96	@ 0x60
 8007fd8:	d04f      	beq.n	800807a <HAL_TIM_ConfigClockSource+0x126>
 8007fda:	d900      	bls.n	8007fde <HAL_TIM_ConfigClockSource+0x8a>
 8007fdc:	e076      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x178>
 8007fde:	2b50      	cmp	r3, #80	@ 0x50
 8007fe0:	d03b      	beq.n	800805a <HAL_TIM_ConfigClockSource+0x106>
 8007fe2:	d900      	bls.n	8007fe6 <HAL_TIM_ConfigClockSource+0x92>
 8007fe4:	e072      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x178>
 8007fe6:	2b40      	cmp	r3, #64	@ 0x40
 8007fe8:	d057      	beq.n	800809a <HAL_TIM_ConfigClockSource+0x146>
 8007fea:	d900      	bls.n	8007fee <HAL_TIM_ConfigClockSource+0x9a>
 8007fec:	e06e      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x178>
 8007fee:	2b30      	cmp	r3, #48	@ 0x30
 8007ff0:	d063      	beq.n	80080ba <HAL_TIM_ConfigClockSource+0x166>
 8007ff2:	d86b      	bhi.n	80080cc <HAL_TIM_ConfigClockSource+0x178>
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	d060      	beq.n	80080ba <HAL_TIM_ConfigClockSource+0x166>
 8007ff8:	d868      	bhi.n	80080cc <HAL_TIM_ConfigClockSource+0x178>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d05d      	beq.n	80080ba <HAL_TIM_ConfigClockSource+0x166>
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d05b      	beq.n	80080ba <HAL_TIM_ConfigClockSource+0x166>
 8008002:	e063      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008014:	f000 fc5e 	bl	80088d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2277      	movs	r2, #119	@ 0x77
 8008024:	4313      	orrs	r3, r2
 8008026:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	609a      	str	r2, [r3, #8]
      break;
 8008030:	e052      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008042:	f000 fc47 	bl	80088d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2180      	movs	r1, #128	@ 0x80
 8008052:	01c9      	lsls	r1, r1, #7
 8008054:	430a      	orrs	r2, r1
 8008056:	609a      	str	r2, [r3, #8]
      break;
 8008058:	e03e      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008066:	001a      	movs	r2, r3
 8008068:	f000 fbb8 	bl	80087dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2150      	movs	r1, #80	@ 0x50
 8008072:	0018      	movs	r0, r3
 8008074:	f000 fc12 	bl	800889c <TIM_ITRx_SetConfig>
      break;
 8008078:	e02e      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008086:	001a      	movs	r2, r3
 8008088:	f000 fbd6 	bl	8008838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2160      	movs	r1, #96	@ 0x60
 8008092:	0018      	movs	r0, r3
 8008094:	f000 fc02 	bl	800889c <TIM_ITRx_SetConfig>
      break;
 8008098:	e01e      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080a6:	001a      	movs	r2, r3
 80080a8:	f000 fb98 	bl	80087dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2140      	movs	r1, #64	@ 0x40
 80080b2:	0018      	movs	r0, r3
 80080b4:	f000 fbf2 	bl	800889c <TIM_ITRx_SetConfig>
      break;
 80080b8:	e00e      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	0019      	movs	r1, r3
 80080c4:	0010      	movs	r0, r2
 80080c6:	f000 fbe9 	bl	800889c <TIM_ITRx_SetConfig>
      break;
 80080ca:	e005      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80080cc:	230f      	movs	r3, #15
 80080ce:	18fb      	adds	r3, r7, r3
 80080d0:	2201      	movs	r2, #1
 80080d2:	701a      	strb	r2, [r3, #0]
      break;
 80080d4:	e000      	b.n	80080d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80080d6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	223d      	movs	r2, #61	@ 0x3d
 80080dc:	2101      	movs	r1, #1
 80080de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	223c      	movs	r2, #60	@ 0x3c
 80080e4:	2100      	movs	r1, #0
 80080e6:	5499      	strb	r1, [r3, r2]

  return status;
 80080e8:	230f      	movs	r3, #15
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	781b      	ldrb	r3, [r3, #0]
}
 80080ee:	0018      	movs	r0, r3
 80080f0:	46bd      	mov	sp, r7
 80080f2:	b004      	add	sp, #16
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	46c0      	nop			@ (mov r8, r8)
 80080f8:	ffceff88 	.word	0xffceff88
 80080fc:	ffff00ff 	.word	0xffff00ff

08008100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008108:	46c0      	nop			@ (mov r8, r8)
 800810a:	46bd      	mov	sp, r7
 800810c:	b002      	add	sp, #8
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008118:	46c0      	nop			@ (mov r8, r8)
 800811a:	46bd      	mov	sp, r7
 800811c:	b002      	add	sp, #8
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008128:	46c0      	nop			@ (mov r8, r8)
 800812a:	46bd      	mov	sp, r7
 800812c:	b002      	add	sp, #8
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008138:	46c0      	nop			@ (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b002      	add	sp, #8
 800813e:	bd80      	pop	{r7, pc}

08008140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a38      	ldr	r2, [pc, #224]	@ (8008234 <TIM_Base_SetConfig+0xf4>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d00c      	beq.n	8008172 <TIM_Base_SetConfig+0x32>
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	2380      	movs	r3, #128	@ 0x80
 800815c:	05db      	lsls	r3, r3, #23
 800815e:	429a      	cmp	r2, r3
 8008160:	d007      	beq.n	8008172 <TIM_Base_SetConfig+0x32>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a34      	ldr	r2, [pc, #208]	@ (8008238 <TIM_Base_SetConfig+0xf8>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d003      	beq.n	8008172 <TIM_Base_SetConfig+0x32>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a33      	ldr	r2, [pc, #204]	@ (800823c <TIM_Base_SetConfig+0xfc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d108      	bne.n	8008184 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2270      	movs	r2, #112	@ 0x70
 8008176:	4393      	bics	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a2b      	ldr	r2, [pc, #172]	@ (8008234 <TIM_Base_SetConfig+0xf4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d01c      	beq.n	80081c6 <TIM_Base_SetConfig+0x86>
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	2380      	movs	r3, #128	@ 0x80
 8008190:	05db      	lsls	r3, r3, #23
 8008192:	429a      	cmp	r2, r3
 8008194:	d017      	beq.n	80081c6 <TIM_Base_SetConfig+0x86>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a27      	ldr	r2, [pc, #156]	@ (8008238 <TIM_Base_SetConfig+0xf8>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d013      	beq.n	80081c6 <TIM_Base_SetConfig+0x86>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a26      	ldr	r2, [pc, #152]	@ (800823c <TIM_Base_SetConfig+0xfc>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00f      	beq.n	80081c6 <TIM_Base_SetConfig+0x86>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a25      	ldr	r2, [pc, #148]	@ (8008240 <TIM_Base_SetConfig+0x100>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d00b      	beq.n	80081c6 <TIM_Base_SetConfig+0x86>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a24      	ldr	r2, [pc, #144]	@ (8008244 <TIM_Base_SetConfig+0x104>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d007      	beq.n	80081c6 <TIM_Base_SetConfig+0x86>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a23      	ldr	r2, [pc, #140]	@ (8008248 <TIM_Base_SetConfig+0x108>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d003      	beq.n	80081c6 <TIM_Base_SetConfig+0x86>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a22      	ldr	r2, [pc, #136]	@ (800824c <TIM_Base_SetConfig+0x10c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d108      	bne.n	80081d8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4a21      	ldr	r2, [pc, #132]	@ (8008250 <TIM_Base_SetConfig+0x110>)
 80081ca:	4013      	ands	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2280      	movs	r2, #128	@ 0x80
 80081dc:	4393      	bics	r3, r2
 80081de:	001a      	movs	r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a0c      	ldr	r2, [pc, #48]	@ (8008234 <TIM_Base_SetConfig+0xf4>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00b      	beq.n	800821e <TIM_Base_SetConfig+0xde>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a0e      	ldr	r2, [pc, #56]	@ (8008244 <TIM_Base_SetConfig+0x104>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d007      	beq.n	800821e <TIM_Base_SetConfig+0xde>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a0d      	ldr	r2, [pc, #52]	@ (8008248 <TIM_Base_SetConfig+0x108>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d003      	beq.n	800821e <TIM_Base_SetConfig+0xde>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a0c      	ldr	r2, [pc, #48]	@ (800824c <TIM_Base_SetConfig+0x10c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d103      	bne.n	8008226 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	691a      	ldr	r2, [r3, #16]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	615a      	str	r2, [r3, #20]
}
 800822c:	46c0      	nop			@ (mov r8, r8)
 800822e:	46bd      	mov	sp, r7
 8008230:	b004      	add	sp, #16
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40000400 	.word	0x40000400
 800823c:	40000800 	.word	0x40000800
 8008240:	40002000 	.word	0x40002000
 8008244:	40014000 	.word	0x40014000
 8008248:	40014400 	.word	0x40014400
 800824c:	40014800 	.word	0x40014800
 8008250:	fffffcff 	.word	0xfffffcff

08008254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	2201      	movs	r2, #1
 8008264:	4393      	bics	r3, r2
 8008266:	001a      	movs	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4a32      	ldr	r2, [pc, #200]	@ (800834c <TIM_OC1_SetConfig+0xf8>)
 8008282:	4013      	ands	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2203      	movs	r2, #3
 800828a:	4393      	bics	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2202      	movs	r2, #2
 800829c:	4393      	bics	r3, r2
 800829e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a28      	ldr	r2, [pc, #160]	@ (8008350 <TIM_OC1_SetConfig+0xfc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00b      	beq.n	80082ca <TIM_OC1_SetConfig+0x76>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a27      	ldr	r2, [pc, #156]	@ (8008354 <TIM_OC1_SetConfig+0x100>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d007      	beq.n	80082ca <TIM_OC1_SetConfig+0x76>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a26      	ldr	r2, [pc, #152]	@ (8008358 <TIM_OC1_SetConfig+0x104>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_OC1_SetConfig+0x76>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a25      	ldr	r2, [pc, #148]	@ (800835c <TIM_OC1_SetConfig+0x108>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d10c      	bne.n	80082e4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2208      	movs	r2, #8
 80082ce:	4393      	bics	r3, r2
 80082d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2204      	movs	r2, #4
 80082e0:	4393      	bics	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008350 <TIM_OC1_SetConfig+0xfc>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00b      	beq.n	8008304 <TIM_OC1_SetConfig+0xb0>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a19      	ldr	r2, [pc, #100]	@ (8008354 <TIM_OC1_SetConfig+0x100>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d007      	beq.n	8008304 <TIM_OC1_SetConfig+0xb0>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a18      	ldr	r2, [pc, #96]	@ (8008358 <TIM_OC1_SetConfig+0x104>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d003      	beq.n	8008304 <TIM_OC1_SetConfig+0xb0>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a17      	ldr	r2, [pc, #92]	@ (800835c <TIM_OC1_SetConfig+0x108>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d111      	bne.n	8008328 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	4a16      	ldr	r2, [pc, #88]	@ (8008360 <TIM_OC1_SetConfig+0x10c>)
 8008308:	4013      	ands	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	4a15      	ldr	r2, [pc, #84]	@ (8008364 <TIM_OC1_SetConfig+0x110>)
 8008310:	4013      	ands	r3, r2
 8008312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	4313      	orrs	r3, r2
 8008326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	46bd      	mov	sp, r7
 8008346:	b006      	add	sp, #24
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			@ (mov r8, r8)
 800834c:	fffeff8f 	.word	0xfffeff8f
 8008350:	40012c00 	.word	0x40012c00
 8008354:	40014000 	.word	0x40014000
 8008358:	40014400 	.word	0x40014400
 800835c:	40014800 	.word	0x40014800
 8008360:	fffffeff 	.word	0xfffffeff
 8008364:	fffffdff 	.word	0xfffffdff

08008368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	2210      	movs	r2, #16
 8008378:	4393      	bics	r3, r2
 800837a:	001a      	movs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4a2e      	ldr	r2, [pc, #184]	@ (8008450 <TIM_OC2_SetConfig+0xe8>)
 8008396:	4013      	ands	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4a2d      	ldr	r2, [pc, #180]	@ (8008454 <TIM_OC2_SetConfig+0xec>)
 800839e:	4013      	ands	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2220      	movs	r2, #32
 80083b2:	4393      	bics	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	011b      	lsls	r3, r3, #4
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a24      	ldr	r2, [pc, #144]	@ (8008458 <TIM_OC2_SetConfig+0xf0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d10d      	bne.n	80083e6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2280      	movs	r2, #128	@ 0x80
 80083ce:	4393      	bics	r3, r2
 80083d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	4313      	orrs	r3, r2
 80083dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2240      	movs	r2, #64	@ 0x40
 80083e2:	4393      	bics	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008458 <TIM_OC2_SetConfig+0xf0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d00b      	beq.n	8008406 <TIM_OC2_SetConfig+0x9e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a1a      	ldr	r2, [pc, #104]	@ (800845c <TIM_OC2_SetConfig+0xf4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d007      	beq.n	8008406 <TIM_OC2_SetConfig+0x9e>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a19      	ldr	r2, [pc, #100]	@ (8008460 <TIM_OC2_SetConfig+0xf8>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d003      	beq.n	8008406 <TIM_OC2_SetConfig+0x9e>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a18      	ldr	r2, [pc, #96]	@ (8008464 <TIM_OC2_SetConfig+0xfc>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d113      	bne.n	800842e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	4a17      	ldr	r2, [pc, #92]	@ (8008468 <TIM_OC2_SetConfig+0x100>)
 800840a:	4013      	ands	r3, r2
 800840c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	4a16      	ldr	r2, [pc, #88]	@ (800846c <TIM_OC2_SetConfig+0x104>)
 8008412:	4013      	ands	r3, r2
 8008414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	4313      	orrs	r3, r2
 8008420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	4313      	orrs	r3, r2
 800842c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	621a      	str	r2, [r3, #32]
}
 8008448:	46c0      	nop			@ (mov r8, r8)
 800844a:	46bd      	mov	sp, r7
 800844c:	b006      	add	sp, #24
 800844e:	bd80      	pop	{r7, pc}
 8008450:	feff8fff 	.word	0xfeff8fff
 8008454:	fffffcff 	.word	0xfffffcff
 8008458:	40012c00 	.word	0x40012c00
 800845c:	40014000 	.word	0x40014000
 8008460:	40014400 	.word	0x40014400
 8008464:	40014800 	.word	0x40014800
 8008468:	fffffbff 	.word	0xfffffbff
 800846c:	fffff7ff 	.word	0xfffff7ff

08008470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	4a35      	ldr	r2, [pc, #212]	@ (8008554 <TIM_OC3_SetConfig+0xe4>)
 8008480:	401a      	ands	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4a2f      	ldr	r2, [pc, #188]	@ (8008558 <TIM_OC3_SetConfig+0xe8>)
 800849c:	4013      	ands	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2203      	movs	r2, #3
 80084a4:	4393      	bics	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	4a29      	ldr	r2, [pc, #164]	@ (800855c <TIM_OC3_SetConfig+0xec>)
 80084b6:	4013      	ands	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a25      	ldr	r2, [pc, #148]	@ (8008560 <TIM_OC3_SetConfig+0xf0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d10d      	bne.n	80084ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	4a24      	ldr	r2, [pc, #144]	@ (8008564 <TIM_OC3_SetConfig+0xf4>)
 80084d2:	4013      	ands	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	4a20      	ldr	r2, [pc, #128]	@ (8008568 <TIM_OC3_SetConfig+0xf8>)
 80084e6:	4013      	ands	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008560 <TIM_OC3_SetConfig+0xf0>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00b      	beq.n	800850a <TIM_OC3_SetConfig+0x9a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a1d      	ldr	r2, [pc, #116]	@ (800856c <TIM_OC3_SetConfig+0xfc>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d007      	beq.n	800850a <TIM_OC3_SetConfig+0x9a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008570 <TIM_OC3_SetConfig+0x100>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_OC3_SetConfig+0x9a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a1b      	ldr	r2, [pc, #108]	@ (8008574 <TIM_OC3_SetConfig+0x104>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d113      	bne.n	8008532 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	4a1a      	ldr	r2, [pc, #104]	@ (8008578 <TIM_OC3_SetConfig+0x108>)
 800850e:	4013      	ands	r3, r2
 8008510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	4a19      	ldr	r2, [pc, #100]	@ (800857c <TIM_OC3_SetConfig+0x10c>)
 8008516:	4013      	ands	r3, r2
 8008518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	011b      	lsls	r3, r3, #4
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4313      	orrs	r3, r2
 8008524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	011b      	lsls	r3, r3, #4
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4313      	orrs	r3, r2
 8008530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	621a      	str	r2, [r3, #32]
}
 800854c:	46c0      	nop			@ (mov r8, r8)
 800854e:	46bd      	mov	sp, r7
 8008550:	b006      	add	sp, #24
 8008552:	bd80      	pop	{r7, pc}
 8008554:	fffffeff 	.word	0xfffffeff
 8008558:	fffeff8f 	.word	0xfffeff8f
 800855c:	fffffdff 	.word	0xfffffdff
 8008560:	40012c00 	.word	0x40012c00
 8008564:	fffff7ff 	.word	0xfffff7ff
 8008568:	fffffbff 	.word	0xfffffbff
 800856c:	40014000 	.word	0x40014000
 8008570:	40014400 	.word	0x40014400
 8008574:	40014800 	.word	0x40014800
 8008578:	ffffefff 	.word	0xffffefff
 800857c:	ffffdfff 	.word	0xffffdfff

08008580 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	4a28      	ldr	r2, [pc, #160]	@ (8008630 <TIM_OC4_SetConfig+0xb0>)
 8008590:	401a      	ands	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4a22      	ldr	r2, [pc, #136]	@ (8008634 <TIM_OC4_SetConfig+0xb4>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4a21      	ldr	r2, [pc, #132]	@ (8008638 <TIM_OC4_SetConfig+0xb8>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	4a1d      	ldr	r2, [pc, #116]	@ (800863c <TIM_OC4_SetConfig+0xbc>)
 80085c8:	4013      	ands	r3, r2
 80085ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	031b      	lsls	r3, r3, #12
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a19      	ldr	r2, [pc, #100]	@ (8008640 <TIM_OC4_SetConfig+0xc0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00b      	beq.n	80085f8 <TIM_OC4_SetConfig+0x78>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a18      	ldr	r2, [pc, #96]	@ (8008644 <TIM_OC4_SetConfig+0xc4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d007      	beq.n	80085f8 <TIM_OC4_SetConfig+0x78>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a17      	ldr	r2, [pc, #92]	@ (8008648 <TIM_OC4_SetConfig+0xc8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_OC4_SetConfig+0x78>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a16      	ldr	r2, [pc, #88]	@ (800864c <TIM_OC4_SetConfig+0xcc>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d109      	bne.n	800860c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	4a15      	ldr	r2, [pc, #84]	@ (8008650 <TIM_OC4_SetConfig+0xd0>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	019b      	lsls	r3, r3, #6
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	4313      	orrs	r3, r2
 800860a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	46c0      	nop			@ (mov r8, r8)
 8008628:	46bd      	mov	sp, r7
 800862a:	b006      	add	sp, #24
 800862c:	bd80      	pop	{r7, pc}
 800862e:	46c0      	nop			@ (mov r8, r8)
 8008630:	ffffefff 	.word	0xffffefff
 8008634:	feff8fff 	.word	0xfeff8fff
 8008638:	fffffcff 	.word	0xfffffcff
 800863c:	ffffdfff 	.word	0xffffdfff
 8008640:	40012c00 	.word	0x40012c00
 8008644:	40014000 	.word	0x40014000
 8008648:	40014400 	.word	0x40014400
 800864c:	40014800 	.word	0x40014800
 8008650:	ffffbfff 	.word	0xffffbfff

08008654 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	4a25      	ldr	r2, [pc, #148]	@ (80086f8 <TIM_OC5_SetConfig+0xa4>)
 8008664:	401a      	ands	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4a1f      	ldr	r2, [pc, #124]	@ (80086fc <TIM_OC5_SetConfig+0xa8>)
 8008680:	4013      	ands	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	4a1b      	ldr	r2, [pc, #108]	@ (8008700 <TIM_OC5_SetConfig+0xac>)
 8008692:	4013      	ands	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	041b      	lsls	r3, r3, #16
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a17      	ldr	r2, [pc, #92]	@ (8008704 <TIM_OC5_SetConfig+0xb0>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00b      	beq.n	80086c2 <TIM_OC5_SetConfig+0x6e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a16      	ldr	r2, [pc, #88]	@ (8008708 <TIM_OC5_SetConfig+0xb4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d007      	beq.n	80086c2 <TIM_OC5_SetConfig+0x6e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a15      	ldr	r2, [pc, #84]	@ (800870c <TIM_OC5_SetConfig+0xb8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d003      	beq.n	80086c2 <TIM_OC5_SetConfig+0x6e>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a14      	ldr	r2, [pc, #80]	@ (8008710 <TIM_OC5_SetConfig+0xbc>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d109      	bne.n	80086d6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	4a0c      	ldr	r2, [pc, #48]	@ (80086f8 <TIM_OC5_SetConfig+0xa4>)
 80086c6:	4013      	ands	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	621a      	str	r2, [r3, #32]
}
 80086f0:	46c0      	nop			@ (mov r8, r8)
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b006      	add	sp, #24
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	fffeffff 	.word	0xfffeffff
 80086fc:	fffeff8f 	.word	0xfffeff8f
 8008700:	fffdffff 	.word	0xfffdffff
 8008704:	40012c00 	.word	0x40012c00
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400
 8008710:	40014800 	.word	0x40014800

08008714 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	4a26      	ldr	r2, [pc, #152]	@ (80087bc <TIM_OC6_SetConfig+0xa8>)
 8008724:	401a      	ands	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4a20      	ldr	r2, [pc, #128]	@ (80087c0 <TIM_OC6_SetConfig+0xac>)
 8008740:	4013      	ands	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	4313      	orrs	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	4a1c      	ldr	r2, [pc, #112]	@ (80087c4 <TIM_OC6_SetConfig+0xb0>)
 8008754:	4013      	ands	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	051b      	lsls	r3, r3, #20
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a18      	ldr	r2, [pc, #96]	@ (80087c8 <TIM_OC6_SetConfig+0xb4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00b      	beq.n	8008784 <TIM_OC6_SetConfig+0x70>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <TIM_OC6_SetConfig+0xb8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d007      	beq.n	8008784 <TIM_OC6_SetConfig+0x70>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a16      	ldr	r2, [pc, #88]	@ (80087d0 <TIM_OC6_SetConfig+0xbc>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d003      	beq.n	8008784 <TIM_OC6_SetConfig+0x70>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a15      	ldr	r2, [pc, #84]	@ (80087d4 <TIM_OC6_SetConfig+0xc0>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d109      	bne.n	8008798 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	4a14      	ldr	r2, [pc, #80]	@ (80087d8 <TIM_OC6_SetConfig+0xc4>)
 8008788:	4013      	ands	r3, r2
 800878a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	029b      	lsls	r3, r3, #10
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	4313      	orrs	r3, r2
 8008796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	621a      	str	r2, [r3, #32]
}
 80087b2:	46c0      	nop			@ (mov r8, r8)
 80087b4:	46bd      	mov	sp, r7
 80087b6:	b006      	add	sp, #24
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	46c0      	nop			@ (mov r8, r8)
 80087bc:	ffefffff 	.word	0xffefffff
 80087c0:	feff8fff 	.word	0xfeff8fff
 80087c4:	ffdfffff 	.word	0xffdfffff
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	40014000 	.word	0x40014000
 80087d0:	40014400 	.word	0x40014400
 80087d4:	40014800 	.word	0x40014800
 80087d8:	fffbffff 	.word	0xfffbffff

080087dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	2201      	movs	r2, #1
 80087f4:	4393      	bics	r3, r2
 80087f6:	001a      	movs	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	22f0      	movs	r2, #240	@ 0xf0
 8008806:	4393      	bics	r3, r2
 8008808:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	220a      	movs	r2, #10
 8008818:	4393      	bics	r3, r2
 800881a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	621a      	str	r2, [r3, #32]
}
 8008830:	46c0      	nop			@ (mov r8, r8)
 8008832:	46bd      	mov	sp, r7
 8008834:	b006      	add	sp, #24
 8008836:	bd80      	pop	{r7, pc}

08008838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	2210      	movs	r2, #16
 800884a:	4393      	bics	r3, r2
 800884c:	001a      	movs	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	4a0d      	ldr	r2, [pc, #52]	@ (8008898 <TIM_TI2_ConfigInputStage+0x60>)
 8008862:	4013      	ands	r3, r2
 8008864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	031b      	lsls	r3, r3, #12
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	4313      	orrs	r3, r2
 800886e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	22a0      	movs	r2, #160	@ 0xa0
 8008874:	4393      	bics	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	621a      	str	r2, [r3, #32]
}
 800888e:	46c0      	nop			@ (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b006      	add	sp, #24
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			@ (mov r8, r8)
 8008898:	ffff0fff 	.word	0xffff0fff

0800889c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4a08      	ldr	r2, [pc, #32]	@ (80088d0 <TIM_ITRx_SetConfig+0x34>)
 80088b0:	4013      	ands	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	2207      	movs	r2, #7
 80088bc:	4313      	orrs	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	609a      	str	r2, [r3, #8]
}
 80088c6:	46c0      	nop			@ (mov r8, r8)
 80088c8:	46bd      	mov	sp, r7
 80088ca:	b004      	add	sp, #16
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	46c0      	nop			@ (mov r8, r8)
 80088d0:	ffcfff8f 	.word	0xffcfff8f

080088d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	4a09      	ldr	r2, [pc, #36]	@ (8008910 <TIM_ETR_SetConfig+0x3c>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	021a      	lsls	r2, r3, #8
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	431a      	orrs	r2, r3
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	4313      	orrs	r3, r2
 8008900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	609a      	str	r2, [r3, #8]
}
 8008908:	46c0      	nop			@ (mov r8, r8)
 800890a:	46bd      	mov	sp, r7
 800890c:	b006      	add	sp, #24
 800890e:	bd80      	pop	{r7, pc}
 8008910:	ffff00ff 	.word	0xffff00ff

08008914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	221f      	movs	r2, #31
 8008924:	4013      	ands	r3, r2
 8008926:	2201      	movs	r2, #1
 8008928:	409a      	lsls	r2, r3
 800892a:	0013      	movs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	43d2      	mvns	r2, r2
 8008936:	401a      	ands	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	211f      	movs	r1, #31
 8008944:	400b      	ands	r3, r1
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	4099      	lsls	r1, r3
 800894a:	000b      	movs	r3, r1
 800894c:	431a      	orrs	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	621a      	str	r2, [r3, #32]
}
 8008952:	46c0      	nop			@ (mov r8, r8)
 8008954:	46bd      	mov	sp, r7
 8008956:	b006      	add	sp, #24
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	223c      	movs	r2, #60	@ 0x3c
 800896a:	5c9b      	ldrb	r3, [r3, r2]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008970:	2302      	movs	r3, #2
 8008972:	e05a      	b.n	8008a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	223c      	movs	r2, #60	@ 0x3c
 8008978:	2101      	movs	r1, #1
 800897a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	223d      	movs	r2, #61	@ 0x3d
 8008980:	2102      	movs	r1, #2
 8008982:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a26      	ldr	r2, [pc, #152]	@ (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d108      	bne.n	80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4a25      	ldr	r2, [pc, #148]	@ (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2270      	movs	r2, #112	@ 0x70
 80089b4:	4393      	bics	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4313      	orrs	r3, r2
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a19      	ldr	r2, [pc, #100]	@ (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d014      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	2380      	movs	r3, #128	@ 0x80
 80089da:	05db      	lsls	r3, r3, #23
 80089dc:	429a      	cmp	r2, r3
 80089de:	d00e      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a15      	ldr	r2, [pc, #84]	@ (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d009      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a14      	ldr	r2, [pc, #80]	@ (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d004      	beq.n	80089fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a12      	ldr	r2, [pc, #72]	@ (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d10c      	bne.n	8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2280      	movs	r2, #128	@ 0x80
 8008a02:	4393      	bics	r3, r2
 8008a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	223d      	movs	r2, #61	@ 0x3d
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	223c      	movs	r2, #60	@ 0x3c
 8008a24:	2100      	movs	r1, #0
 8008a26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	b004      	add	sp, #16
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	40012c00 	.word	0x40012c00
 8008a38:	ff0fffff 	.word	0xff0fffff
 8008a3c:	40000400 	.word	0x40000400
 8008a40:	40000800 	.word	0x40000800
 8008a44:	40014000 	.word	0x40014000

08008a48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	223c      	movs	r2, #60	@ 0x3c
 8008a5a:	5c9b      	ldrb	r3, [r3, r2]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d101      	bne.n	8008a64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a60:	2302      	movs	r3, #2
 8008a62:	e079      	b.n	8008b58 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	223c      	movs	r2, #60	@ 0x3c
 8008a68:	2101      	movs	r1, #1
 8008a6a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	22ff      	movs	r2, #255	@ 0xff
 8008a70:	4393      	bics	r3, r2
 8008a72:	001a      	movs	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4a38      	ldr	r2, [pc, #224]	@ (8008b60 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008a80:	401a      	ands	r2, r3
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4a35      	ldr	r2, [pc, #212]	@ (8008b64 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008a8e:	401a      	ands	r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4a33      	ldr	r2, [pc, #204]	@ (8008b68 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008a9c:	401a      	ands	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4a30      	ldr	r2, [pc, #192]	@ (8008b6c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008aaa:	401a      	ands	r2, r3
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8008b70 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008ab8:	401a      	ands	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8008b74 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008ac6:	401a      	ands	r2, r3
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008acc:	4313      	orrs	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a29      	ldr	r2, [pc, #164]	@ (8008b78 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008ad4:	401a      	ands	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	041b      	lsls	r3, r3, #16
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a25      	ldr	r2, [pc, #148]	@ (8008b7c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d106      	bne.n	8008af8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	4a24      	ldr	r2, [pc, #144]	@ (8008b80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008aee:	401a      	ands	r2, r3
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a1f      	ldr	r2, [pc, #124]	@ (8008b7c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d121      	bne.n	8008b46 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4a1f      	ldr	r2, [pc, #124]	@ (8008b84 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008b06:	401a      	ands	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0c:	051b      	lsls	r3, r3, #20
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4a1c      	ldr	r2, [pc, #112]	@ (8008b88 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008b16:	401a      	ands	r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4a1a      	ldr	r2, [pc, #104]	@ (8008b8c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008b24:	401a      	ands	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a12      	ldr	r2, [pc, #72]	@ (8008b7c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d106      	bne.n	8008b46 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4a15      	ldr	r2, [pc, #84]	@ (8008b90 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008b3c:	401a      	ands	r2, r3
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	223c      	movs	r2, #60	@ 0x3c
 8008b52:	2100      	movs	r1, #0
 8008b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	0018      	movs	r0, r3
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	b004      	add	sp, #16
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	fffffcff 	.word	0xfffffcff
 8008b64:	fffffbff 	.word	0xfffffbff
 8008b68:	fffff7ff 	.word	0xfffff7ff
 8008b6c:	ffffefff 	.word	0xffffefff
 8008b70:	ffffdfff 	.word	0xffffdfff
 8008b74:	ffffbfff 	.word	0xffffbfff
 8008b78:	fff0ffff 	.word	0xfff0ffff
 8008b7c:	40012c00 	.word	0x40012c00
 8008b80:	efffffff 	.word	0xefffffff
 8008b84:	ff0fffff 	.word	0xff0fffff
 8008b88:	feffffff 	.word	0xfeffffff
 8008b8c:	fdffffff 	.word	0xfdffffff
 8008b90:	dfffffff 	.word	0xdfffffff

08008b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b9c:	46c0      	nop			@ (mov r8, r8)
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	b002      	add	sp, #8
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bac:	46c0      	nop			@ (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b002      	add	sp, #8
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bbc:	46c0      	nop			@ (mov r8, r8)
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	b002      	add	sp, #8
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bc4:	b5b0      	push	{r4, r5, r7, lr}
 8008bc6:	b0aa      	sub	sp, #168	@ 0xa8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	22a4      	movs	r2, #164	@ 0xa4
 8008bd4:	18b9      	adds	r1, r7, r2
 8008bd6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	20a0      	movs	r0, #160	@ 0xa0
 8008be0:	1839      	adds	r1, r7, r0
 8008be2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	249c      	movs	r4, #156	@ 0x9c
 8008bec:	1939      	adds	r1, r7, r4
 8008bee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bf0:	0011      	movs	r1, r2
 8008bf2:	18bb      	adds	r3, r7, r2
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4aa2      	ldr	r2, [pc, #648]	@ (8008e80 <HAL_UART_IRQHandler+0x2bc>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	2298      	movs	r2, #152	@ 0x98
 8008bfc:	18bd      	adds	r5, r7, r2
 8008bfe:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008c00:	18bb      	adds	r3, r7, r2
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d11a      	bne.n	8008c3e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c08:	187b      	adds	r3, r7, r1
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	4013      	ands	r3, r2
 8008c10:	d015      	beq.n	8008c3e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c12:	183b      	adds	r3, r7, r0
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2220      	movs	r2, #32
 8008c18:	4013      	ands	r3, r2
 8008c1a:	d105      	bne.n	8008c28 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c1c:	193b      	adds	r3, r7, r4
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	2380      	movs	r3, #128	@ 0x80
 8008c22:	055b      	lsls	r3, r3, #21
 8008c24:	4013      	ands	r3, r2
 8008c26:	d00a      	beq.n	8008c3e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d100      	bne.n	8008c32 <HAL_UART_IRQHandler+0x6e>
 8008c30:	e2dc      	b.n	80091ec <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	0010      	movs	r0, r2
 8008c3a:	4798      	blx	r3
      }
      return;
 8008c3c:	e2d6      	b.n	80091ec <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c3e:	2398      	movs	r3, #152	@ 0x98
 8008c40:	18fb      	adds	r3, r7, r3
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d100      	bne.n	8008c4a <HAL_UART_IRQHandler+0x86>
 8008c48:	e122      	b.n	8008e90 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c4a:	239c      	movs	r3, #156	@ 0x9c
 8008c4c:	18fb      	adds	r3, r7, r3
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a8c      	ldr	r2, [pc, #560]	@ (8008e84 <HAL_UART_IRQHandler+0x2c0>)
 8008c52:	4013      	ands	r3, r2
 8008c54:	d106      	bne.n	8008c64 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c56:	23a0      	movs	r3, #160	@ 0xa0
 8008c58:	18fb      	adds	r3, r7, r3
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a8a      	ldr	r2, [pc, #552]	@ (8008e88 <HAL_UART_IRQHandler+0x2c4>)
 8008c5e:	4013      	ands	r3, r2
 8008c60:	d100      	bne.n	8008c64 <HAL_UART_IRQHandler+0xa0>
 8008c62:	e115      	b.n	8008e90 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c64:	23a4      	movs	r3, #164	@ 0xa4
 8008c66:	18fb      	adds	r3, r7, r3
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	d012      	beq.n	8008c96 <HAL_UART_IRQHandler+0xd2>
 8008c70:	23a0      	movs	r3, #160	@ 0xa0
 8008c72:	18fb      	adds	r3, r7, r3
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	2380      	movs	r3, #128	@ 0x80
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	d00b      	beq.n	8008c96 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2201      	movs	r2, #1
 8008c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2290      	movs	r2, #144	@ 0x90
 8008c8a:	589b      	ldr	r3, [r3, r2]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2190      	movs	r1, #144	@ 0x90
 8008c94:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c96:	23a4      	movs	r3, #164	@ 0xa4
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	d011      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x102>
 8008ca2:	239c      	movs	r3, #156	@ 0x9c
 8008ca4:	18fb      	adds	r3, r7, r3
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	4013      	ands	r3, r2
 8008cac:	d00b      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2290      	movs	r2, #144	@ 0x90
 8008cba:	589b      	ldr	r3, [r3, r2]
 8008cbc:	2204      	movs	r2, #4
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2190      	movs	r1, #144	@ 0x90
 8008cc4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cc6:	23a4      	movs	r3, #164	@ 0xa4
 8008cc8:	18fb      	adds	r3, r7, r3
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2204      	movs	r2, #4
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d011      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x132>
 8008cd2:	239c      	movs	r3, #156	@ 0x9c
 8008cd4:	18fb      	adds	r3, r7, r3
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d00b      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2290      	movs	r2, #144	@ 0x90
 8008cea:	589b      	ldr	r3, [r3, r2]
 8008cec:	2202      	movs	r2, #2
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2190      	movs	r1, #144	@ 0x90
 8008cf4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cf6:	23a4      	movs	r3, #164	@ 0xa4
 8008cf8:	18fb      	adds	r3, r7, r3
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	4013      	ands	r3, r2
 8008d00:	d017      	beq.n	8008d32 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d02:	23a0      	movs	r3, #160	@ 0xa0
 8008d04:	18fb      	adds	r3, r7, r3
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	d105      	bne.n	8008d1a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d0e:	239c      	movs	r3, #156	@ 0x9c
 8008d10:	18fb      	adds	r3, r7, r3
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a5b      	ldr	r2, [pc, #364]	@ (8008e84 <HAL_UART_IRQHandler+0x2c0>)
 8008d16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d18:	d00b      	beq.n	8008d32 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2208      	movs	r2, #8
 8008d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2290      	movs	r2, #144	@ 0x90
 8008d26:	589b      	ldr	r3, [r3, r2]
 8008d28:	2208      	movs	r2, #8
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2190      	movs	r1, #144	@ 0x90
 8008d30:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d32:	23a4      	movs	r3, #164	@ 0xa4
 8008d34:	18fb      	adds	r3, r7, r3
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	2380      	movs	r3, #128	@ 0x80
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	d013      	beq.n	8008d68 <HAL_UART_IRQHandler+0x1a4>
 8008d40:	23a0      	movs	r3, #160	@ 0xa0
 8008d42:	18fb      	adds	r3, r7, r3
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	2380      	movs	r3, #128	@ 0x80
 8008d48:	04db      	lsls	r3, r3, #19
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	d00c      	beq.n	8008d68 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2280      	movs	r2, #128	@ 0x80
 8008d54:	0112      	lsls	r2, r2, #4
 8008d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2290      	movs	r2, #144	@ 0x90
 8008d5c:	589b      	ldr	r3, [r3, r2]
 8008d5e:	2220      	movs	r2, #32
 8008d60:	431a      	orrs	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2190      	movs	r1, #144	@ 0x90
 8008d66:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2290      	movs	r2, #144	@ 0x90
 8008d6c:	589b      	ldr	r3, [r3, r2]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d100      	bne.n	8008d74 <HAL_UART_IRQHandler+0x1b0>
 8008d72:	e23d      	b.n	80091f0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d74:	23a4      	movs	r3, #164	@ 0xa4
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	d015      	beq.n	8008dac <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d80:	23a0      	movs	r3, #160	@ 0xa0
 8008d82:	18fb      	adds	r3, r7, r3
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2220      	movs	r2, #32
 8008d88:	4013      	ands	r3, r2
 8008d8a:	d106      	bne.n	8008d9a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d8c:	239c      	movs	r3, #156	@ 0x9c
 8008d8e:	18fb      	adds	r3, r7, r3
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	2380      	movs	r3, #128	@ 0x80
 8008d94:	055b      	lsls	r3, r3, #21
 8008d96:	4013      	ands	r3, r2
 8008d98:	d008      	beq.n	8008dac <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d004      	beq.n	8008dac <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	0010      	movs	r0, r2
 8008daa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2290      	movs	r2, #144	@ 0x90
 8008db0:	589b      	ldr	r3, [r3, r2]
 8008db2:	2194      	movs	r1, #148	@ 0x94
 8008db4:	187a      	adds	r2, r7, r1
 8008db6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	2240      	movs	r2, #64	@ 0x40
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	2b40      	cmp	r3, #64	@ 0x40
 8008dc4:	d004      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008dc6:	187b      	adds	r3, r7, r1
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2228      	movs	r2, #40	@ 0x28
 8008dcc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dce:	d04c      	beq.n	8008e6a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f000 fa38 	bl	8009248 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	2240      	movs	r2, #64	@ 0x40
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b40      	cmp	r3, #64	@ 0x40
 8008de4:	d13c      	bne.n	8008e60 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de6:	f3ef 8310 	mrs	r3, PRIMASK
 8008dea:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008dec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dee:	2090      	movs	r0, #144	@ 0x90
 8008df0:	183a      	adds	r2, r7, r0
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	2301      	movs	r3, #1
 8008df6:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dfa:	f383 8810 	msr	PRIMASK, r3
}
 8008dfe:	46c0      	nop			@ (mov r8, r8)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2140      	movs	r1, #64	@ 0x40
 8008e0c:	438a      	bics	r2, r1
 8008e0e:	609a      	str	r2, [r3, #8]
 8008e10:	183b      	adds	r3, r7, r0
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e18:	f383 8810 	msr	PRIMASK, r3
}
 8008e1c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2280      	movs	r2, #128	@ 0x80
 8008e22:	589b      	ldr	r3, [r3, r2]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d016      	beq.n	8008e56 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2280      	movs	r2, #128	@ 0x80
 8008e2c:	589b      	ldr	r3, [r3, r2]
 8008e2e:	4a17      	ldr	r2, [pc, #92]	@ (8008e8c <HAL_UART_IRQHandler+0x2c8>)
 8008e30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2280      	movs	r2, #128	@ 0x80
 8008e36:	589b      	ldr	r3, [r3, r2]
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f7fc fd03 	bl	8005844 <HAL_DMA_Abort_IT>
 8008e3e:	1e03      	subs	r3, r0, #0
 8008e40:	d01c      	beq.n	8008e7c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2280      	movs	r2, #128	@ 0x80
 8008e46:	589b      	ldr	r3, [r3, r2]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	2180      	movs	r1, #128	@ 0x80
 8008e4e:	5852      	ldr	r2, [r2, r1]
 8008e50:	0010      	movs	r0, r2
 8008e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e54:	e012      	b.n	8008e7c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	0018      	movs	r0, r3
 8008e5a:	f000 f9e1 	bl	8009220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e5e:	e00d      	b.n	8008e7c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	0018      	movs	r0, r3
 8008e64:	f000 f9dc 	bl	8009220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e68:	e008      	b.n	8008e7c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	0018      	movs	r0, r3
 8008e6e:	f000 f9d7 	bl	8009220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2290      	movs	r2, #144	@ 0x90
 8008e76:	2100      	movs	r1, #0
 8008e78:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008e7a:	e1b9      	b.n	80091f0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	46c0      	nop			@ (mov r8, r8)
    return;
 8008e7e:	e1b7      	b.n	80091f0 <HAL_UART_IRQHandler+0x62c>
 8008e80:	0000080f 	.word	0x0000080f
 8008e84:	10000001 	.word	0x10000001
 8008e88:	04000120 	.word	0x04000120
 8008e8c:	08009315 	.word	0x08009315

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d000      	beq.n	8008e9a <HAL_UART_IRQHandler+0x2d6>
 8008e98:	e13e      	b.n	8009118 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e9a:	23a4      	movs	r3, #164	@ 0xa4
 8008e9c:	18fb      	adds	r3, r7, r3
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2210      	movs	r2, #16
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	d100      	bne.n	8008ea8 <HAL_UART_IRQHandler+0x2e4>
 8008ea6:	e137      	b.n	8009118 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ea8:	23a0      	movs	r3, #160	@ 0xa0
 8008eaa:	18fb      	adds	r3, r7, r3
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2210      	movs	r2, #16
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	d100      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x2f2>
 8008eb4:	e130      	b.n	8009118 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2210      	movs	r2, #16
 8008ebc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	2240      	movs	r2, #64	@ 0x40
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	2b40      	cmp	r3, #64	@ 0x40
 8008eca:	d000      	beq.n	8008ece <HAL_UART_IRQHandler+0x30a>
 8008ecc:	e0a4      	b.n	8009018 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2280      	movs	r2, #128	@ 0x80
 8008ed2:	589b      	ldr	r3, [r3, r2]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	217e      	movs	r1, #126	@ 0x7e
 8008eda:	187b      	adds	r3, r7, r1
 8008edc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008ede:	187b      	adds	r3, r7, r1
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d100      	bne.n	8008ee8 <HAL_UART_IRQHandler+0x324>
 8008ee6:	e185      	b.n	80091f4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	225c      	movs	r2, #92	@ 0x5c
 8008eec:	5a9b      	ldrh	r3, [r3, r2]
 8008eee:	187a      	adds	r2, r7, r1
 8008ef0:	8812      	ldrh	r2, [r2, #0]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d300      	bcc.n	8008ef8 <HAL_UART_IRQHandler+0x334>
 8008ef6:	e17d      	b.n	80091f4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	187a      	adds	r2, r7, r1
 8008efc:	215e      	movs	r1, #94	@ 0x5e
 8008efe:	8812      	ldrh	r2, [r2, #0]
 8008f00:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2280      	movs	r2, #128	@ 0x80
 8008f06:	589b      	ldr	r3, [r3, r2]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	4013      	ands	r3, r2
 8008f10:	d170      	bne.n	8008ff4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f12:	f3ef 8310 	mrs	r3, PRIMASK
 8008f16:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f22:	f383 8810 	msr	PRIMASK, r3
}
 8008f26:	46c0      	nop			@ (mov r8, r8)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	49b4      	ldr	r1, [pc, #720]	@ (8009204 <HAL_UART_IRQHandler+0x640>)
 8008f34:	400a      	ands	r2, r1
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	f383 8810 	msr	PRIMASK, r3
}
 8008f42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f44:	f3ef 8310 	mrs	r3, PRIMASK
 8008f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f4e:	2301      	movs	r3, #1
 8008f50:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f54:	f383 8810 	msr	PRIMASK, r3
}
 8008f58:	46c0      	nop			@ (mov r8, r8)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2101      	movs	r1, #1
 8008f66:	438a      	bics	r2, r1
 8008f68:	609a      	str	r2, [r3, #8]
 8008f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f70:	f383 8810 	msr	PRIMASK, r3
}
 8008f74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f76:	f3ef 8310 	mrs	r3, PRIMASK
 8008f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f80:	2301      	movs	r3, #1
 8008f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f86:	f383 8810 	msr	PRIMASK, r3
}
 8008f8a:	46c0      	nop			@ (mov r8, r8)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689a      	ldr	r2, [r3, #8]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2140      	movs	r1, #64	@ 0x40
 8008f98:	438a      	bics	r2, r1
 8008f9a:	609a      	str	r2, [r3, #8]
 8008f9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f9e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fa2:	f383 8810 	msr	PRIMASK, r3
}
 8008fa6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	228c      	movs	r2, #140	@ 0x8c
 8008fac:	2120      	movs	r1, #32
 8008fae:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8008fba:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8008fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fc6:	f383 8810 	msr	PRIMASK, r3
}
 8008fca:	46c0      	nop			@ (mov r8, r8)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2110      	movs	r1, #16
 8008fd8:	438a      	bics	r2, r1
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fe2:	f383 8810 	msr	PRIMASK, r3
}
 8008fe6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2280      	movs	r2, #128	@ 0x80
 8008fec:	589b      	ldr	r3, [r3, r2]
 8008fee:	0018      	movs	r0, r3
 8008ff0:	f7fc fbc8 	bl	8005784 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	225c      	movs	r2, #92	@ 0x5c
 8008ffe:	5a9a      	ldrh	r2, [r3, r2]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	215e      	movs	r1, #94	@ 0x5e
 8009004:	5a5b      	ldrh	r3, [r3, r1]
 8009006:	b29b      	uxth	r3, r3
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	b29a      	uxth	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	0011      	movs	r1, r2
 8009010:	0018      	movs	r0, r3
 8009012:	f000 f90d 	bl	8009230 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009016:	e0ed      	b.n	80091f4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	225c      	movs	r2, #92	@ 0x5c
 800901c:	5a99      	ldrh	r1, [r3, r2]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	225e      	movs	r2, #94	@ 0x5e
 8009022:	5a9b      	ldrh	r3, [r3, r2]
 8009024:	b29a      	uxth	r2, r3
 8009026:	208e      	movs	r0, #142	@ 0x8e
 8009028:	183b      	adds	r3, r7, r0
 800902a:	1a8a      	subs	r2, r1, r2
 800902c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	225e      	movs	r2, #94	@ 0x5e
 8009032:	5a9b      	ldrh	r3, [r3, r2]
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d100      	bne.n	800903c <HAL_UART_IRQHandler+0x478>
 800903a:	e0dd      	b.n	80091f8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800903c:	183b      	adds	r3, r7, r0
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d100      	bne.n	8009046 <HAL_UART_IRQHandler+0x482>
 8009044:	e0d8      	b.n	80091f8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009046:	f3ef 8310 	mrs	r3, PRIMASK
 800904a:	60fb      	str	r3, [r7, #12]
  return(result);
 800904c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800904e:	2488      	movs	r4, #136	@ 0x88
 8009050:	193a      	adds	r2, r7, r4
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	2301      	movs	r3, #1
 8009056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f383 8810 	msr	PRIMASK, r3
}
 800905e:	46c0      	nop			@ (mov r8, r8)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4967      	ldr	r1, [pc, #412]	@ (8009208 <HAL_UART_IRQHandler+0x644>)
 800906c:	400a      	ands	r2, r1
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	193b      	adds	r3, r7, r4
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f383 8810 	msr	PRIMASK, r3
}
 800907c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800907e:	f3ef 8310 	mrs	r3, PRIMASK
 8009082:	61bb      	str	r3, [r7, #24]
  return(result);
 8009084:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009086:	2484      	movs	r4, #132	@ 0x84
 8009088:	193a      	adds	r2, r7, r4
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	2301      	movs	r3, #1
 800908e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f383 8810 	msr	PRIMASK, r3
}
 8009096:	46c0      	nop			@ (mov r8, r8)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	495a      	ldr	r1, [pc, #360]	@ (800920c <HAL_UART_IRQHandler+0x648>)
 80090a4:	400a      	ands	r2, r1
 80090a6:	609a      	str	r2, [r3, #8]
 80090a8:	193b      	adds	r3, r7, r4
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	f383 8810 	msr	PRIMASK, r3
}
 80090b4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	228c      	movs	r2, #140	@ 0x8c
 80090ba:	2120      	movs	r1, #32
 80090bc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ca:	f3ef 8310 	mrs	r3, PRIMASK
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d2:	2480      	movs	r4, #128	@ 0x80
 80090d4:	193a      	adds	r2, r7, r4
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	2301      	movs	r3, #1
 80090da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090de:	f383 8810 	msr	PRIMASK, r3
}
 80090e2:	46c0      	nop			@ (mov r8, r8)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2110      	movs	r1, #16
 80090f0:	438a      	bics	r2, r1
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	193b      	adds	r3, r7, r4
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fc:	f383 8810 	msr	PRIMASK, r3
}
 8009100:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009108:	183b      	adds	r3, r7, r0
 800910a:	881a      	ldrh	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	0011      	movs	r1, r2
 8009110:	0018      	movs	r0, r3
 8009112:	f000 f88d 	bl	8009230 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009116:	e06f      	b.n	80091f8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009118:	23a4      	movs	r3, #164	@ 0xa4
 800911a:	18fb      	adds	r3, r7, r3
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	2380      	movs	r3, #128	@ 0x80
 8009120:	035b      	lsls	r3, r3, #13
 8009122:	4013      	ands	r3, r2
 8009124:	d010      	beq.n	8009148 <HAL_UART_IRQHandler+0x584>
 8009126:	239c      	movs	r3, #156	@ 0x9c
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	2380      	movs	r3, #128	@ 0x80
 800912e:	03db      	lsls	r3, r3, #15
 8009130:	4013      	ands	r3, r2
 8009132:	d009      	beq.n	8009148 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2280      	movs	r2, #128	@ 0x80
 800913a:	0352      	lsls	r2, r2, #13
 800913c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	0018      	movs	r0, r3
 8009142:	f000 f92a 	bl	800939a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009146:	e05a      	b.n	80091fe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009148:	23a4      	movs	r3, #164	@ 0xa4
 800914a:	18fb      	adds	r3, r7, r3
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2280      	movs	r2, #128	@ 0x80
 8009150:	4013      	ands	r3, r2
 8009152:	d016      	beq.n	8009182 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009154:	23a0      	movs	r3, #160	@ 0xa0
 8009156:	18fb      	adds	r3, r7, r3
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2280      	movs	r2, #128	@ 0x80
 800915c:	4013      	ands	r3, r2
 800915e:	d106      	bne.n	800916e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009160:	239c      	movs	r3, #156	@ 0x9c
 8009162:	18fb      	adds	r3, r7, r3
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	2380      	movs	r3, #128	@ 0x80
 8009168:	041b      	lsls	r3, r3, #16
 800916a:	4013      	ands	r3, r2
 800916c:	d009      	beq.n	8009182 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009172:	2b00      	cmp	r3, #0
 8009174:	d042      	beq.n	80091fc <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	0010      	movs	r0, r2
 800917e:	4798      	blx	r3
    }
    return;
 8009180:	e03c      	b.n	80091fc <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009182:	23a4      	movs	r3, #164	@ 0xa4
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2240      	movs	r2, #64	@ 0x40
 800918a:	4013      	ands	r3, r2
 800918c:	d00a      	beq.n	80091a4 <HAL_UART_IRQHandler+0x5e0>
 800918e:	23a0      	movs	r3, #160	@ 0xa0
 8009190:	18fb      	adds	r3, r7, r3
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2240      	movs	r2, #64	@ 0x40
 8009196:	4013      	ands	r3, r2
 8009198:	d004      	beq.n	80091a4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	0018      	movs	r0, r3
 800919e:	f000 f8d0 	bl	8009342 <UART_EndTransmit_IT>
    return;
 80091a2:	e02c      	b.n	80091fe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80091a4:	23a4      	movs	r3, #164	@ 0xa4
 80091a6:	18fb      	adds	r3, r7, r3
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	2380      	movs	r3, #128	@ 0x80
 80091ac:	041b      	lsls	r3, r3, #16
 80091ae:	4013      	ands	r3, r2
 80091b0:	d00b      	beq.n	80091ca <HAL_UART_IRQHandler+0x606>
 80091b2:	23a0      	movs	r3, #160	@ 0xa0
 80091b4:	18fb      	adds	r3, r7, r3
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	2380      	movs	r3, #128	@ 0x80
 80091ba:	05db      	lsls	r3, r3, #23
 80091bc:	4013      	ands	r3, r2
 80091be:	d004      	beq.n	80091ca <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	0018      	movs	r0, r3
 80091c4:	f000 f8f9 	bl	80093ba <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091c8:	e019      	b.n	80091fe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80091ca:	23a4      	movs	r3, #164	@ 0xa4
 80091cc:	18fb      	adds	r3, r7, r3
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	2380      	movs	r3, #128	@ 0x80
 80091d2:	045b      	lsls	r3, r3, #17
 80091d4:	4013      	ands	r3, r2
 80091d6:	d012      	beq.n	80091fe <HAL_UART_IRQHandler+0x63a>
 80091d8:	23a0      	movs	r3, #160	@ 0xa0
 80091da:	18fb      	adds	r3, r7, r3
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	da0d      	bge.n	80091fe <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	0018      	movs	r0, r3
 80091e6:	f000 f8e0 	bl	80093aa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091ea:	e008      	b.n	80091fe <HAL_UART_IRQHandler+0x63a>
      return;
 80091ec:	46c0      	nop			@ (mov r8, r8)
 80091ee:	e006      	b.n	80091fe <HAL_UART_IRQHandler+0x63a>
    return;
 80091f0:	46c0      	nop			@ (mov r8, r8)
 80091f2:	e004      	b.n	80091fe <HAL_UART_IRQHandler+0x63a>
      return;
 80091f4:	46c0      	nop			@ (mov r8, r8)
 80091f6:	e002      	b.n	80091fe <HAL_UART_IRQHandler+0x63a>
      return;
 80091f8:	46c0      	nop			@ (mov r8, r8)
 80091fa:	e000      	b.n	80091fe <HAL_UART_IRQHandler+0x63a>
    return;
 80091fc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80091fe:	46bd      	mov	sp, r7
 8009200:	b02a      	add	sp, #168	@ 0xa8
 8009202:	bdb0      	pop	{r4, r5, r7, pc}
 8009204:	fffffeff 	.word	0xfffffeff
 8009208:	fffffedf 	.word	0xfffffedf
 800920c:	effffffe 	.word	0xeffffffe

08009210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009218:	46c0      	nop			@ (mov r8, r8)
 800921a:	46bd      	mov	sp, r7
 800921c:	b002      	add	sp, #8
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009228:	46c0      	nop			@ (mov r8, r8)
 800922a:	46bd      	mov	sp, r7
 800922c:	b002      	add	sp, #8
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	000a      	movs	r2, r1
 800923a:	1cbb      	adds	r3, r7, #2
 800923c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800923e:	46c0      	nop			@ (mov r8, r8)
 8009240:	46bd      	mov	sp, r7
 8009242:	b002      	add	sp, #8
 8009244:	bd80      	pop	{r7, pc}
	...

08009248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08e      	sub	sp, #56	@ 0x38
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009250:	f3ef 8310 	mrs	r3, PRIMASK
 8009254:	617b      	str	r3, [r7, #20]
  return(result);
 8009256:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009258:	637b      	str	r3, [r7, #52]	@ 0x34
 800925a:	2301      	movs	r3, #1
 800925c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	f383 8810 	msr	PRIMASK, r3
}
 8009264:	46c0      	nop			@ (mov r8, r8)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4926      	ldr	r1, [pc, #152]	@ (800930c <UART_EndRxTransfer+0xc4>)
 8009272:	400a      	ands	r2, r1
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	f383 8810 	msr	PRIMASK, r3
}
 8009280:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009282:	f3ef 8310 	mrs	r3, PRIMASK
 8009286:	623b      	str	r3, [r7, #32]
  return(result);
 8009288:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800928a:	633b      	str	r3, [r7, #48]	@ 0x30
 800928c:	2301      	movs	r3, #1
 800928e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009292:	f383 8810 	msr	PRIMASK, r3
}
 8009296:	46c0      	nop			@ (mov r8, r8)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	491b      	ldr	r1, [pc, #108]	@ (8009310 <UART_EndRxTransfer+0xc8>)
 80092a4:	400a      	ands	r2, r1
 80092a6:	609a      	str	r2, [r3, #8]
 80092a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ae:	f383 8810 	msr	PRIMASK, r3
}
 80092b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d118      	bne.n	80092ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092bc:	f3ef 8310 	mrs	r3, PRIMASK
 80092c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80092c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092c6:	2301      	movs	r3, #1
 80092c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f383 8810 	msr	PRIMASK, r3
}
 80092d0:	46c0      	nop			@ (mov r8, r8)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2110      	movs	r1, #16
 80092de:	438a      	bics	r2, r1
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f383 8810 	msr	PRIMASK, r3
}
 80092ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	228c      	movs	r2, #140	@ 0x8c
 80092f2:	2120      	movs	r1, #32
 80092f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009302:	46c0      	nop			@ (mov r8, r8)
 8009304:	46bd      	mov	sp, r7
 8009306:	b00e      	add	sp, #56	@ 0x38
 8009308:	bd80      	pop	{r7, pc}
 800930a:	46c0      	nop			@ (mov r8, r8)
 800930c:	fffffedf 	.word	0xfffffedf
 8009310:	effffffe 	.word	0xeffffffe

08009314 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009320:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	225e      	movs	r2, #94	@ 0x5e
 8009326:	2100      	movs	r1, #0
 8009328:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2256      	movs	r2, #86	@ 0x56
 800932e:	2100      	movs	r1, #0
 8009330:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	0018      	movs	r0, r3
 8009336:	f7ff ff73 	bl	8009220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800933a:	46c0      	nop			@ (mov r8, r8)
 800933c:	46bd      	mov	sp, r7
 800933e:	b004      	add	sp, #16
 8009340:	bd80      	pop	{r7, pc}

08009342 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b086      	sub	sp, #24
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800934a:	f3ef 8310 	mrs	r3, PRIMASK
 800934e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009350:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	2301      	movs	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f383 8810 	msr	PRIMASK, r3
}
 800935e:	46c0      	nop			@ (mov r8, r8)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2140      	movs	r1, #64	@ 0x40
 800936c:	438a      	bics	r2, r1
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	f383 8810 	msr	PRIMASK, r3
}
 800937a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2288      	movs	r2, #136	@ 0x88
 8009380:	2120      	movs	r1, #32
 8009382:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	0018      	movs	r0, r3
 800938e:	f7ff ff3f 	bl	8009210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009392:	46c0      	nop			@ (mov r8, r8)
 8009394:	46bd      	mov	sp, r7
 8009396:	b006      	add	sp, #24
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093a2:	46c0      	nop			@ (mov r8, r8)
 80093a4:	46bd      	mov	sp, r7
 80093a6:	b002      	add	sp, #8
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093b2:	46c0      	nop			@ (mov r8, r8)
 80093b4:	46bd      	mov	sp, r7
 80093b6:	b002      	add	sp, #8
 80093b8:	bd80      	pop	{r7, pc}

080093ba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093c2:	46c0      	nop			@ (mov r8, r8)
 80093c4:	46bd      	mov	sp, r7
 80093c6:	b002      	add	sp, #8
 80093c8:	bd80      	pop	{r7, pc}

080093ca <memset>:
 80093ca:	0003      	movs	r3, r0
 80093cc:	1882      	adds	r2, r0, r2
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d100      	bne.n	80093d4 <memset+0xa>
 80093d2:	4770      	bx	lr
 80093d4:	7019      	strb	r1, [r3, #0]
 80093d6:	3301      	adds	r3, #1
 80093d8:	e7f9      	b.n	80093ce <memset+0x4>
	...

080093dc <__errno>:
 80093dc:	4b01      	ldr	r3, [pc, #4]	@ (80093e4 <__errno+0x8>)
 80093de:	6818      	ldr	r0, [r3, #0]
 80093e0:	4770      	bx	lr
 80093e2:	46c0      	nop			@ (mov r8, r8)
 80093e4:	2000001c 	.word	0x2000001c

080093e8 <__libc_init_array>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	2600      	movs	r6, #0
 80093ec:	4c0c      	ldr	r4, [pc, #48]	@ (8009420 <__libc_init_array+0x38>)
 80093ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009424 <__libc_init_array+0x3c>)
 80093f0:	1b64      	subs	r4, r4, r5
 80093f2:	10a4      	asrs	r4, r4, #2
 80093f4:	42a6      	cmp	r6, r4
 80093f6:	d109      	bne.n	800940c <__libc_init_array+0x24>
 80093f8:	2600      	movs	r6, #0
 80093fa:	f000 fa07 	bl	800980c <_init>
 80093fe:	4c0a      	ldr	r4, [pc, #40]	@ (8009428 <__libc_init_array+0x40>)
 8009400:	4d0a      	ldr	r5, [pc, #40]	@ (800942c <__libc_init_array+0x44>)
 8009402:	1b64      	subs	r4, r4, r5
 8009404:	10a4      	asrs	r4, r4, #2
 8009406:	42a6      	cmp	r6, r4
 8009408:	d105      	bne.n	8009416 <__libc_init_array+0x2e>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	00b3      	lsls	r3, r6, #2
 800940e:	58eb      	ldr	r3, [r5, r3]
 8009410:	4798      	blx	r3
 8009412:	3601      	adds	r6, #1
 8009414:	e7ee      	b.n	80093f4 <__libc_init_array+0xc>
 8009416:	00b3      	lsls	r3, r6, #2
 8009418:	58eb      	ldr	r3, [r5, r3]
 800941a:	4798      	blx	r3
 800941c:	3601      	adds	r6, #1
 800941e:	e7f2      	b.n	8009406 <__libc_init_array+0x1e>
 8009420:	080099b0 	.word	0x080099b0
 8009424:	080099b0 	.word	0x080099b0
 8009428:	080099b4 	.word	0x080099b4
 800942c:	080099b0 	.word	0x080099b0

08009430 <log>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	0004      	movs	r4, r0
 8009434:	000d      	movs	r5, r1
 8009436:	f000 f837 	bl	80094a8 <__ieee754_log>
 800943a:	0022      	movs	r2, r4
 800943c:	0006      	movs	r6, r0
 800943e:	000f      	movs	r7, r1
 8009440:	002b      	movs	r3, r5
 8009442:	0020      	movs	r0, r4
 8009444:	0029      	movs	r1, r5
 8009446:	f7f9 fa25 	bl	8002894 <__aeabi_dcmpun>
 800944a:	2800      	cmp	r0, #0
 800944c:	d115      	bne.n	800947a <log+0x4a>
 800944e:	2200      	movs	r2, #0
 8009450:	2300      	movs	r3, #0
 8009452:	0020      	movs	r0, r4
 8009454:	0029      	movs	r1, r5
 8009456:	f7f6 fff5 	bl	8000444 <__aeabi_dcmpgt>
 800945a:	2800      	cmp	r0, #0
 800945c:	d10d      	bne.n	800947a <log+0x4a>
 800945e:	2200      	movs	r2, #0
 8009460:	2300      	movs	r3, #0
 8009462:	0020      	movs	r0, r4
 8009464:	0029      	movs	r1, r5
 8009466:	f7f6 ffd3 	bl	8000410 <__aeabi_dcmpeq>
 800946a:	2800      	cmp	r0, #0
 800946c:	d008      	beq.n	8009480 <log+0x50>
 800946e:	f7ff ffb5 	bl	80093dc <__errno>
 8009472:	2322      	movs	r3, #34	@ 0x22
 8009474:	2600      	movs	r6, #0
 8009476:	4f07      	ldr	r7, [pc, #28]	@ (8009494 <log+0x64>)
 8009478:	6003      	str	r3, [r0, #0]
 800947a:	0030      	movs	r0, r6
 800947c:	0039      	movs	r1, r7
 800947e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009480:	f7ff ffac 	bl	80093dc <__errno>
 8009484:	2321      	movs	r3, #33	@ 0x21
 8009486:	6003      	str	r3, [r0, #0]
 8009488:	4803      	ldr	r0, [pc, #12]	@ (8009498 <log+0x68>)
 800948a:	f000 f807 	bl	800949c <nan>
 800948e:	0006      	movs	r6, r0
 8009490:	000f      	movs	r7, r1
 8009492:	e7f2      	b.n	800947a <log+0x4a>
 8009494:	fff00000 	.word	0xfff00000
 8009498:	080099ac 	.word	0x080099ac

0800949c <nan>:
 800949c:	2000      	movs	r0, #0
 800949e:	4901      	ldr	r1, [pc, #4]	@ (80094a4 <nan+0x8>)
 80094a0:	4770      	bx	lr
 80094a2:	46c0      	nop			@ (mov r8, r8)
 80094a4:	7ff80000 	.word	0x7ff80000

080094a8 <__ieee754_log>:
 80094a8:	2380      	movs	r3, #128	@ 0x80
 80094aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ac:	035b      	lsls	r3, r3, #13
 80094ae:	000e      	movs	r6, r1
 80094b0:	b08d      	sub	sp, #52	@ 0x34
 80094b2:	4299      	cmp	r1, r3
 80094b4:	da23      	bge.n	80094fe <__ieee754_log+0x56>
 80094b6:	004b      	lsls	r3, r1, #1
 80094b8:	085b      	lsrs	r3, r3, #1
 80094ba:	4303      	orrs	r3, r0
 80094bc:	d107      	bne.n	80094ce <__ieee754_log+0x26>
 80094be:	2200      	movs	r2, #0
 80094c0:	2300      	movs	r3, #0
 80094c2:	2000      	movs	r0, #0
 80094c4:	49b4      	ldr	r1, [pc, #720]	@ (8009798 <__ieee754_log+0x2f0>)
 80094c6:	f7f7 febb 	bl	8001240 <__aeabi_ddiv>
 80094ca:	b00d      	add	sp, #52	@ 0x34
 80094cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ce:	2900      	cmp	r1, #0
 80094d0:	da06      	bge.n	80094e0 <__ieee754_log+0x38>
 80094d2:	0002      	movs	r2, r0
 80094d4:	000b      	movs	r3, r1
 80094d6:	f7f8 fdd3 	bl	8002080 <__aeabi_dsub>
 80094da:	2200      	movs	r2, #0
 80094dc:	2300      	movs	r3, #0
 80094de:	e7f2      	b.n	80094c6 <__ieee754_log+0x1e>
 80094e0:	4bae      	ldr	r3, [pc, #696]	@ (800979c <__ieee754_log+0x2f4>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	f7f8 fae6 	bl	8001ab4 <__aeabi_dmul>
 80094e8:	2336      	movs	r3, #54	@ 0x36
 80094ea:	000e      	movs	r6, r1
 80094ec:	425b      	negs	r3, r3
 80094ee:	4aac      	ldr	r2, [pc, #688]	@ (80097a0 <__ieee754_log+0x2f8>)
 80094f0:	4296      	cmp	r6, r2
 80094f2:	dd06      	ble.n	8009502 <__ieee754_log+0x5a>
 80094f4:	0002      	movs	r2, r0
 80094f6:	000b      	movs	r3, r1
 80094f8:	f7f7 fadc 	bl	8000ab4 <__aeabi_dadd>
 80094fc:	e7e5      	b.n	80094ca <__ieee754_log+0x22>
 80094fe:	2300      	movs	r3, #0
 8009500:	e7f5      	b.n	80094ee <__ieee754_log+0x46>
 8009502:	4ca8      	ldr	r4, [pc, #672]	@ (80097a4 <__ieee754_log+0x2fc>)
 8009504:	1532      	asrs	r2, r6, #20
 8009506:	1912      	adds	r2, r2, r4
 8009508:	0336      	lsls	r6, r6, #12
 800950a:	4ca7      	ldr	r4, [pc, #668]	@ (80097a8 <__ieee754_log+0x300>)
 800950c:	18d2      	adds	r2, r2, r3
 800950e:	0b33      	lsrs	r3, r6, #12
 8009510:	9302      	str	r3, [sp, #8]
 8009512:	191b      	adds	r3, r3, r4
 8009514:	2480      	movs	r4, #128	@ 0x80
 8009516:	0364      	lsls	r4, r4, #13
 8009518:	4023      	ands	r3, r4
 800951a:	4ca4      	ldr	r4, [pc, #656]	@ (80097ac <__ieee754_log+0x304>)
 800951c:	9d02      	ldr	r5, [sp, #8]
 800951e:	405c      	eors	r4, r3
 8009520:	151b      	asrs	r3, r3, #20
 8009522:	189b      	adds	r3, r3, r2
 8009524:	4325      	orrs	r5, r4
 8009526:	2200      	movs	r2, #0
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	0029      	movs	r1, r5
 800952c:	4b9f      	ldr	r3, [pc, #636]	@ (80097ac <__ieee754_log+0x304>)
 800952e:	f7f8 fda7 	bl	8002080 <__aeabi_dsub>
 8009532:	9b02      	ldr	r3, [sp, #8]
 8009534:	0006      	movs	r6, r0
 8009536:	3302      	adds	r3, #2
 8009538:	031b      	lsls	r3, r3, #12
 800953a:	000f      	movs	r7, r1
 800953c:	2200      	movs	r2, #0
 800953e:	0b1b      	lsrs	r3, r3, #12
 8009540:	2b02      	cmp	r3, #2
 8009542:	dc64      	bgt.n	800960e <__ieee754_log+0x166>
 8009544:	2300      	movs	r3, #0
 8009546:	f7f6 ff63 	bl	8000410 <__aeabi_dcmpeq>
 800954a:	2800      	cmp	r0, #0
 800954c:	d019      	beq.n	8009582 <__ieee754_log+0xda>
 800954e:	9b00      	ldr	r3, [sp, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d100      	bne.n	8009556 <__ieee754_log+0xae>
 8009554:	e11c      	b.n	8009790 <__ieee754_log+0x2e8>
 8009556:	0018      	movs	r0, r3
 8009558:	f7f9 f9fa 	bl	8002950 <__aeabi_i2d>
 800955c:	4a94      	ldr	r2, [pc, #592]	@ (80097b0 <__ieee754_log+0x308>)
 800955e:	4b95      	ldr	r3, [pc, #596]	@ (80097b4 <__ieee754_log+0x30c>)
 8009560:	0004      	movs	r4, r0
 8009562:	000d      	movs	r5, r1
 8009564:	f7f8 faa6 	bl	8001ab4 <__aeabi_dmul>
 8009568:	4a93      	ldr	r2, [pc, #588]	@ (80097b8 <__ieee754_log+0x310>)
 800956a:	0006      	movs	r6, r0
 800956c:	000f      	movs	r7, r1
 800956e:	4b93      	ldr	r3, [pc, #588]	@ (80097bc <__ieee754_log+0x314>)
 8009570:	0020      	movs	r0, r4
 8009572:	0029      	movs	r1, r5
 8009574:	f7f8 fa9e 	bl	8001ab4 <__aeabi_dmul>
 8009578:	0002      	movs	r2, r0
 800957a:	000b      	movs	r3, r1
 800957c:	0030      	movs	r0, r6
 800957e:	0039      	movs	r1, r7
 8009580:	e7ba      	b.n	80094f8 <__ieee754_log+0x50>
 8009582:	4a8f      	ldr	r2, [pc, #572]	@ (80097c0 <__ieee754_log+0x318>)
 8009584:	4b8f      	ldr	r3, [pc, #572]	@ (80097c4 <__ieee754_log+0x31c>)
 8009586:	0030      	movs	r0, r6
 8009588:	0039      	movs	r1, r7
 800958a:	f7f8 fa93 	bl	8001ab4 <__aeabi_dmul>
 800958e:	0002      	movs	r2, r0
 8009590:	000b      	movs	r3, r1
 8009592:	2000      	movs	r0, #0
 8009594:	498c      	ldr	r1, [pc, #560]	@ (80097c8 <__ieee754_log+0x320>)
 8009596:	f7f8 fd73 	bl	8002080 <__aeabi_dsub>
 800959a:	0032      	movs	r2, r6
 800959c:	0004      	movs	r4, r0
 800959e:	000d      	movs	r5, r1
 80095a0:	003b      	movs	r3, r7
 80095a2:	0030      	movs	r0, r6
 80095a4:	0039      	movs	r1, r7
 80095a6:	f7f8 fa85 	bl	8001ab4 <__aeabi_dmul>
 80095aa:	000b      	movs	r3, r1
 80095ac:	0002      	movs	r2, r0
 80095ae:	0029      	movs	r1, r5
 80095b0:	0020      	movs	r0, r4
 80095b2:	f7f8 fa7f 	bl	8001ab4 <__aeabi_dmul>
 80095b6:	9b00      	ldr	r3, [sp, #0]
 80095b8:	9002      	str	r0, [sp, #8]
 80095ba:	9103      	str	r1, [sp, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d106      	bne.n	80095ce <__ieee754_log+0x126>
 80095c0:	0002      	movs	r2, r0
 80095c2:	000b      	movs	r3, r1
 80095c4:	0030      	movs	r0, r6
 80095c6:	0039      	movs	r1, r7
 80095c8:	f7f8 fd5a 	bl	8002080 <__aeabi_dsub>
 80095cc:	e77d      	b.n	80094ca <__ieee754_log+0x22>
 80095ce:	9800      	ldr	r0, [sp, #0]
 80095d0:	f7f9 f9be 	bl	8002950 <__aeabi_i2d>
 80095d4:	4a76      	ldr	r2, [pc, #472]	@ (80097b0 <__ieee754_log+0x308>)
 80095d6:	4b77      	ldr	r3, [pc, #476]	@ (80097b4 <__ieee754_log+0x30c>)
 80095d8:	0004      	movs	r4, r0
 80095da:	000d      	movs	r5, r1
 80095dc:	f7f8 fa6a 	bl	8001ab4 <__aeabi_dmul>
 80095e0:	4a75      	ldr	r2, [pc, #468]	@ (80097b8 <__ieee754_log+0x310>)
 80095e2:	9000      	str	r0, [sp, #0]
 80095e4:	9101      	str	r1, [sp, #4]
 80095e6:	4b75      	ldr	r3, [pc, #468]	@ (80097bc <__ieee754_log+0x314>)
 80095e8:	0020      	movs	r0, r4
 80095ea:	0029      	movs	r1, r5
 80095ec:	f7f8 fa62 	bl	8001ab4 <__aeabi_dmul>
 80095f0:	0002      	movs	r2, r0
 80095f2:	000b      	movs	r3, r1
 80095f4:	9802      	ldr	r0, [sp, #8]
 80095f6:	9903      	ldr	r1, [sp, #12]
 80095f8:	f7f8 fd42 	bl	8002080 <__aeabi_dsub>
 80095fc:	0032      	movs	r2, r6
 80095fe:	003b      	movs	r3, r7
 8009600:	f7f8 fd3e 	bl	8002080 <__aeabi_dsub>
 8009604:	0002      	movs	r2, r0
 8009606:	000b      	movs	r3, r1
 8009608:	9800      	ldr	r0, [sp, #0]
 800960a:	9901      	ldr	r1, [sp, #4]
 800960c:	e7dc      	b.n	80095c8 <__ieee754_log+0x120>
 800960e:	2380      	movs	r3, #128	@ 0x80
 8009610:	05db      	lsls	r3, r3, #23
 8009612:	f7f7 fa4f 	bl	8000ab4 <__aeabi_dadd>
 8009616:	0002      	movs	r2, r0
 8009618:	000b      	movs	r3, r1
 800961a:	0030      	movs	r0, r6
 800961c:	0039      	movs	r1, r7
 800961e:	f7f7 fe0f 	bl	8001240 <__aeabi_ddiv>
 8009622:	9004      	str	r0, [sp, #16]
 8009624:	9105      	str	r1, [sp, #20]
 8009626:	9800      	ldr	r0, [sp, #0]
 8009628:	f7f9 f992 	bl	8002950 <__aeabi_i2d>
 800962c:	9a04      	ldr	r2, [sp, #16]
 800962e:	9b05      	ldr	r3, [sp, #20]
 8009630:	9006      	str	r0, [sp, #24]
 8009632:	9107      	str	r1, [sp, #28]
 8009634:	0010      	movs	r0, r2
 8009636:	0019      	movs	r1, r3
 8009638:	f7f8 fa3c 	bl	8001ab4 <__aeabi_dmul>
 800963c:	4a63      	ldr	r2, [pc, #396]	@ (80097cc <__ieee754_log+0x324>)
 800963e:	9b02      	ldr	r3, [sp, #8]
 8009640:	4694      	mov	ip, r2
 8009642:	4463      	add	r3, ip
 8009644:	0002      	movs	r2, r0
 8009646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009648:	000b      	movs	r3, r1
 800964a:	9008      	str	r0, [sp, #32]
 800964c:	9109      	str	r1, [sp, #36]	@ 0x24
 800964e:	f7f8 fa31 	bl	8001ab4 <__aeabi_dmul>
 8009652:	0004      	movs	r4, r0
 8009654:	000d      	movs	r5, r1
 8009656:	4a5e      	ldr	r2, [pc, #376]	@ (80097d0 <__ieee754_log+0x328>)
 8009658:	4b5e      	ldr	r3, [pc, #376]	@ (80097d4 <__ieee754_log+0x32c>)
 800965a:	f7f8 fa2b 	bl	8001ab4 <__aeabi_dmul>
 800965e:	4a5e      	ldr	r2, [pc, #376]	@ (80097d8 <__ieee754_log+0x330>)
 8009660:	4b5e      	ldr	r3, [pc, #376]	@ (80097dc <__ieee754_log+0x334>)
 8009662:	f7f7 fa27 	bl	8000ab4 <__aeabi_dadd>
 8009666:	0022      	movs	r2, r4
 8009668:	002b      	movs	r3, r5
 800966a:	f7f8 fa23 	bl	8001ab4 <__aeabi_dmul>
 800966e:	4a5c      	ldr	r2, [pc, #368]	@ (80097e0 <__ieee754_log+0x338>)
 8009670:	4b5c      	ldr	r3, [pc, #368]	@ (80097e4 <__ieee754_log+0x33c>)
 8009672:	f7f7 fa1f 	bl	8000ab4 <__aeabi_dadd>
 8009676:	0022      	movs	r2, r4
 8009678:	002b      	movs	r3, r5
 800967a:	f7f8 fa1b 	bl	8001ab4 <__aeabi_dmul>
 800967e:	4a5a      	ldr	r2, [pc, #360]	@ (80097e8 <__ieee754_log+0x340>)
 8009680:	4b5a      	ldr	r3, [pc, #360]	@ (80097ec <__ieee754_log+0x344>)
 8009682:	f7f7 fa17 	bl	8000ab4 <__aeabi_dadd>
 8009686:	9a08      	ldr	r2, [sp, #32]
 8009688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800968a:	f7f8 fa13 	bl	8001ab4 <__aeabi_dmul>
 800968e:	4a58      	ldr	r2, [pc, #352]	@ (80097f0 <__ieee754_log+0x348>)
 8009690:	9008      	str	r0, [sp, #32]
 8009692:	9109      	str	r1, [sp, #36]	@ 0x24
 8009694:	4b57      	ldr	r3, [pc, #348]	@ (80097f4 <__ieee754_log+0x34c>)
 8009696:	0020      	movs	r0, r4
 8009698:	0029      	movs	r1, r5
 800969a:	f7f8 fa0b 	bl	8001ab4 <__aeabi_dmul>
 800969e:	4a56      	ldr	r2, [pc, #344]	@ (80097f8 <__ieee754_log+0x350>)
 80096a0:	4b56      	ldr	r3, [pc, #344]	@ (80097fc <__ieee754_log+0x354>)
 80096a2:	f7f7 fa07 	bl	8000ab4 <__aeabi_dadd>
 80096a6:	0022      	movs	r2, r4
 80096a8:	002b      	movs	r3, r5
 80096aa:	f7f8 fa03 	bl	8001ab4 <__aeabi_dmul>
 80096ae:	4a54      	ldr	r2, [pc, #336]	@ (8009800 <__ieee754_log+0x358>)
 80096b0:	4b54      	ldr	r3, [pc, #336]	@ (8009804 <__ieee754_log+0x35c>)
 80096b2:	f7f7 f9ff 	bl	8000ab4 <__aeabi_dadd>
 80096b6:	0022      	movs	r2, r4
 80096b8:	002b      	movs	r3, r5
 80096ba:	f7f8 f9fb 	bl	8001ab4 <__aeabi_dmul>
 80096be:	0002      	movs	r2, r0
 80096c0:	000b      	movs	r3, r1
 80096c2:	9808      	ldr	r0, [sp, #32]
 80096c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096c6:	f7f7 f9f5 	bl	8000ab4 <__aeabi_dadd>
 80096ca:	9a02      	ldr	r2, [sp, #8]
 80096cc:	4b4e      	ldr	r3, [pc, #312]	@ (8009808 <__ieee754_log+0x360>)
 80096ce:	0004      	movs	r4, r0
 80096d0:	1a9b      	subs	r3, r3, r2
 80096d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096d4:	000d      	movs	r5, r1
 80096d6:	4313      	orrs	r3, r2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	dd34      	ble.n	8009746 <__ieee754_log+0x29e>
 80096dc:	2200      	movs	r2, #0
 80096de:	4b3a      	ldr	r3, [pc, #232]	@ (80097c8 <__ieee754_log+0x320>)
 80096e0:	0030      	movs	r0, r6
 80096e2:	0039      	movs	r1, r7
 80096e4:	f7f8 f9e6 	bl	8001ab4 <__aeabi_dmul>
 80096e8:	0032      	movs	r2, r6
 80096ea:	003b      	movs	r3, r7
 80096ec:	f7f8 f9e2 	bl	8001ab4 <__aeabi_dmul>
 80096f0:	0002      	movs	r2, r0
 80096f2:	000b      	movs	r3, r1
 80096f4:	9002      	str	r0, [sp, #8]
 80096f6:	9103      	str	r1, [sp, #12]
 80096f8:	0020      	movs	r0, r4
 80096fa:	0029      	movs	r1, r5
 80096fc:	f7f7 f9da 	bl	8000ab4 <__aeabi_dadd>
 8009700:	9a04      	ldr	r2, [sp, #16]
 8009702:	9b05      	ldr	r3, [sp, #20]
 8009704:	f7f8 f9d6 	bl	8001ab4 <__aeabi_dmul>
 8009708:	9b00      	ldr	r3, [sp, #0]
 800970a:	0004      	movs	r4, r0
 800970c:	000d      	movs	r5, r1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <__ieee754_log+0x278>
 8009712:	0002      	movs	r2, r0
 8009714:	000b      	movs	r3, r1
 8009716:	9802      	ldr	r0, [sp, #8]
 8009718:	9903      	ldr	r1, [sp, #12]
 800971a:	f7f8 fcb1 	bl	8002080 <__aeabi_dsub>
 800971e:	e74f      	b.n	80095c0 <__ieee754_log+0x118>
 8009720:	4a23      	ldr	r2, [pc, #140]	@ (80097b0 <__ieee754_log+0x308>)
 8009722:	4b24      	ldr	r3, [pc, #144]	@ (80097b4 <__ieee754_log+0x30c>)
 8009724:	9806      	ldr	r0, [sp, #24]
 8009726:	9907      	ldr	r1, [sp, #28]
 8009728:	f7f8 f9c4 	bl	8001ab4 <__aeabi_dmul>
 800972c:	4a22      	ldr	r2, [pc, #136]	@ (80097b8 <__ieee754_log+0x310>)
 800972e:	9000      	str	r0, [sp, #0]
 8009730:	9101      	str	r1, [sp, #4]
 8009732:	9806      	ldr	r0, [sp, #24]
 8009734:	9907      	ldr	r1, [sp, #28]
 8009736:	4b21      	ldr	r3, [pc, #132]	@ (80097bc <__ieee754_log+0x314>)
 8009738:	f7f8 f9bc 	bl	8001ab4 <__aeabi_dmul>
 800973c:	0022      	movs	r2, r4
 800973e:	002b      	movs	r3, r5
 8009740:	f7f7 f9b8 	bl	8000ab4 <__aeabi_dadd>
 8009744:	e754      	b.n	80095f0 <__ieee754_log+0x148>
 8009746:	0002      	movs	r2, r0
 8009748:	000b      	movs	r3, r1
 800974a:	0030      	movs	r0, r6
 800974c:	0039      	movs	r1, r7
 800974e:	f7f8 fc97 	bl	8002080 <__aeabi_dsub>
 8009752:	9a04      	ldr	r2, [sp, #16]
 8009754:	9b05      	ldr	r3, [sp, #20]
 8009756:	f7f8 f9ad 	bl	8001ab4 <__aeabi_dmul>
 800975a:	9b00      	ldr	r3, [sp, #0]
 800975c:	0004      	movs	r4, r0
 800975e:	000d      	movs	r5, r1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <__ieee754_log+0x2c2>
 8009764:	0002      	movs	r2, r0
 8009766:	000b      	movs	r3, r1
 8009768:	e72c      	b.n	80095c4 <__ieee754_log+0x11c>
 800976a:	4a11      	ldr	r2, [pc, #68]	@ (80097b0 <__ieee754_log+0x308>)
 800976c:	4b11      	ldr	r3, [pc, #68]	@ (80097b4 <__ieee754_log+0x30c>)
 800976e:	9806      	ldr	r0, [sp, #24]
 8009770:	9907      	ldr	r1, [sp, #28]
 8009772:	f7f8 f99f 	bl	8001ab4 <__aeabi_dmul>
 8009776:	4a10      	ldr	r2, [pc, #64]	@ (80097b8 <__ieee754_log+0x310>)
 8009778:	9000      	str	r0, [sp, #0]
 800977a:	9101      	str	r1, [sp, #4]
 800977c:	9806      	ldr	r0, [sp, #24]
 800977e:	9907      	ldr	r1, [sp, #28]
 8009780:	4b0e      	ldr	r3, [pc, #56]	@ (80097bc <__ieee754_log+0x314>)
 8009782:	f7f8 f997 	bl	8001ab4 <__aeabi_dmul>
 8009786:	0002      	movs	r2, r0
 8009788:	000b      	movs	r3, r1
 800978a:	0020      	movs	r0, r4
 800978c:	0029      	movs	r1, r5
 800978e:	e733      	b.n	80095f8 <__ieee754_log+0x150>
 8009790:	2000      	movs	r0, #0
 8009792:	2100      	movs	r1, #0
 8009794:	e699      	b.n	80094ca <__ieee754_log+0x22>
 8009796:	46c0      	nop			@ (mov r8, r8)
 8009798:	c3500000 	.word	0xc3500000
 800979c:	43500000 	.word	0x43500000
 80097a0:	7fefffff 	.word	0x7fefffff
 80097a4:	fffffc01 	.word	0xfffffc01
 80097a8:	00095f64 	.word	0x00095f64
 80097ac:	3ff00000 	.word	0x3ff00000
 80097b0:	fee00000 	.word	0xfee00000
 80097b4:	3fe62e42 	.word	0x3fe62e42
 80097b8:	35793c76 	.word	0x35793c76
 80097bc:	3dea39ef 	.word	0x3dea39ef
 80097c0:	55555555 	.word	0x55555555
 80097c4:	3fd55555 	.word	0x3fd55555
 80097c8:	3fe00000 	.word	0x3fe00000
 80097cc:	fff9eb86 	.word	0xfff9eb86
 80097d0:	df3e5244 	.word	0xdf3e5244
 80097d4:	3fc2f112 	.word	0x3fc2f112
 80097d8:	96cb03de 	.word	0x96cb03de
 80097dc:	3fc74664 	.word	0x3fc74664
 80097e0:	94229359 	.word	0x94229359
 80097e4:	3fd24924 	.word	0x3fd24924
 80097e8:	55555593 	.word	0x55555593
 80097ec:	3fe55555 	.word	0x3fe55555
 80097f0:	d078c69f 	.word	0xd078c69f
 80097f4:	3fc39a09 	.word	0x3fc39a09
 80097f8:	1d8e78af 	.word	0x1d8e78af
 80097fc:	3fcc71c5 	.word	0x3fcc71c5
 8009800:	9997fa04 	.word	0x9997fa04
 8009804:	3fd99999 	.word	0x3fd99999
 8009808:	0006b851 	.word	0x0006b851

0800980c <_init>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	46c0      	nop			@ (mov r8, r8)
 8009810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009812:	bc08      	pop	{r3}
 8009814:	469e      	mov	lr, r3
 8009816:	4770      	bx	lr

08009818 <_fini>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	46c0      	nop			@ (mov r8, r8)
 800981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981e:	bc08      	pop	{r3}
 8009820:	469e      	mov	lr, r3
 8009822:	4770      	bx	lr
